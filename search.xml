<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flask微服务框架</title>
      <link href="/2022/08/01/2022-8-1-Flask%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/08/01/2022-8-1-Flask%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="Web-Framework"><a href="#Web-Framework" class="headerlink" title="Web Framework"></a>Web Framework</h4><p>​    web应用框架表示一个库和模块的集合，使Web开发人员能够编写应用程序，而不必担心协议，线程管理等低级细节</p><h4 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h4><p>​    Flask是一个用Python编写的Web应用框架，它由Armin Ronacher开发，Flask基于Werkzeug WSGI工具包和Jinja2模块引擎</p><h4 id="WSGI"><a href="#WSGI" class="headerlink" title="WSGI"></a>WSGI</h4><pre><code> Web Server Gateway Interface（Web服务器网关接口，WSGI）已被用作Python Web应用程序开发的标准。 WSGI是Web服务器和Web应用程序之间通用接口的规范。</code></pre><h4 id="Werkzeug"><a href="#Werkzeug" class="headerlink" title="Werkzeug"></a>Werkzeug</h4><p>​    它是一个WSGI工具包，它实现了请求，响应对象和实用函数。这使得能够在其上构建Web框架</p><h4 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h4><p>​    jinja2是Python的一个流行的模板引擎。Web模板系统将模板与特定数据源组合以呈现动态网页</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li><p>创建一个虚拟python环境</p></li><li><p>使用pip安装flask</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure></li></ul><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>route()函数是一个装饰器，表示路由，指定应用URL应该调用的函数</li><li>app.route(rule, options)：rule 参数表示与该函数的URL绑定；options 是要转发给基础Rule对象的参数列表</li></ul><h4 id="路由变量规则"><a href="#路由变量规则" class="headerlink" title="路由变量规则"></a>路由变量规则</h4><ul><li>通过向规则参数添加变量部分，可以动态构建URL</li><li>变量部分标记为：&lt;装换类型:变量名&gt;</li><li>它作为关键字参数传递给与路由规则相关联的函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_name</span>(<span class="params">name</span>):</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">f&#x27;Hello <span class="subst">&#123;name&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">序号</th><th align="center">转换器</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong>int</strong></td><td align="center">接受整数</td></tr><tr><td align="center">2</td><td align="center"><strong>float</strong></td><td align="center">对于浮点值</td></tr><tr><td align="center">3</td><td align="center">**path **</td><td align="center">接受用作目录分隔符的斜杠</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/blog/&lt;int:postID&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_blog</span>(<span class="params">postID</span>):</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">f&#x27;Blog Number <span class="subst">&#123;postID&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/rev/&lt;float:revNo&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">revision</span>(<span class="params">revNo</span>):</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">f&#x27;Revision Number<span class="subst">&#123;revNo&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">   app.run()</span><br></pre></td></tr></table></figure><h3 id="URL构建"><a href="#URL构建" class="headerlink" title="URL构建"></a>URL构建</h3><p>​    使用url_for()函数来动态构建特定函数的URL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,redirect,url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_admin</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello,Admin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/guest/&lt;guest&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_guest</span>(<span class="params">guest</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;hello <span class="subst">&#123;guest&#125;</span> as Admin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_user</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1. 当name为admin时，重定向至hello_admin绑定的url</span></span><br><span class="line"><span class="string">    2. 当name为其他值时，重定向至hello_guest绑定的url</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;hello_admin&quot;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;hello_guest&quot;</span>,guest=name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>GET</strong></td><td>以未加密的形式将数据发送到服务器</td></tr><tr><td><strong>HEAD</strong></td><td>和GET方法相同，但没有响应体。</td></tr><tr><td><strong>POST</strong></td><td>用于将HTML表单数据发送到服务器。POST方法接收的数据不由服务器缓存。</td></tr><tr><td><strong>PUT</strong></td><td>用上传的内容替换目标资源的所有当前表示。</td></tr><tr><td><strong>DELETE</strong></td><td>删除由URL给出的目标资源的所有当前表示。</td></tr></tbody></table><ul><li>默认情况下Flask路由响应GET请求</li><li>可以通过rotue()装饰器来指定请求方法</li></ul><p>login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;http://localhost:5000/login&quot;</span> <span class="attr">method</span> = <span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span>Enter Name:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;nm&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;submit&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,redirect,url_for,request,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">## http方法使用，模拟登录</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/success/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">success</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;welcome <span class="subst">&#123;name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment">## 请求方式为post，取请求参数中的数据</span></span><br><span class="line">        user = request.form[<span class="string">&#x27;nm&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>,name = user))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">## 请求方式为get，取请求参数中的数据</span></span><br><span class="line">        user = request.args.get(<span class="string">&#x27;nm&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>,name = user))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>​    Flask视图函数的主要作用是生成请求的响应，这是最简单的请求。视图函数有两个作用：返回业务逻辑；返回响应内容，但是在大型应用中把业务逻辑和表现内容放在一起，会增加代码的复杂度和维护成本，因此需要用到模板</p><h4 id="模板概述"><a href="#模板概述" class="headerlink" title="模板概述"></a>模板概述</h4><ul><li>模板时一个包含响应文本的文件，其中用占位符（变量）表达动态部分，告诉模板引擎具体的值需要从使用数据中获取</li><li>使用真实的值替换变量的过程成为”渲染”</li><li>Flask是使用Jinja2这个模板引擎来渲染</li></ul><h4 id="模板的好处"><a href="#模板的好处" class="headerlink" title="模板的好处"></a>模板的好处</h4><ul><li>视图函数只负责业务逻辑和数据处理</li><li>而模板则渠道视图函数的数据结果进行展示</li><li>代码结构清晰，耦合度低</li></ul><h4 id="模板的使用"><a href="#模板的使用" class="headerlink" title="模板的使用"></a>模板的使用</h4><p>​    在项目下创建 templates 文件夹，用于存放所有模板文件，并在目录下创建一个模板文件 html 文件 hello.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>/&gt;</span>this is my template:</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span>&#123;&#123;my_str&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span>&#123;&#123;my_int&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span>&#123;&#123;my_list&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span>&#123;&#123;my_dict&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>/&gt;</span>获取数据</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> &#123;&#123;my_str[0]&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> &#123;&#123;my_int + 10&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> &#123;&#123;my_list[-1]&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> &#123;&#123;my_dict.get(&#x27;name&#x27;)&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">## 代码中传入字符串，列表，字典到模板中</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    my_str = <span class="string">&quot;hello,world&quot;</span></span><br><span class="line">    my_int = <span class="number">10</span></span><br><span class="line">    my_list = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line">    my_dict = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;kane&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;hello.html&quot;</span>,</span><br><span class="line">                           my_str = my_str,</span><br><span class="line">                           my_int = my_int,</span><br><span class="line">                           my_list = my_list,</span><br><span class="line">                           my_dict = my_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><ul><li>Web应用程序通常需要静态文件，例如javascript文件或致辞网页显示的css文件</li><li>这些文件需要存放在项目中/static文件夹中，以供应用使用</li></ul><p>在下面示例中，在index.html中的OnClick时间中调用hello.JS中定义的javascript函数，该函数在flask应用的”/“url上呈现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">## 使用静态js文件</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> = <span class="string">&quot;text/javascript&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">src</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename = &#x27;hello.js&#x27;) &#125;&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;button&quot;</span> <span class="attr">onclick</span> = <span class="string">&quot;sayHello()&quot;</span> <span class="attr">value</span> = <span class="string">&quot;Say Hello&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h3><p>​    来自客户端网页的数据作为全局请求对象发送到服务器。为了处理请求数据，应该从Flask模块导入。</p><p>Request对象的重要属性如下：</p><ul><li><strong>Form</strong> - 它是一个字典对象，包含表单参数及其值的键和值对。</li><li><strong>args</strong> - 解析查询字符串的内容，它是问号（？）之后的URL的一部分。</li><li><strong>Cookies</strong> - 保存Cookie名称和值的字典对象。</li><li><strong>files</strong> - 与上传文件有关的数据。</li><li><strong>method</strong> - 当前请求方法。</li></ul><h4 id="将表单数据发送给模板"><a href="#将表单数据发送给模板" class="headerlink" title="将表单数据发送给模板"></a>将表单数据发送给模板</h4><p>​    在示例中，”/“会呈现出student.html网页，填入数据并发布后会触发result()函数的”/result”url，result()函数收集request.form中的表单数据，发送给result.html渲染出来</p><p>student.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:5000/result&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Name&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Physics <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Physics&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Chemistry <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;chemistry&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Maths <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> =<span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;Mathematics&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;submit&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>result.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span> = <span class="string">1</span>&gt;</span></span><br><span class="line">     &#123;% for key, value in result.items() %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">th</span>&gt;</span> &#123;&#123; key &#125;&#125; <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">td</span>&gt;</span> &#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"> &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>flask视图函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template, request</span><br><span class="line">app= Flask(__name__)</span><br><span class="line"><span class="comment">## 将表单数据发送至模板</span></span><br><span class="line"><span class="comment"># 1. 首次进入展示student.html页面填写数据</span></span><br><span class="line"><span class="comment"># 2. 提交数据后，跳转至result路由地址对应模板，对数据进行回显</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">student</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;student.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/result&#x27;</span>,methods =[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        result = request.form</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;result.html&#x27;</span>,result = result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><ul><li>Cookie以文本形式存储在客户端的计算机上，目的是记住和跟踪与客户使用相关的数据，以获取更好的访问者体验和网站统计信息</li><li>Request对象包含Cookie熟悉，它是所有cookie变量及其对应值的字典对象</li></ul><p>操作cookie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,make_response,request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment">## 对cookie的相关操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set_cookies&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_cookies</span>():</span></span><br><span class="line">    resp = make_response(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="comment"># 设置cookie的key/value，以及过期时间</span></span><br><span class="line">    resp.set_cookie(<span class="string">&#x27;kane&#x27;</span>,<span class="string">&#x27;value&#x27;</span>,max_age=<span class="number">3600</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_cookies&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookies</span>():</span></span><br><span class="line"><span class="comment"># 获取cookies值</span></span><br><span class="line">    cookie_1 = request.cookies.get(<span class="string">&#x27;kane&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> cookie_1</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/delete_cookies&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_cookies</span>():</span></span><br><span class="line">    resp = make_response(<span class="string">&quot;del success&quot;</span>)</span><br><span class="line">    <span class="comment"># 删除cookie</span></span><br><span class="line">    resp.delete_cookie(<span class="string">&quot;kane&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Sessions-会话"><a href="#Sessions-会话" class="headerlink" title="Sessions(会话)"></a>Sessions(会话)</h3><ul><li>与cookie不同，session数据存储在服务器上，会话是客户端登录到服务器并注销服务器的时间间隔，需要在该会话中保存的数据会存储在服务器上的临时目录中</li><li>为每个客户端分配会话ID，会话数据存储在cookie的顶部，服务器以加密方式对其进行签名，对于此加密，Flask应用需要一个定义的SECRET_KEY</li><li>Session对象也是一个字典对象，包含会话变量和关联值的键值对</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,make_response,session,url_for,escape,request,redirect</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;joijgoijroijaguiahyuie&#x27;</span></span><br><span class="line"><span class="comment">## 模拟登录功能，并设置session</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">in</span> session:</span><br><span class="line">        username= session[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;登录用户名是:&#x27;</span> + username + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + <span class="string">&quot;&lt;b&gt;&lt;a href = &#x27;/logout&#x27;&gt;点击这里注销&lt;/a&gt;&lt;/b&gt;&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;您暂未登录， &lt;br&gt;&lt;a href = &#x27;/login&#x27;&gt;&lt;/b&gt;&quot;</span> + <span class="string">&quot;点击这里登录&lt;/b&gt;&lt;/a&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        session[<span class="string">&#x27;username&#x27;</span>] = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   &lt;form action = &quot;&quot; method = &quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&lt;input type=&quot;submit&quot; value =&quot;登录&quot;/&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">   &lt;/form&gt;</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">   session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">   <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="重定向和错误code"><a href="#重定向和错误code" class="headerlink" title="重定向和错误code"></a>重定向和错误code</h3><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Flask.redirect(location, statuscode, response)</span><br><span class="line"><span class="comment"># location参数是应该重定向响应的URL。</span></span><br><span class="line"><span class="comment"># statuscode发送到浏览器标头，默认为302。</span></span><br><span class="line"><span class="comment"># response参数用于实例化响应。</span></span><br></pre></td></tr></table></figure><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Flask.abort(code)</span><br><span class="line"><span class="comment"># 400 - 用于错误请求</span></span><br><span class="line"><span class="comment"># 401 - 用于未身份验证的</span></span><br><span class="line"><span class="comment"># 403 - Forbidden</span></span><br><span class="line"><span class="comment"># 404 - 未找到</span></span><br><span class="line"><span class="comment"># 406 - 表示不接受</span></span><br><span class="line"><span class="comment"># 415 - 用于不支持的媒体类型</span></span><br><span class="line"><span class="comment"># 429 - 请求过多</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,redirect,url_for,render_template,request,abort</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> request.form[<span class="string">&#x27;nm&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;success&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        abort(<span class="number">401</span>)</span><br><span class="line">        <span class="comment"># return redirect(url_for(&#x27;index&#x27;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/success&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">success</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login in successfully&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="消息闪现"><a href="#消息闪现" class="headerlink" title="消息闪现"></a>消息闪现</h3><p>​    消息闪现使得在一个请求结束的时候记录一个信息，并且在下次（且仅在下一次）请求时访问，通常与布局模块结合使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flash(message, category)</span><br><span class="line"><span class="comment"># message 参数是要闪现的实际消息。</span></span><br><span class="line"><span class="comment"># category 参数是可选的。它可以是“error”，“info”或“warning”。</span></span><br></pre></td></tr></table></figure><p>flash示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,flash,request,redirect,render_template,request,url_for</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;random string&#x27;</span></span><br><span class="line"><span class="comment"># 消息闪现</span></span><br><span class="line"><span class="comment"># 1. flash(message,category)</span></span><br><span class="line"><span class="comment"># message 闪现的实际消息</span></span><br><span class="line"><span class="comment"># category 可选参数，它可以是&quot;error&quot;,&quot;info&quot;,&quot;warning&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;flash_index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1. 当输入用户名或者密码错误时，flash保存一条消息，给下一个模板调用，并将消息展示出来</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> request.form[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span> <span class="keyword">or</span> request.form[<span class="string">&#x27;password&#x27;</span>] != <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            error = <span class="string">&quot;Invalid username or password&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">&quot;you were successfully logged in&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;index&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;flash_login.html&quot;</span>,error = error)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>flash_index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;% with messages = get_flashed_messages() %&#125; </span><br><span class="line">         &#123;% if messages %&#125;</span><br><span class="line">               &#123;% for message in messages %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">               &#123;% endfor %&#125;</span><br><span class="line">         &#123;% endif %&#125;</span><br><span class="line">    &#123;% endwith %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Welcome!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;login&#x27;) &#125;&#125;&quot;</span>&gt;</span>login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>flash_login.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span> = <span class="string">&quot;post&quot;</span> <span class="attr">action</span> = <span class="string">&quot;http://localhost:5000/login&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&#x27;username&#x27;</span> <span class="attr">name</span> = <span class="string">&#x27;username&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&#x27;password&#x27;</span> <span class="attr">name</span> = <span class="string">&#x27;password&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;Submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    &#123;% if error %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>: &#123;&#123; error &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><ul><li>首先需要一个HTML表单，将文件发布至URL</li><li>URL处理程序从request.files[]中提取文件，并将其保存到所配置的路径</li><li>每个上传文件首先会保存在服务器的临时位置，然后再保存到最终位置</li></ul><p>在Flask对象中配置上传文件的路径和大小限制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>]  </span><br><span class="line"><span class="comment"># 定义上传文件夹的路径 </span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] </span><br><span class="line"><span class="comment"># 指定要上传的文件的最大大小（以字节为单位）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 定义上传文件夹的路径</span></span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;upload/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;upload_file.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/uploader&#x27;</span>,methods=[<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploader</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        f.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>],secure_filename(f.filename)))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;file upload successfully&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;upload_file.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>upload_file.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>File Upload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;http://localhost:5000/uploader&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flask-WTF"><a href="#flask-WTF" class="headerlink" title="flask-WTF"></a>flask-WTF</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-WTF</span><br></pre></td></tr></table></figure><ul><li>flask-WTF其实是对wtforms组件的封装，使其支持flask框架的热插拔</li><li>主要作用于表单验证，模板渲染</li></ul><h4 id="WTforms表单定义"><a href="#WTforms表单定义" class="headerlink" title="WTforms表单定义"></a>WTforms表单定义</h4><table><thead><tr><th align="left">表单字段</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><strong>TextField</strong></td><td align="left">表示&lt;input type =’text’&gt; HTML表单元素</td></tr><tr><td align="left"><strong>BooleanField</strong></td><td align="left"><strong>BooleanField</strong>表示&lt;input type =’checkbox’&gt; HTML表单元素</td></tr><tr><td align="left"><strong>DecimalField</strong></td><td align="left">用于显示带小数的数字的文本字段</td></tr><tr><td align="left"><strong>IntegerField</strong></td><td align="left">用于显示整数的文本字段</td></tr><tr><td align="left"><strong>RadioField</strong></td><td align="left">表示&lt;input type = ‘radio’&gt; HTML表单元素</td></tr><tr><td align="left"><strong>SelectField</strong></td><td align="left">表示选择表单元素</td></tr><tr><td align="left"><strong>TextAreaField</strong></td><td align="left">表示&lt;textarea&gt; HTML表单元素</td></tr><tr><td align="left"><strong>PasswordField</strong></td><td align="left">表示&lt;input type = ‘password’&gt; HTML表单元素</td></tr><tr><td align="left"><strong>SubmitField</strong></td><td align="left">表示&lt;input type = ‘submit’&gt;表单元素</td></tr></tbody></table><h4 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h4><ol><li><p>自定义一个表单类，需要继承FlaskForm</p></li><li><p>定义好需要验证的字段，name必须与html文件定义的name一致</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span> = <span class="string">&quot;text-align: center;&quot;</span>&gt;</span>Contact Form<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      &#123;% for message in form.name.errors %&#125;</span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;http://localhost:5000/contact&quot;</span> <span class="attr">method</span> = <span class="string">post</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Contact Form<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">            &#123;&#123; form.hidden_tag() &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span> =<span class="string">&quot;font-size:20px;font-weight:bold;margin-left:150px;&quot;</span>&gt;</span></span><br><span class="line">               &#123;&#123; form.name.label &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">               &#123;&#123; form.name &#125;&#125;</span><br><span class="line">               <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">               &#123;&#123; form.submit &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> TelField,SubmitField,validators</span><br><span class="line"><span class="comment">## 服务端定义表单元素</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactFrom</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    name = TelField(<span class="string">&quot;Name Of Student&quot;</span>,[validators.DataRequired(message=<span class="string">&quot;请输入name&quot;</span>)])</span><br><span class="line">    submit = SubmitField(<span class="string">&#x27;send&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>需要使用这个表单类对象时，直接实例化对象ContactFrom()即可</p></li><li><p>并可使用form.validate()判断验证是否通过，如果验证失败可以通过form.errors来获取错误信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template,request,flash</span><br><span class="line"><span class="keyword">from</span> forms <span class="keyword">import</span> ContactFrom</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;development key&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/contact&#x27;</span>,methods = [<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contact</span>():</span></span><br><span class="line">    form = ContactFrom()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="comment">## form.validate() ：调用全部表单元素中的validate方法，全部通过则返回True</span></span><br><span class="line">        <span class="keyword">if</span> form.validate() == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&quot;success.html&quot;</span>,form =form)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;WTForm.html&quot;</span>,form =form)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="验证器定义"><a href="#验证器定义" class="headerlink" title="验证器定义"></a>验证器定义</h4><table><thead><tr><th>验证器</th><th>描述</th></tr></thead><tbody><tr><td><strong>DataRequired</strong></td><td>检查输入字段是否为空</td></tr><tr><td><strong>Email</strong></td><td>检查字段中的文本是否遵循电子邮件ID约定</td></tr><tr><td><strong>IPAddress</strong></td><td>在输入字段中验证IP地址</td></tr><tr><td><strong>Length</strong></td><td>验证输入字段中的字符串的长度是否在给定范围内</td></tr><tr><td><strong>NumberRange</strong></td><td>验证给定范围内输入字段中的数字</td></tr><tr><td><strong>URL</strong></td><td>验证在输入字段中输入的URL</td></tr><tr><td><strong>Regexp</strong></td><td>定义正则表达式</td></tr><tr><td><strong>UUID</strong></td><td>验证 UUID</td></tr></tbody></table><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><h4 id="SQLAlchemy"><a href="#SQLAlchemy" class="headerlink" title="SQLAlchemy"></a>SQLAlchemy</h4><p>​    在Flask Web程序中使用原始SQL对数据库执行CRUD操作很繁琐，SQLAlchemy工具包是一个强大的OR Mapper，它为程序开发人员提供了SQL的全部功能和灵活性</p><h5 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h5><ul><li>对象关系映射是将对象参数映射到底层RDBMS表结构的技术</li><li>ORM API提供了执行CRUD操作的方法，而不必编写原始SQL语句</li></ul><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time : 2022/8/22 21:05</span></span><br><span class="line"><span class="comment"># @Author : Kane.Yan</span></span><br><span class="line"><span class="comment"># @File : app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, flash, url_for, redirect, render_template</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;sqlite:///students.sqlite3&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&quot;random string&quot;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment">##  创建数据对象模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(<span class="string">&#x27;student_id&#x27;</span>,db.Integer,primary_key = <span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    city = db.Column(db.String(<span class="number">50</span>))</span><br><span class="line">    addr = db.Column(db.String(<span class="number">200</span>))</span><br><span class="line">    pin = db.Column(db.String(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,city,addr,pin</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.city = city</span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.pin = pin</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_all</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;show_all.html&#x27;</span>,students = Student.query.<span class="built_in">all</span>())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/new&#x27;</span>,methods = [<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">or</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;city&#x27;</span>] <span class="keyword">or</span> <span class="keyword">not</span> request.form[<span class="string">&#x27;addr&#x27;</span>]:</span><br><span class="line">            flash(<span class="string">&#x27;请输入参数&#x27;</span>,<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            student = Student(request.form[<span class="string">&#x27;name&#x27;</span>],request.form[<span class="string">&#x27;city&#x27;</span>],request.form[<span class="string">&#x27;addr&#x27;</span>],request.form[<span class="string">&#x27;pin&#x27;</span>])</span><br><span class="line">            db.session.add(student)</span><br><span class="line">            db.session.commit()</span><br><span class="line">            flash(<span class="string">&quot;添加记录成功&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;show_all&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;new.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    db.create_all()</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>show_all.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span> = <span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;show_all&#x27;) &#125;&#125;&quot;</span>&gt;</span>Comments - Flask</span><br><span class="line">            SQLAlchemy example<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      &#123;%- for message in get_flashed_messages() %&#125;</span><br><span class="line">         &#123;&#123; message &#125;&#125;</span><br><span class="line">      &#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Students (<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;&#123;&#123; url_for(&#x27;new&#x27;) &#125;&#125;&quot;</span>&gt;</span>Add Student</span><br><span class="line">         <span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>City<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>Address<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">th</span>&gt;</span>Pin<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            &#123;% for student in students %&#125;</span><br><span class="line">               <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; student.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; student.city &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; student.addr &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; student.pin &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>new.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Students - Flask SQLAlchemy example<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      &#123;%- for category, message in get_flashed_messages(with_categories = true) %&#125;</span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;alert alert-danger&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; message &#125;&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;%- endfor %&#125;</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span> = <span class="string">&quot;&#123;&#123; request.path &#125;&#125;&quot;</span> <span class="attr">method</span> = <span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> = <span class="string">&quot;name&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;Name&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> = <span class="string">&quot;city&quot;</span>&gt;</span>City<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;city&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;city&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> = <span class="string">&quot;addr&quot;</span>&gt;</span>addr<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span> = <span class="string">&quot;addr&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;addr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span> = <span class="string">&quot;pin&quot;</span>&gt;</span>City<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">name</span> = <span class="string">&quot;pin&quot;</span> <span class="attr">placeholder</span> = <span class="string">&quot;pin&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;submit&quot;</span> <span class="attr">value</span> = <span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS自动化</title>
      <link href="/2022/07/24/2022-7-24-IOS%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2022/07/24/2022-7-24-IOS%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> libimobiledevice</span></span><br><span class="line">brew install libimobiledevice</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用本机与苹果iOS设备的服务进行通信的库</span></span><br><span class="line">brew install ideviceinstaller</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取设备udid、安装app、卸载app、获取bundleid</span></span><br><span class="line">brew install carthage</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ios-deploy 不依赖于XCODE,进行安装和调试IOS应用程序</span></span><br><span class="line">brew install ios-deploy</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> node &amp; npm</span></span><br><span class="line">brew install node</span><br><span class="line">brew install npm</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> appium</span></span><br><span class="line">npm install -g appium</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> appium-doctor</span></span><br><span class="line">npm install -g appium-doctor</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证appium环境</span></span><br><span class="line">appium-doctor --ios</span><br></pre></td></tr></table></figure><h4 id="安装WebDriverAgent"><a href="#安装WebDriverAgent" class="headerlink" title="安装WebDriverAgent"></a>安装WebDriverAgent</h4><ol><li>git拉取最新WebDriverAgent</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:facebookarchive/WebDriverAgent.git</span><br></pre></td></tr></table></figure><ol start="2"><li><p>进入webdriveragent目录并执行./Scripts/bootstrap.sh</p></li><li><p>在Xcode中打开项目</p><p><img src="https://s2.loli.net/2022/07/25/hjwTmz9raSeE46B.png" alt="image-20220725205559752"></p></li><li><p>在Product -&gt;Scheme选择WebDriverAgentRunner</p><p><img src="https://s2.loli.net/2022/07/25/YhQgwzt4pBb8roC.png" alt="image-20220725205755706"></p></li><li><p>找到build Settings —&gt; packaging—&gt; Product Bundle Identifier 选项。将值修改为唯一识别的字符串</p><p><img src="https://s2.loli.net/2022/07/25/ktwYpfhNjQUSieg.png" alt="image-20220725210002280"></p></li><li><p>连接iPhone，并执行开始test，或直接command+u</p><p><img src="https://s2.loli.net/2022/07/30/ZrOWaJnjpsA2MBL.png" alt="image-20220730000033455"></p></li><li><p>iPhone 在通用中添加信任后，再次执行command+u，出现一下日志则成功</p><p><img src="https://s2.loli.net/2022/07/29/Yt9yXGongdB8Zs7.png" alt="image-20220729235526083"></p></li><li><p>本机安装 usbmuxd，它自带了iproxy小工具，iproxy将设备上的端口映射到电脑上的某个端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install usbmuxd</span><br><span class="line">iproxy 8100 8100</span><br></pre></td></tr></table></figure></li><li><p>浏览器打开<a href="http://localhost:8100/status%E6%A3%80%E6%B5%8B">http://localhost:8100/status检测</a></p><p><img src="https://s2.loli.net/2022/07/29/Yxsda6vVCHULupX.png" alt="image-20220729235834231"></p><p><img src="https://s2.loli.net/2022/07/29/IU3pLXTJBQZF4la.png" alt="image-20220729235725435"></p></li></ol><h5 id="安装WebDriverAgent过程中出现的问题"><a href="#安装WebDriverAgent过程中出现的问题" class="headerlink" title="安装WebDriverAgent过程中出现的问题"></a>安装WebDriverAgent过程中出现的问题</h5><h6 id="1-部署成功后日志出现：-UITestingUITests-internalImplementation-unrecognized-selector-sent-to-instance"><a href="#1-部署成功后日志出现：-UITestingUITests-internalImplementation-unrecognized-selector-sent-to-instance" class="headerlink" title="1.部署成功后日志出现：[UITestingUITests internalImplementation]: unrecognized selector sent to instance"></a>1.部署成功后日志出现：[UITestingUITests internalImplementation]: unrecognized selector sent to instance</h6><p>原因：由于xcode版本过高，部分内容会编译失败</p><p>解决方案：</p><ol><li><p>添加下方代码在文件<strong>WebDriverAgent/PrivateHeaders/XCTest/XCTestCase.h</strong>高亮处</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@property(nonatomic) BOOL shouldSetShouldHaltWhenReceivesControl; <span class="comment">// </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/30/arVdjTzipcOe1Ev.png" alt="image-20220730000505387"></p></li><li><p><strong>WebDriverAgent/WebDriverAgentLib/Utilities/FBFailureProofTestCase.m</strong>，修改红框中代码26~36行为下方内容，替换后的代码如下图</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  self.internalImplementation = (_XCTestCaseImplementation *)[FBXCTestCaseImplementationFailureHoldingProxy proxyWithXCTestCaseImplementation:self.internalImplementation];</span></span><br><span class="line">  <span class="keyword">if</span> ([self respondsToSelector:@selector(internalImplementation)]) &#123;</span><br><span class="line">    <span class="comment">// The `internalImplementation` API has been removed since Xcode 11.4</span></span><br><span class="line">      self.internalImplementation =</span><br><span class="line">        (_XCTestCaseImplementation *)[FBXCTestCaseImplementationFailureHoldingProxy</span><br><span class="line">                                      proxyWithXCTestCaseImplementation:self.internalImplementation];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// https://github.com/appium/appium/issues/13949</span></span><br><span class="line">      self.shouldSetShouldHaltWhenReceivesControl = NO;</span><br><span class="line">      self.shouldHaltWhenReceivesControl = NO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/30/dx72JABM9fTcYQX.png" alt="image-20220730000730140"></p></li></ol><h4 id="直接使用Appium-GUI下的"><a href="#直接使用Appium-GUI下的" class="headerlink" title="直接使用Appium GUI下的"></a>直接使用Appium GUI下的</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="环境结构说明"><a href="#环境结构说明" class="headerlink" title="环境结构说明"></a>环境结构说明</h4><h5 id="原理与变迁"><a href="#原理与变迁" class="headerlink" title="原理与变迁"></a>原理与变迁</h5><ul><li>IOS 8.0到9.3之间的时候一直以instruments下的UIAtutomation为驱动层技术</li><li>IOS 9.3之后的版本退出XCUITest 工具，用来替代UIAtutomation，这个需要appium1.6.0以上的版本才能支持</li><li>Facebook退出的WebDriverAgent成为主流（实现的Server能够支持单台Mac对应多个设备）</li><li>Appium在IOS 9.3之后全面采用WebDriverAgent的方案</li></ul><h5 id="架构原理"><a href="#架构原理" class="headerlink" title="架构原理"></a>架构原理</h5><ul><li><p>XCUITest是苹果开发的一个做IOS自动化测试的框架，需要了解Swift等编程知识，而WebDriverAgent是Facebook开发的一个IOS自动化工具</p><p><img src="https://s2.loli.net/2022/07/30/Dz8UZBrtuvdwp5Y.png" alt="image-20220730235351450"></p></li><li><p>WebDriverAgent在Client创建一个server，在手机端安装一个WebDriverAgentRunner的APP，这个应用会接受来自server的指令，并连接底层的XCTest.framwork，让XCTest.framwork调用苹果API来操作手机进行自动化</p></li><li><p>而Appium是把WebDriverAgentRunner给集成进去，因此实现Appium的跨平台能力</p></li></ul><h5 id="Appium跨平台示例"><a href="#Appium跨平台示例" class="headerlink" title="Appium跨平台示例"></a>Appium跨平台示例</h5><img src="https://s2.loli.net/2022/07/31/StdqGeNHA5BlTcf.png" alt="image-20220731001547877" style="zoom:50%;" /><h4 id="环境相关命令"><a href="#环境相关命令" class="headerlink" title="环境相关命令"></a>环境相关命令</h4><h5 id="libimobiledevice-ideviceinstaller-库命令"><a href="#libimobiledevice-ideviceinstaller-库命令" class="headerlink" title="libimobiledevice / ideviceinstaller 库命令"></a>libimobiledevice / ideviceinstaller 库命令</h5><p>​    相当于Android的abd，是Appium底层用到的工具之一，用户获取IOS设备信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取当前所连接设备的uuid</span></span><br><span class="line">idevice_id -l</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装应用</span></span><br><span class="line">ideviceinstaller -u [udid] -i [xxx.ipa]  # ipa为应用本地路径</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载应用</span></span><br><span class="line">ideviceinstaller -u [udid] -u [bundleId]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看设备已安装应用</span></span><br><span class="line">ideviceinstaller -u [udid] -l  # 查看设备安装的第三方应用</span><br><span class="line">ideviceinstaller -u [udid] -l -o list_user # 同上，查看设备安装的第三方应用</span><br><span class="line">ideviceinstaller -u [udid] -l -o list_system # 查看设备安装的系统应用</span><br><span class="line">ideviceinstaller -u [udid] -l -o list_all# 查看设备安装的全部应用</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取设备信息</span></span><br><span class="line">ideviceinfo -u [udid] # 获取设备信息</span><br><span class="line">ideviceinfo -u [udid] -k DeviceName # 获取设备名称</span><br><span class="line">ideviceinfo -u [udid] -k ProductVersion # 获取设备IOS系统版本</span><br><span class="line">ideviceinfo -u [udid] -k ProductType # 获取设备类型 </span><br><span class="line">ideviceinfo -u [udid] -k ProductName  # 获取设备系统名称</span><br><span class="line"></span><br><span class="line">idevicesyslog # 查看设备日志</span><br><span class="line">idevicecrashreport  # 设置crash日志分享至本地</span><br><span class="line">idevicecrashreport -e  # 查看crash日志</span><br><span class="line">idevicediagnostics  # 管理设备状态</span><br></pre></td></tr></table></figure><h5 id="ios-deploy常用命令"><a href="#ios-deploy常用命令" class="headerlink" title="ios-deploy常用命令"></a>ios-deploy常用命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ios-deploy -c  # 查看当前连接设备</span><br><span class="line">ios-deploy --[xxx.app]  # 安装app</span><br><span class="line">ios-deploy --id [udid] --uninstall_only --bundle_id [bundle_id] # 卸载应用</span><br><span class="line">ios-deploy --id [udid] --list_bundle_id # 查看所有应用</span><br><span class="line">ios-deploy --id [udid] --exists --bundle_id [bundle_id]# 查看应用是否被安装</span><br></pre></td></tr></table></figure><h4 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h4><ol><li><p>authroize-ios，iOS 授权工具，主要用于模拟器中一些权限的授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g authroze-ios</span><br><span class="line">sudo authroze-ios</span><br></pre></td></tr></table></figure></li></ol><h4 id="Appium连接IOS真机"><a href="#Appium连接IOS真机" class="headerlink" title="Appium连接IOS真机"></a>Appium连接IOS真机</h4><h5 id="Appium-连接参数（UICatalog）"><a href="#Appium-连接参数（UICatalog）" class="headerlink" title="Appium 连接参数（UICatalog）"></a>Appium 连接参数（UICatalog）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;platformName&quot;: &quot;IOS&quot;,</span><br><span class="line">  &quot;appium:automationName&quot;: &quot;xcuitest&quot;,</span><br><span class="line">  &quot;appium:xcodeOrgId&quot;: &quot;3S9884KP5U&quot;,</span><br><span class="line">  &quot;appium:xcodeSigningId&quot;: &quot;Apple Development&quot;,</span><br><span class="line">  &quot;appium:platformVersion&quot;: &quot;15.4&quot;,</span><br><span class="line">  &quot;appium:deviceName&quot;: &quot;iPad&quot;,</span><br><span class="line">  &quot;appium:bundleId&quot;: &quot;com.kane728example.apple-samplecode.UICatalog&quot;,</span><br><span class="line">  &quot;appium:udid&quot;: &quot;auto&quot;,</span><br><span class="line">  &quot;appium:app&quot;: &quot;/Users/yanxiaokang/Library/Developer/Xcode/DerivedData/UIKitCatalog-hdwaxlrxteqexxgzqqjwirmmulwn/Build/Products/Debug-iphoneos/UIKitCatalog.app&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xcodeOrgId：</p><p><img src="https://s2.loli.net/2022/08/07/QvrUNc2lbaAzXxk.png" alt="image-20220807235020310"></p><p>app：</p><p><img src="https://s2.loli.net/2022/08/07/Abi5FEt8eQBR63s.png" alt="image-20220807235112952"></p><h5 id="Appium连接真机出现的问题"><a href="#Appium连接真机出现的问题" class="headerlink" title="Appium连接真机出现的问题"></a>Appium连接真机出现的问题</h5><ol><li><p>提示”Original error: ‘bundleId’ desired capability not provided”</p><p>报错的原因并不是缺少 budleid。我在启动配置里配了的。最根本的原因是 appium 中自带的 wda 没有被替换完全。后来我重新安装的 appium，并且直接修改编译的是其自带的 wda 后问题得到解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/Appium Server GUI.app/Contents/Resources/app/node_modules/appium/node_modules/appium-webdriveragent</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> appium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows使用Autolt实现上传文件</title>
      <link href="/2022/07/19/2022-7-19-windows%E4%BD%BF%E7%94%A8Autolt%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
      <url>/2022/07/19/2022-7-19-windows%E4%BD%BF%E7%94%A8Autolt%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="下载Autolt"><a href="#下载Autolt" class="headerlink" title="下载Autolt"></a>下载Autolt</h4><ol><li>AutoIt下载链接：<a href="https://www.autoitscript.com/site/autoit/downloads/">https://www.autoitscript.com/site/autoit/downloads/</a> </li><li>下载后解压即可使用</li></ol><h4 id="元素定位以及脚本编写"><a href="#元素定位以及脚本编写" class="headerlink" title="元素定位以及脚本编写"></a>元素定位以及脚本编写</h4><p><img src="https://s2.loli.net/2022/07/19/FYUq3VdTS6AaZpD.png" alt="在这里插入图片描述"></p><h5 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h5><ul><li>双击Au3Info.exe打开元素定位器</li><li>鼠标移动到Finder Tool,按住鼠标左键拖动到需要识别的windows控件上</li><li>记录元素相关属性</li></ul><h5 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h5><ul><li>双击SciTe/SciTE.exe进行脚本编写</li><li>编写完成后保存为.au3格式文件</li></ul><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 脚本语法，以上传文件窗口为例</span><br><span class="line">ControlFocus(<span class="string">&quot;打开&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">;设置输入焦点到“打开”窗口的控件上</span><br><span class="line">ControlSetText(<span class="string">&quot;打开&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;Edit1&quot;</span>,<span class="string">&quot;文件路径&quot;</span>)</span><br><span class="line">;向文件路径输入框输入文件路径</span><br><span class="line">Sleep（<span class="number">2000</span>）</span><br><span class="line">;等待时间<span class="number">2000</span>毫秒</span><br><span class="line">ControlClick(<span class="string">&quot;打开&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;Button1&quot;</span>)</span><br><span class="line">;点击上传文件窗口中的“打开”按钮</span><br></pre></td></tr></table></figure><h4 id="au3脚本文件生成为-exe可执行程序"><a href="#au3脚本文件生成为-exe可执行程序" class="headerlink" title=".au3脚本文件生成为.exe可执行程序"></a>.au3脚本文件生成为.exe可执行程序</h4><ul><li><p>通过Compile Script to .exe (x64)工具生成exe文件</p><p><img src="https://s2.loli.net/2022/07/19/CcGLOKHbmdtohBU.png" alt="img"></p></li></ul><h4 id="在selenium中执行程序"><a href="#在selenium中执行程序" class="headerlink" title="在selenium中执行程序"></a>在selenium中执行程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现文件上传，通过Runtime的静态方法获取对象</span></span><br><span class="line">Runtime runtime = Runtime.getRuntime();</span><br><span class="line"><span class="comment">// 通过Runtime对象调用exec方法</span></span><br><span class="line">runtime.exec(<span class="string">&quot;执行绝对路径&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="AutoIt命令行参数"><a href="#AutoIt命令行参数" class="headerlink" title="AutoIt命令行参数"></a>AutoIt命令行参数</h4><ul><li><p>修改上传文件脚本，将文件路径修改为$CmdLine[1]，重新生成exe程序</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ControlFocus(<span class="string">&quot;打开&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">ControlSetText(<span class="string">&quot;打开&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;Edit1&quot;</span>,$CmdLine[<span class="number">1</span>])</span><br><span class="line">ControlClick(<span class="string">&quot;打开&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;Button1&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>Autolt脚本中，<code>$CmdLine[0]</code> 获取的是命令行参数的总数，</p></li><li><p><code>$CmdLine[1]</code>~`$CmdLine[63]` 获取的是命令行参数第1到第63位，这个方式最多只能获取63个参数</p></li><li><p><code>$CmdLineRaw</code> 获取的是未拆分的所有参数</p></li></ul><h5 id="带参数在selenium执行时"><a href="#带参数在selenium执行时" class="headerlink" title="带参数在selenium执行时"></a>带参数在selenium执行时</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现文件上传，通过Runtime的静态方法获取对象</span></span><br><span class="line">Runtime runtime = Runtime.getRuntime();</span><br><span class="line"><span class="comment">// 通过Runtime对象调用exec方法</span></span><br><span class="line">runtime.exec(<span class="string">&quot;程序路径&quot;</span> + <span class="string">&quot; \&quot;&quot;</span>+<span class="string">&quot;待上传文件路径&quot;</span> +<span class="string">&quot;\&quot;&quot;</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
            <tag> Autolt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cucumber介绍</title>
      <link href="/2022/07/17/2022-7-17-cucumber%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/07/17/2022-7-17-cucumber%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="cucumber"><a href="#cucumber" class="headerlink" title="cucumber"></a>cucumber</h3><ul><li>cucumber官网：<a href="https://cucumber.io/">https://cucumber.io/</a></li><li>cucumber是一个能够理解用普通语言描述的测试用例支持行为驱动开发（BDD）的自动化测试工具，用Ruby编写，支持Java、JavaScript、Ruby和.net等多种开发语言</li></ul><h4 id="Gherkin"><a href="#Gherkin" class="headerlink" title="Gherkin"></a>Gherkin</h4><ul><li><p>Gherkin是一套语法规则，可以使cucumber理解你的每个步骤</p></li><li><p>Step definitions 使Gherkin步骤与实现程序代码硬连接</p></li></ul><h4 id="什么是BDD？"><a href="#什么是BDD？" class="headerlink" title="什么是BDD？"></a>什么是BDD？</h4><p>​    BDD俗称行为驱动开发，是测试驱动开发的延伸，开发使用简单的，特定领域的脚本语言，这些DSL将结构化自然语言转换为可执行测试，结果是与给定功能的验收标准以及用于验证该功能的测试之间的关系更密切，因此它一般是测试驱动开发的自然延伸</p><h4 id="TDD与BDD"><a href="#TDD与BDD" class="headerlink" title="TDD与BDD"></a>TDD与BDD</h4><ul><li>TDD：Test Driver Development 测试驱动开发</li><li>BDD：Behavior Driver Development 行为驱动开发</li></ul><h4 id="cucumber环境搭建"><a href="#cucumber环境搭建" class="headerlink" title="cucumber环境搭建"></a>cucumber环境搭建</h4><h5 id="安装maven"><a href="#安装maven" class="headerlink" title="安装maven"></a>安装maven</h5><ol><li><p>下载地址：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p></li><li><p>环境变量配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 配置环境变量</span></span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"></span><br><span class="line">export M2_HOME=/Users/xxx/Documents/maven/apache-maven-3.5.0</span><br><span class="line">export PATH=$PATH:$M2_HOME/bin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 执行source，让环境变量生效</span></span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 验证maven安装成功</span></span></span><br><span class="line">mvn -version</span><br></pre></td></tr></table></figure></li></ol><h5 id="pom-xml文件中配置cucumber"><a href="#pom-xml文件中配置cucumber" class="headerlink" title="pom.xml文件中配置cucumber"></a>pom.xml文件中配置cucumber</h5><ol><li>配置后按command+shift+i 更新maven库</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.cucumber<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cucumber-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.cucumber<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cucumber-java8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写第一个场景（Scenario）"><a href="#编写第一个场景（Scenario）" class="headerlink" title="编写第一个场景（Scenario）"></a>编写第一个场景（Scenario）</h4><p>​    当我们使用cucumber进行BDD时，会用具体的例子来告诉程序我们要进行什么操作，这就是场景，场景通常在写代码之前编写，随着代码的完善后，场景扮演者自动化测试活文档的角色</p><p>​    在cucumber，一个例子我们称之为场景，由.feature文件编写，存放在项目目录src/test/resources下</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Feature</span>: test baidu search</span><br><span class="line">use chrome </span><br><span class="line">  <span class="keyword">Scenario</span>: use baidu search java</span><br><span class="line">    <span class="keyword">Given</span> open the chrome</span><br><span class="line">    <span class="keyword">When</span> input the <span class="string">&quot;java&quot;</span></span><br><span class="line">    <span class="keyword">And</span> click the search</span><br><span class="line">    <span class="keyword">Then</span> got search result</span><br></pre></td></tr></table></figure><ul><li>首行以Feature:开头，后面编写name，便于其他人员理解建议与文件名类似</li><li>第二行为描述文字，cucumber不会执行该行</li><li>第三行表示场景具体的描述</li><li>后四行表示场景的具体步骤，也就是cucumber实际执行的步骤</li></ul><h4 id="场景的步骤实现"><a href="#场景的步骤实现" class="headerlink" title="场景的步骤实现"></a>场景的步骤实现</h4><ul><li>实现代码需要存放在项目目录src/test/java/下</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyStepdefs 用例具体实现demo</span></span><br><span class="line"><span class="keyword">import</span> io.cucumber.java.en.And;</span><br><span class="line"><span class="keyword">import</span> io.cucumber.java.en.Given;</span><br><span class="line"><span class="keyword">import</span> io.cucumber.java.en.Then;</span><br><span class="line"><span class="keyword">import</span> io.cucumber.java.en.When;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebElement;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.chrome.ChromeDriver;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStepdefs</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChromeDriver driver;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStepdefs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        driver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line">        driver.manage().window().maximize();</span><br><span class="line">        driver.manage().timeouts().implicitlyWait(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Given(&quot;open the chrome&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openTheChrome</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@When(&quot;input the &#123;string&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputThe</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        driver.findElementByName(<span class="string">&quot;wd&quot;</span>).sendKeys(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@And(&quot;click the search&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clickTheSearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        driver.findElementById(<span class="string">&quot;su&quot;</span>).click();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Then(&quot;got search result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gotSearchResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebElement element = driver.findElementByClassName(<span class="string">&quot;bk_polysemy_1Ef6j&quot;</span>);</span><br><span class="line">        element.isDisplayed();</span><br><span class="line">        driver.quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用变量参数化"><a href="#使用变量参数化" class="headerlink" title="使用变量参数化"></a>使用变量参数化</h4><ul><li><p>修改.feature文件，将Scenario修改为Scenario Outline才能使用变量</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Feature</span>: test baidu search</span><br><span class="line">  <span class="keyword">Scenario</span> <span class="keyword">Outline</span>: use baidu search xxx</span><br><span class="line">    <span class="keyword">Given</span> open the chrome</span><br><span class="line">    <span class="keyword">When</span> input the <span class="string">&quot;&lt;name&gt;&quot;</span></span><br><span class="line">    <span class="keyword">And</span> click the search</span><br><span class="line">    <span class="keyword">Then</span> got search result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Examples</span>:</span><br><span class="line">      |<span class="string"> name       </span>|</span><br><span class="line">      |<span class="string"> java       </span>|</span><br><span class="line">      |<span class="string"> python     </span>|</span><br><span class="line">      |<span class="string"> ruby       </span>|</span><br><span class="line">      |<span class="string"> javascript </span>|</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> cucumber </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化 </tag>
            
            <tag> java </tag>
            
            <tag> cucumber </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见js处理元素的方法</title>
      <link href="/2022/07/05/2022-7-5-%E5%B8%B8%E8%A7%81js%E5%A4%84%E7%90%86%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2022/07/05/2022-7-5-%E5%B8%B8%E8%A7%81js%E5%A4%84%E7%90%86%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="删除元素中指定的属性"><a href="#删除元素中指定的属性" class="headerlink" title="删除元素中指定的属性"></a>删除元素中指定的属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js获取元素返回的是数组，所以要指定索引</span></span><br><span class="line"><span class="built_in">document</span>.getElementsById(<span class="string">&quot;元素id&quot;</span>)[<span class="number">0</span>].removeAttribute(<span class="string">&quot;属性名&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="为元素添加属性"><a href="#为元素添加属性" class="headerlink" title="为元素添加属性"></a>为元素添加属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;元素id&quot;</span>).setAttribute(<span class="string">&quot;属性名&quot;</span>, <span class="string">&quot;属性值&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="获取元素全部属性"><a href="#获取元素全部属性" class="headerlink" title="获取元素全部属性"></a>获取元素全部属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.execute_script(<span class="string">&#x27;var items = &#123;&#125;; for (index = 0; index &lt; arguments[0].attributes.length; ++index) &#123; items[arguments[0].attributes[index].name] = arguments[0].attributes[index].value &#125;; return items;&#x27;</span>, element)</span><br></pre></td></tr></table></figure><h4 id="操作窗口滚动条"><a href="#操作窗口滚动条" class="headerlink" title="操作窗口滚动条"></a>操作窗口滚动条</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滚动窗口至顶部</span></span><br><span class="line"><span class="built_in">window</span>.scrollTo(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 滚动窗口至底部</span></span><br><span class="line"><span class="built_in">window</span>.scrollTo(<span class="number">0</span>,<span class="built_in">document</span>.body.scrollHeight)</span><br><span class="line"><span class="comment">// 将元素滚动至可见，最上方进入可视区域</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;元素name&#x27;</span>)[<span class="number">0</span>].scrollIntoView()</span><br><span class="line"><span class="comment">// 将元素滚动至可见，最下方进入可视区域</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;元素name&#x27;</span>)[<span class="number">0</span>].scrollIntoView(<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><h4 id="执行元素中的函数"><a href="#执行元素中的函数" class="headerlink" title="执行元素中的函数"></a>执行元素中的函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 例子：处理拖动条时，直接设置value后执行元素中的函数让滚动条生效</span></span><br><span class="line">driver.execute_script(<span class="string">&#x27;arguments[0].value = 80;&#x27;</span>, 元素对象)</span><br><span class="line">driver.execute_script(<span class="string">&#x27;arguments[0].onchange();&#x27;</span>, 元素对象)</span><br></pre></td></tr></table></figure><h4 id="关闭当前浏览器窗口"><a href="#关闭当前浏览器窗口" class="headerlink" title="关闭当前浏览器窗口"></a>关闭当前浏览器窗口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.execute_script(<span class="string">&quot;window.open(&#x27;about:blank&#x27;,&#x27;_top&#x27;).close()&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特殊控件的定位思路</title>
      <link href="/2022/07/03/2022-7-3-Web%E5%B8%B8%E8%A7%81%E6%8E%A7%E4%BB%B6%E7%9A%84%E5%AE%9A%E4%BD%8D%E6%80%9D%E8%B7%AF/"/>
      <url>/2022/07/03/2022-7-3-Web%E5%B8%B8%E8%A7%81%E6%8E%A7%E4%BB%B6%E7%9A%84%E5%AE%9A%E4%BD%8D%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="鼠标悬停"><a href="#鼠标悬停" class="headerlink" title="鼠标悬停"></a>鼠标悬停</h4><p>悬停元素定位：在调试模式中悬停后按F8进入暂停</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="number">1.</span> 创建ActionChains对象</span><br><span class="line"><span class="number">2.</span> 使用move_to_element方法</span><br><span class="line"><span class="number">3.</span> 再使用perform执行</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">element = browser.find_element(By.XPATH,<span class="string">&quot;&quot;</span>) </span><br><span class="line">action= ActionChains(browser)</span><br><span class="line">action.move_to_element(element)</span><br><span class="line">action.perform()</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h4 id="下拉选择框"><a href="#下拉选择框" class="headerlink" title="下拉选择框"></a>下拉选择框</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="number">1.</span> 先定位到下拉框</span><br><span class="line"><span class="number">2.</span> 使用Select包操作选择选项</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">element_xpath = <span class="string">&quot;&quot;</span>  <span class="comment"># 元素定位xpath路径</span></span><br><span class="line">element = browser.find_element(By.XPATH,element_xpath)</span><br><span class="line">Select(element).select_by_visible_text(<span class="string">&quot;选项A&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="alert弹窗"><a href="#alert弹窗" class="headerlink" title="alert弹窗"></a>alert弹窗</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="number">1.</span> 切换到alert</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">alert = browser.switch_to.alert</span><br><span class="line">alert.accept()  <span class="comment"># 确定</span></span><br><span class="line">alert.dismiss()  <span class="comment"># 取消</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="新窗口"><a href="#新窗口" class="headerlink" title="新窗口"></a>新窗口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="number">1.</span> 切换至新窗口</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">driver.switch_to.window(<span class="string">&quot;xxx&quot;</span>)   <span class="comment"># 切换到指定的window_name,或者handles_name的窗口</span></span><br><span class="line">driver.window_handles    <span class="comment"># 获取全部窗口的handles</span></span><br></pre></td></tr></table></figure><h4 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="number">1.</span> 先switch_to.frame(<span class="string">&#x27;&#x27;</span>)  </span><br><span class="line"><span class="number">2.</span> 操作frame中的元素</span><br><span class="line"><span class="number">3.</span> switch_to.parent_frame()切回上一层frame</span><br><span class="line"><span class="number">4.</span> switch_to.default_content()返回默认节点</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过id、name、element(定位的某个元素)、索引来切换到某个frame</span></span><br><span class="line">browser.switch_to.frame(<span class="string">&#x27;搜狗&#x27;</span>)</span><br><span class="line">browser.find_element(By.XPATH,<span class="string">&quot;//*[@class=&#x27;sec-input-box&#x27;]/input&quot;</span>).send_keys(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">browser.find_element(By.XPATH,<span class="string">&quot;//*[@value=&#x27;搜狗搜索&#x27;]&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.switch_to.default_content()</span><br></pre></td></tr></table></figure><h4 id="日期控件"><a href="#日期控件" class="headerlink" title="日期控件"></a>日期控件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###</span></span><br><span class="line">方法一：</span><br><span class="line"><span class="number">1.</span> 定位到日期控件直接send_keys</span><br><span class="line">方法二：</span><br><span class="line"><span class="number">1.</span> 使用js移除readonly属性</span><br><span class="line"><span class="number">2.</span> 再使用send_keys直接填入日期</span><br><span class="line">方法三：</span><br><span class="line"><span class="number">1.</span>直接使用js赋值</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">date_widget</span>(<span class="params">date:<span class="built_in">str</span></span>):</span></span><br><span class="line">    element = browser.find_element(By.NAME,<span class="string">&#x27;bday&#x27;</span>)</span><br><span class="line">    browser.execute_script(<span class="string">f&quot;arguments[0].value=&#x27;<span class="subst">&#123;date&#125;</span>&#x27;;&quot;</span>,element)</span><br></pre></td></tr></table></figure><h4 id="滑块"><a href="#滑块" class="headerlink" title="滑块"></a>滑块</h4><h5 id="1-想要滑块准确的滑动到想要的数值上"><a href="#1-想要滑块准确的滑动到想要的数值上" class="headerlink" title="1. 想要滑块准确的滑动到想要的数值上"></a>1. 想要滑块准确的滑动到想要的数值上</h5><img src="https://s2.loli.net/2022/07/05/YcEnH9LrN7xQbTy.png" alt="image-20220705233810993" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/07/06/X3LcWRyuxgKpqmi.png" alt="image-20220706102302729"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###</span></span><br><span class="line">方法<span class="number">1</span>:</span><br><span class="line"><span class="number">1.</span>可以直接设置value值后执行元素中的函数让滚动条生效</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">driver.execute_script(<span class="string">&#x27;arguments[0].value = 80;&#x27;</span>, 元素对象)</span><br><span class="line">driver.execute_script(<span class="string">&#x27;arguments[0].onchange();&#x27;</span>, 元素对象)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###</span></span><br><span class="line">方法<span class="number">2</span>:</span><br><span class="line"><span class="number">1.</span>ActionChains里面的拖拽方法，但不能准确的拖拽到想要的数值</span><br><span class="line"><span class="number">2.</span>最后发现控件支持键盘，所以使用键盘方向键达到目的</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.maximize_window()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">&#x27;file:///&#x27;</span>+os.path.abspath(<span class="string">&#x27;Practice_S2_ObjectFinding.htm&#x27;</span>))</span><br><span class="line"><span class="comment">## 滑块操作</span></span><br><span class="line">element = browser.find_element(By.ID,<span class="string">&#x27;range&#x27;</span>)</span><br><span class="line">text_element = browser.find_element(By.ID,<span class="string">&#x27;show&#x27;</span>)</span><br><span class="line">text_number = <span class="built_in">int</span>(text_element.get_attribute(<span class="string">&#x27;value&#x27;</span>))</span><br><span class="line">element.click()</span><br><span class="line">x = <span class="number">200</span></span><br><span class="line"><span class="keyword">while</span> text_number!= x:</span><br><span class="line">    <span class="keyword">if</span> text_number &gt; x:</span><br><span class="line">        element.send_keys(Keys.LEFT)</span><br><span class="line">        text_number = <span class="built_in">int</span>(text_element.get_attribute(<span class="string">&#x27;value&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        element.send_keys(Keys.RIGHT)</span><br><span class="line">        text_number = <span class="built_in">int</span>(text_element.get_attribute(<span class="string">&#x27;value&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(text_number)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><h4 id="颜色选择器"><a href="#颜色选择器" class="headerlink" title="颜色选择器"></a>颜色选择器</h4><img src="https://s2.loli.net/2022/07/03/4xDZRq8N9Ej6lYf.png" alt="image-20220703191235346" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="number">1.</span> 直接使用js赋值value给元素</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice_color</span>(<span class="params">color:<span class="built_in">str</span></span>):</span></span><br><span class="line">    element = browser.find_element(By.NAME,<span class="string">&#x27;favcolor&#x27;</span>)</span><br><span class="line">    browser.execute_script(<span class="string">f&quot;arguments[0].value=&#x27;<span class="subst">&#123;color&#125;</span>&#x27;;&quot;</span>,element)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数字选择器"><a href="#数字选择器" class="headerlink" title="数字选择器"></a>数字选择器</h4><p><img src="https://s2.loli.net/2022/07/03/IldyFJR6sDkjTuY.png" alt="image-20220703191202559"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###</span></span><br><span class="line">方法<span class="number">1</span>：</span><br><span class="line"><span class="number">1.</span>可以使用键盘上下键模拟每次按下后判断是否与预期值相符</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_number_input</span>(<span class="params">x:<span class="built_in">int</span></span>):</span></span><br><span class="line">    element = browser.find_element(By.XPATH, <span class="string">&quot;//*[text()=&#x27;Number:&#x27;]/input&quot;</span>)</span><br><span class="line">    element.send_keys(Keys.UP)</span><br><span class="line">    text = <span class="built_in">int</span>(element.get_attribute(<span class="string">&#x27;value&#x27;</span>))</span><br><span class="line">    <span class="keyword">while</span> text != x:</span><br><span class="line">        <span class="keyword">if</span> text &gt; x:</span><br><span class="line">            element.send_keys(Keys.DOWN)</span><br><span class="line">            text = <span class="built_in">int</span>(element.get_attribute(<span class="string">&#x27;value&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            element.send_keys(Keys.UP)</span><br><span class="line">            text = <span class="built_in">int</span>(element.get_attribute(<span class="string">&#x27;value&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(text)</span><br><span class="line">    browser.quit()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="number">1.</span> 直接使用js赋值value给元素</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice_color</span>(<span class="params">num:<span class="built_in">str</span></span>):</span></span><br><span class="line">    element = browser.find_element(By.NAME,<span class="string">&#x27;xxx&#x27;</span>)</span><br><span class="line">    browser.execute_script(<span class="string">f&quot;arguments[0].value=&#x27;<span class="subst">&#123;num&#125;</span>&#x27;;&quot;</span>,element)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4章-Java进阶知识</title>
      <link href="/2022/06/19/2022-6-19-%E7%AC%AC4%E7%AB%A0-Java%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/06/19/2022-6-19-%E7%AC%AC4%E7%AB%A0-Java%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="枚举类型与泛型"><a href="#枚举类型与泛型" class="headerlink" title="枚举类型与泛型"></a>枚举类型与泛型</h3><p>​    枚举类型可以取代以往常量的定义方式，即将常量封装在类或接口中，此外，她还提供了安全检查功能。枚举类型本质上还是以类的形式存在的</p><p>​    泛型的出现不仅可以让程序员少写一些代码，更重要的是它可以解决类型安全问题、泛型提供了编译时的安全检查，不会因为将对象放置于某个容器中而失去其类型</p><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><h6 id="使用枚举类型设置常量"><a href="#使用枚举类型设置常量" class="headerlink" title="使用枚举类型设置常量"></a>使用枚举类型设置常量</h6><ul><li>enum是定义枚举类型的关键词</li><li>当程序需要使用常量时，可使用Constants.Constants_A来表示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Constants</span></span>&#123;</span><br><span class="line">Constants_A,</span><br><span class="line">Constants_B,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义四季接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SeasonInterface</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> SPRING=<span class="number">1</span> , SUMMER=<span class="number">2</span>,AUTUMN=<span class="number">3</span>,WINTER=<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义四季枚举</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SeasonEnum</span></span>&#123;</span><br><span class="line">    SPRING,SUMMER,AUTUMN,WINTER</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintSeason</span><span class="params">(<span class="keyword">int</span> season)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (season)&#123;</span><br><span class="line">        <span class="keyword">case</span> SeasonInterface.SPRING:</span><br><span class="line">            System.out.println(<span class="string">&quot;这是春天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SeasonInterface.SUMMER:</span><br><span class="line">            System.out.println(<span class="string">&quot;这是夏天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SeasonInterface.AUTUMN:</span><br><span class="line">            System.out.println(<span class="string">&quot;这是秋天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SeasonInterface.WINTER:</span><br><span class="line">            System.out.println(<span class="string">&quot;这是冬天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;这不是一个四季变量&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintSeason2</span><span class="params">(SeasonEnum season)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (season)&#123;</span><br><span class="line">        <span class="keyword">case</span> SPRING:</span><br><span class="line">            System.out.println(<span class="string">&quot;这是春天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SUMMER:</span><br><span class="line">            System.out.println(<span class="string">&quot;这是夏天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> AUTUMN:</span><br><span class="line">            System.out.println(<span class="string">&quot;这是秋天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WINTER:</span><br><span class="line">            System.out.println(<span class="string">&quot;这是冬天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        PrintSeason(SeasonInterface.SPRING); <span class="comment">// 使用接口常量作为参数</span></span><br><span class="line">        PrintSeason(<span class="number">3</span>);   <span class="comment">// 使用数字作为参数</span></span><br><span class="line">        PrintSeason(-<span class="number">10</span>);   <span class="comment">// 使用接口常量值以外的数作为参数</span></span><br><span class="line">        PrintSeason2(SeasonEnum.SUMMER);   <span class="comment">// 只能使用enum枚举的值作为参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="了解枚举类型"><a href="#了解枚举类型" class="headerlink" title="了解枚举类型"></a>了解枚举类型</h6><p><img src="https://s2.loli.net/2022/06/19/Wq41fbE2HXMu8dv.png" alt="image-20220619194146452"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// values()、valueOf()、compareTo()使用</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season</span></span>&#123;</span><br><span class="line">    SPRING,SUMMER,AUTUMN,WINTER;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowEnum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Season se[] = Season.values();</span><br><span class="line">        Season tep = Season.valueOf(<span class="string">&quot;WINTER&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;新增枚举：&quot;</span>+tep);</span><br><span class="line">      <span class="comment">// 对比临时枚举值对比指定枚举值</span></span><br><span class="line">        <span class="keyword">int</span> result = tep.compareTo(Season.SUMMER);</span><br><span class="line">        System.out.println(<span class="string">&quot;对比结果为：&quot;</span>+result);</span><br><span class="line">        <span class="keyword">if</span>(result==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对比结果一致&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result&lt;<span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(tep+<span class="string">&quot;在&quot;</span>+ Season.SUMMER+<span class="string">&quot;的前面&quot;</span>+(-result)+<span class="string">&quot;位&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(tep+<span class="string">&quot;在&quot;</span>+ Season.SUMMER+<span class="string">&quot;的后面&quot;</span>+result+<span class="string">&quot;位&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 打印全部枚举</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;se.length;i++)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;枚举值为：&quot;</span>+ se[i]+<span class="string">&quot;,对应索引为&quot;</span>+se[i].ordinal());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举类型中的构造方法：</p><p>​    在枚举类型中，可以添加构造方法，但是规定这个构造方法必须被private修饰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SeasonConstruct</span></span>&#123;</span><br><span class="line">    SPRING(<span class="string">&quot;万物复苏&quot;</span>),</span><br><span class="line">    SUMMER(<span class="string">&quot;烈日炎炎&quot;</span>),</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋草枯黄&quot;</span>),</span><br><span class="line">    WINTER(<span class="string">&quot;白雪皑皑&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String remarks;</span><br><span class="line">    SeasonConstruct(String remarks)&#123;</span><br><span class="line">        <span class="keyword">this</span>.remarks = <span class="string">&quot;我是&quot;</span> + <span class="keyword">this</span> +<span class="string">&quot;,我来之后&quot;</span> + remarks;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRemarks</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> remarks;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumlConstructDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SeasonConstruct[] sc = SeasonConstruct.values();</span><br><span class="line">        <span class="keyword">for</span> (SeasonConstruct seasonConstruct : sc) &#123;</span><br><span class="line">            System.out.println(seasonConstruct.getRemarks());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="使用枚举类型的优势"><a href="#使用枚举类型的优势" class="headerlink" title="使用枚举类型的优势"></a>使用枚举类型的优势</h6><ul><li>类型安全</li><li>紧凑有效的数据定义</li><li>可以和程序其他部分完美交叉</li><li>运行效率高</li></ul><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><h5 id="回顾向上-下转型"><a href="#回顾向上-下转型" class="headerlink" title="回顾向上/下转型"></a>回顾向上/下转型</h5><p>​    泛型实质上就是使程序员定义安全的类型，在没有出现泛型之前，Java也提供对Object类型的引用”任意化”操作，这种操作就是对Object类型引用进行向下转型及向上转型操作，但某些强制类型的装换错误不会被编译器捕捉，所以提供了泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object b;<span class="comment">// 定义一个成员变量b，数据类型为Object</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getB</span><span class="params">()</span></span>&#123; <span class="comment">// 设置一个getB方法</span></span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setB</span><span class="params">(Object b)</span></span>&#123; <span class="comment">// 设置一个setB方法</span></span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        t.setB(Boolean.TRUE);   <span class="comment">// 向上转型操作，将对象Boolean转型为Object对象</span></span><br><span class="line">        System.out.println(t.getB());</span><br><span class="line"></span><br><span class="line">        t.setB(Float.valueOf(<span class="string">&quot;12.3&quot;</span>));</span><br><span class="line">        Float f = (Float) t.getB(); <span class="comment">// 向下转型操作，将Object对象装换为Float</span></span><br><span class="line">        System.out.println(f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>上个实例中，Test类中定义了私有成员变量b，类型为Object类型，同时为其定义了相应的set与get方法，在类主方法中，将Boolean.valueOf(true)作为set方法的参数，由于set方法的参数类型为Object这样就实现了向上转型操作，同时，在调用get方法时返回的Object对象已相应的类型返回，这个就是向下转型操作</p></li><li><p>通常问题就会出现在这，因为向上转型是安全的，而如果向下转型操作时用错了类型，或者并没有执行该操作，就会出现异常，但是可以被编译器接受，但在执行时会出现ClassCastException异常</p></li></ol><h5 id="定义泛型类"><a href="#定义泛型类" class="headerlink" title="定义泛型类"></a>定义泛型类</h5><p>​    Object类为最上层的父类，为了使程序更为通用，设计程序时通常传入的值与返回的值都以Object类型为主，当需要使用这些实例时，必须正确地将实例转换为原来的类型，否则在运行时将会发生ClassCastException异常</p><p>​    为提前预防这种问题，Java提供了泛型机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> &lt;<span class="title">T</span>&gt;</span>&#123;  <span class="comment">// 定义一个泛型类</span></span><br><span class="line">    <span class="keyword">private</span> T bookInfo;   <span class="comment">// 用T定义一个私有成员变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(T bookInfo)</span></span>&#123;   <span class="comment">// 参数为类型的构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.bookInfo = bookInfo;  <span class="comment">// 为成员变量赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getBookInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookInfo;   <span class="comment">// 定义一个get方法用来返回成员变量信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Book&lt;String&gt; bookName = <span class="keyword">new</span> Book&lt;&gt;(<span class="string">&quot;Java从入门到精通&quot;</span>);</span><br><span class="line">        Book&lt;String&gt; bookAuthor = <span class="keyword">new</span> Book&lt;&gt;(<span class="string">&quot;明日科技&quot;</span>);</span><br><span class="line">        Book&lt;Double&gt; bookPrice = <span class="keyword">new</span> Book&lt;&gt;(<span class="number">69.8</span>);</span><br><span class="line">        Book&lt;Boolean&gt; hasSource = <span class="keyword">new</span> Book&lt;&gt;(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;书名为：&quot;</span>+bookName.getBookInfo());</span><br><span class="line">        System.out.println(<span class="string">&quot;作者为：&quot;</span>+ bookAuthor.getBookInfo());</span><br><span class="line">        System.out.println(<span class="string">&quot;价格为：&quot;</span>+ bookPrice.getBookInfo());</span><br><span class="line">        System.out.println(<span class="string">&quot;是否附赠源码：&quot;</span> + hasSource.getBookInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="泛型的常规用法"><a href="#泛型的常规用法" class="headerlink" title="泛型的常规用法"></a>泛型的常规用法</h5><ol><li><p>定义泛型时声明多个类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;<span class="title">T</span> <span class="title">N</span> <span class="title">H</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义泛型类型声明数组类型</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker部署jenkins出现的问题</title>
      <link href="/2022/05/22/2022-5-22-docker%E9%83%A8%E7%BD%B2jenkins%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/05/22/2022-5-22-docker%E9%83%A8%E7%BD%B2jenkins%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="1-docker启动jenkins后自动退出"><a href="#1-docker启动jenkins后自动退出" class="headerlink" title="1. docker启动jenkins后自动退出"></a>1. docker启动jenkins后自动退出</h4><p>​    解决：内存不足，linux强制杀掉jenkins进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看内存使用情况</span></span><br><span class="line">free -h</span><br><span class="line"><span class="comment"># 清理缓存，先执行sync的命令，在执行</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第3章-Java核心技术</title>
      <link href="/2022/05/16/2022-5-16-%E7%AC%AC3%E7%AB%A0-Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
      <url>/2022/05/16/2022-5-16-%E7%AC%AC3%E7%AB%A0-Java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h3><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><h5 id="异常的概述"><a href="#异常的概述" class="headerlink" title="异常的概述"></a>异常的概述</h5><p>​    在程序中，异常可能是由程序员没有预料到的各种情况产生，如用户的坏数据、视图打开一个不存在的文件，在java中异常是一个在程序执行期间发生的事件，它中断了正在执行的程序的正常指令流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用0作为除数时，算术异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Baulk</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="异常的抛出与捕捉"><a href="#异常的抛出与捕捉" class="headerlink" title="异常的抛出与捕捉"></a>异常的抛出与捕捉</h5><ul><li>异常捕获结构由try、catch和finally组成</li><li>无论try语句中的代码如何退出，都将执行finally语句块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//程序代码块</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exceptiontype1 e)&#123;</span><br><span class="line"><span class="comment">// 对Exceptiontype1 的处理逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exceptiontype2 e)&#123;</span><br><span class="line"><span class="comment">// 对Exceptiontype2 的处理逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">// 程序最后执行部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>try-catch语句块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Take</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String str = <span class="string">&quot;lili&quot;</span>;</span><br><span class="line">            System.out.println(str + <span class="string">&quot;年龄是：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> age = Integer.parseInt(<span class="string">&quot;20L&quot;</span>);</span><br><span class="line">            <span class="comment">// 将字符串装换为int时出错</span></span><br><span class="line">            System.out.println(age);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 输出错误并继续执行程序</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>finally语句块</p><ul><li>完整的异常处理语句一定要包含finally语句，无论程序中是否有异常发生，都会执行finally语句</li><li>以下场景不会执行finally语句：finally语句块中发生异常、在前面的代码中使用System.exit()退出程序、程序所在线程死亡、关闭CPU</li></ul></li></ol><h5 id="java常见的异常类"><a href="#java常见的异常类" class="headerlink" title="java常见的异常类"></a>java常见的异常类</h5><p><img src="https://s2.loli.net/2022/05/17/nb52cXJCtkUhP6D.png" alt="image-20220517110935374"></p><h5 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h5><p>自定义异常类的步骤：</p><ul><li>创建自定义异常类并继承Exception类</li><li>在方法中通过throw关键字抛出异常对象</li><li>如果在当前抛出异常的方法中处理异常，可以使用try-catch处理，否则在方法的声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作</li><li>在出现异常的方法套用者中捕获并处理异常</li></ul><p>举例：使用自定义异常类，来捕捉异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建自定义类继承Exception类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String ErrorMessage)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类构造方法</span></span><br><span class="line">        <span class="keyword">super</span>(ErrorMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tran</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义方法，抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">avg</span><span class="params">(<span class="keyword">int</span> number1, <span class="keyword">int</span> number2)</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否满足条件然后新建错误信息</span></span><br><span class="line">        <span class="keyword">if</span> (number1 &lt; <span class="number">0</span> || number2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;不可以使用负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (number1 &gt; <span class="number">100</span> || number2 &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;数值太大了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (number1 + number2) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> result = avg(<span class="number">50</span>,<span class="number">10</span>);</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (MyException e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="声明字符串"><a href="#声明字符串" class="headerlink" title="声明字符串"></a>声明字符串</h5><ul><li>在java语言中，字符串必须包含在一对双引号（””）之内，例如：”23.33”、”ABCD”、”您好”</li><li>在java中由双引号（””）包围的都是字符串，不能作为其他数据类型来使用，如”1+2”的输出结果不可能是3</li><li>声明的字符串变量必须经过初始化才能使用，否则编译器会报出”变量未被初始化错误”</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str;</span><br><span class="line"><span class="comment">// String  指定该变量为字符串类型</span></span><br><span class="line"><span class="comment">// str 任意有效的标识符，表示字符串变量的名称</span></span><br></pre></td></tr></table></figure><h5 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h5><ol><li><p>String(char a[])</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法用一个字符数组a创建String对象</span></span><br><span class="line"><span class="keyword">char</span> a[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">String s = <span class="keyword">new</span> String(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该方法创建String对象与上面方法等同</span></span><br><span class="line">String s = <span class="keyword">new</span> String(<span class="string">&quot;abcd&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>String(char a[], int offset, int length)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法提取字符数组a中的一部分创建一个字符串对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Str</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> a[] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>&#125;;</span><br><span class="line">    <span class="comment">// offset表示开始截取字符串的位置</span></span><br><span class="line">    <span class="comment">// length表示截取字符串的长度</span></span><br><span class="line">    <span class="keyword">static</span> String s = <span class="keyword">new</span> String(a,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(s.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>String(char[] value)</p></li></ol><h5 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h5><ol><li><p>使用”+”运算符，连接多个字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Str</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String a = <span class="keyword">new</span> String(<span class="string">&quot;春色绿千里&quot;</span>);</span><br><span class="line">        String s = <span class="keyword">new</span> String(<span class="string">&quot;马蹄香万家&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用“+”连接字符串，\n为换行符</span></span><br><span class="line">        System.out.print(a + <span class="string">&quot;\n&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>连接其他数据类型</p><ul><li><p>如果将字符串同其他数据类型连接，会将其他数据类型直接转换为字符串</p></li><li><p>只要”+”运算符的一个操作数是字符串，编译器就会将另一个操作数转换成字符串形式，所有应谨慎将其他数据类型与字符串连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Link</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> booktime =<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">float</span> practice = <span class="number">2.5f</span>;</span><br><span class="line">        <span class="comment">// 将数据类型int、float与字符串连接</span></span><br><span class="line">        System.out.println(<span class="string">&quot;我每天花费&quot;</span>+booktime +<span class="string">&quot;小时看书；&quot;</span>+(practice+booktime)+<span class="string">&quot;小时上机练习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h5 id="获取字符串信息"><a href="#获取字符串信息" class="headerlink" title="获取字符串信息"></a>获取字符串信息</h5><ol><li><p>获取字符串长度</p><p>方法：str.length()</p></li><li><p>字符串查找</p><ul><li><p>indexOf(String s)</p><p>该方法用户返回参数字符串s在指定字符串中首次出现的索引位置，如果没有检索到字符串s，则返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str.indexOf(substr)</span><br><span class="line"><span class="comment">// str：任意字符串对象</span></span><br><span class="line"><span class="comment">//substr：要搜索的字符串</span></span><br></pre></td></tr></table></figure></li><li><p>lastIndexOf(String str)</p><p>该方法用户返回参数字符串s在指定字符串中最后一次出现的索引位置，如果没有检索到字符串s，则返回-1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str.indexOf(substr)</span><br><span class="line"><span class="comment">// str：任意字符串对象</span></span><br><span class="line"><span class="comment">//substr：要搜索的字符串</span></span><br></pre></td></tr></table></figure></li><li><p>练习：获取字符串的位置，在输出这个字符串的长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;we are students&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> size = str.lastIndexOf(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> first_size = str.indexOf(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;索引位置为&quot;</span>+ size);</span><br><span class="line">        System.out.println(<span class="string">&quot;索引位置为&quot;</span>+ first_size);</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串长度为：&quot;</span> + str.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>获取指定索引位置的字符</p><ul><li><p>str.charAt(int index)</p><p>使用charAt()方法可将指定索引出的字符返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ref</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s = <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span> mychar = s.charAt(<span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;索引4处的字符串为：&quot;</span>+ mychar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h5 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h5><ol><li><p>获取子字符串</p><p>方法：substring(int beginIndex, int endIndex)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Str</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String sc = <span class="string">&quot;123456789&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取字符串索引从0开始到3结束的字符（且不包含索引3）</span></span><br><span class="line">        String ic = sc.substring(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(ic);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>去除空格</p><p>方法：trim()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trim</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String c = <span class="string">&quot;   345    &quot;</span>;</span><br><span class="line">      <span class="comment">//trim()方法返回字符串的副本，忽略前后空格</span></span><br><span class="line">        String a = c.trim();</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字符串替换</p><p>方法：replace(CharSequence target, CharSequece replacement)</p><p>target: 要替换的字符或字符串</p><p>replacement: 用于替换原来字符串的内容</p><ul><li>如果字符或字符串oldChar没有出现在该对象的表达式中的字符串序列中，则返回原字符串</li><li>如果替换的字符oldChar在字符串中出现多次，方法会将所有全部替换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Newstr</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;address&quot;</span>;</span><br><span class="line">      <span class="comment">// 将小写a替换为大写A</span></span><br><span class="line">        String newstr = str.replace(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        System.out.println(newstr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断字符串的开始与结尾</p><p>方法：startsWith()</p><p>​    用于判断当前字符串对象的前缀是否为参数指定的字符串</p><p>方法：endsWith()</p><p>​    用于判断当前字符串对象是否以参数指定的字符串结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Starstwith</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.startsWith(<span class="string">&quot;a&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;字符串以a为开头&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(str.endsWith(<span class="string">&quot;g&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;字符串以g结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断字符串是否相等</p><p>​    字符串对象进行比较不能直接使用”==”运算符，因为运算符是比较两个字符串的地址是否相同，因为即使字符内容完全相同，对象的地址也是不同的</p><p>方法：equals()</p><p>​    如果两个字符串具有相同的字符和长度，使用该方法进行比较时，返回true，否则返回false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Equals</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str = <span class="keyword">new</span> String(<span class="string">&quot;正在学习java&quot;</span>);</span><br><span class="line">        String otherstr = <span class="keyword">new</span> String(<span class="string">&quot;正在学习java&quot;</span>);</span><br><span class="line">      <span class="comment">// 将对象str的内容与otherstr对象的内容做比较</span></span><br><span class="line">        <span class="keyword">boolean</span> A = str.equals(otherstr);</span><br><span class="line">        System.out.println(<span class="string">&quot;两个字符比较的结果为&quot;</span> + A);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法：equalsgnoreCase()</p><p>​    使用equals方法比较时会区分大小写，但是使用equalsgnreCase方法则是忽略大小写去比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Equals</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str = <span class="keyword">new</span> String(<span class="string">&quot;正在学习JAVA&quot;</span>);</span><br><span class="line">        String otherstr = <span class="keyword">new</span> String(<span class="string">&quot;正在学习java&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> A = str.equals(otherstr);</span><br><span class="line">        <span class="keyword">boolean</span> B = str.equalsIgnoreCase(otherstr);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用equals比较时两个字符比较的结果为&quot;</span> + A);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用equalsIgnoreCase比较时两个字符比较的结果为&quot;</span> + B);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>按字典顺序比较两个字符串</p><p>方法：compareTo()</p><p>​    方法为按字典顺序比较两个字符串，该比较基于字符串中各个字符的Unicode值，按字典顺序将String对象表示的字符序列与参数字符串所有表示的字符序列进行比较</p><p>​    1. 如果String对象位于参数字符串之前，则比较结果为一个负整数</p><p>​    2. 如果String对象位于参数字符串之后，则比较结果为一个正整数</p><p>​    3. 如果String对象与字符串相等，则结果为0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Compate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String a = <span class="keyword">new</span> String(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        String b = <span class="keyword">new</span> String(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        String c = <span class="keyword">new</span> String(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        System.out.println(a + <span class="string">&quot;与&quot;</span>+b +<span class="string">&quot;的比较结果为&quot;</span>+ a.compareTo(b));</span><br><span class="line">        System.out.println(a + <span class="string">&quot;与&quot;</span>+c +<span class="string">&quot;的比较结果为&quot;</span>+ b.compareTo(a));</span><br><span class="line">        System.out.println(c + <span class="string">&quot;与&quot;</span>+b +<span class="string">&quot;的比较结果为&quot;</span>+ b.compareTo(c));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字母大小写转换</p><p>方法：toLowerCase()</p><p>​    该方法将字符串中的所有大写字母转换为小写</p><p>方法：toUpperCase()</p><p>​    该方法将字符串中的所有小写字母转换为大写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tolower</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String a = <span class="keyword">new</span> String(<span class="string">&quot;ABCDEF&quot;</span>);</span><br><span class="line">        String tolower = a.toLowerCase();</span><br><span class="line">        String toupper = tolower.toUpperCase();</span><br><span class="line">        System.out.println(tolower + <span class="string">&quot;\n&quot;</span> + toupper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字符串分割</p><p>方法：split(String sign, int limit)</p><p>​    sign：指定分隔符，可指定多个分隔符，使用”|”隔开即可</p><p>​    limit：指定拆分次数</p><p>​    该方法可根据给定的分隔符对字符串拆分，并限定拆分的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Split</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String ip = <span class="string">&quot;192.168.1.1&quot;</span>;</span><br><span class="line">      <span class="comment">// 指定.作为分割符将字符串ip分割</span></span><br><span class="line">      <span class="comment">// &quot;\\.&quot;转义符</span></span><br><span class="line">        String[] arry = ip.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String a:arry)&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 指定.作为分割符，并指定分割2次</span></span><br><span class="line">        String[] secondarry = ip.split(<span class="string">&quot;\\.&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(String a:secondarry)&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h5><p>​    String类的静态format()方法用于创建格式化的字符串。format有两种重载模式</p><ol><li><p>format(String format, Object…args)</p><p>Format:  格式字符串</p><p>args:  格式字符串中由格式说明符引用的参数。如果还有格式说明符以外的参数，则忽略这些额外的参数。此参数的数目是可变的，可以为0</p></li><li><p>format(Local l, String format, Object…args)</p><p>l: 格式化过程中要应用的环境语言。如果为null，则不进行本地化</p></li></ol><h6 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoD</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        String year = String.format(<span class="string">&quot;%tY&quot;</span>,date);</span><br><span class="line">        String month = String.format(<span class="string">&quot;%tB&quot;</span>,date);</span><br><span class="line">        String day = String.format(<span class="string">&quot;%td&quot;</span>,date);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;今天是&quot;</span>+year+<span class="string">&quot;年&quot;</span>+month+day+<span class="string">&quot;日&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用日期格式转换符：</p><p><img src="https://s2.loli.net/2022/05/24/upTxeHscwGYE7nA.png" alt="image-20220524225111925"></p><h6 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetDate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        String hour = String.format(<span class="string">&quot;%tH&quot;</span>,date);</span><br><span class="line">        String minute = String.format(<span class="string">&quot;%tM&quot;</span>,date);</span><br><span class="line">        String second = String.format(<span class="string">&quot;%tS&quot;</span>,date);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在的时间为&quot;</span>+hour+<span class="string">&quot;时&quot;</span>+minute+<span class="string">&quot;分&quot;</span>+second+<span class="string">&quot;秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用时间格式转换符：</p><p><img src="https://s2.loli.net/2022/05/24/uyZVXRWCx9GBHqr.png" alt="image-20220524225209209"></p><h5 id="日期时间组合格式化"><a href="#日期时间组合格式化" class="headerlink" title="日期时间组合格式化"></a>日期时间组合格式化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateAndTime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        String time = String.format(<span class="string">&quot;%tc&quot;</span>,date);</span><br><span class="line">        String from = String.format(<span class="string">&quot;%tF&quot;</span>,date);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;全部时间信息展示为：&quot;</span>+time);</span><br><span class="line">        System.out.println(<span class="string">&quot;年-月-日格式为：&quot;</span>+from);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见日期和时间组合转换符</p><p><img src="https://s2.loli.net/2022/05/24/OzlUBbupDIYEvKo.png" alt="image-20220524225720217"></p><h6 id="常规类型格式化"><a href="#常规类型格式化" class="headerlink" title="常规类型格式化"></a>常规类型格式化</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">General</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str = String.format(<span class="string">&quot;%d&quot;</span>,<span class="number">400</span>/<span class="number">2</span>);</span><br><span class="line">        String str1 = String.format(<span class="string">&quot;%b&quot;</span>,<span class="number">3</span>&gt;<span class="number">5</span>);</span><br><span class="line">        String str2 = String.format(<span class="string">&quot;%x&quot;</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;400的一半是：&quot;</span>+str);</span><br><span class="line">        System.out.println(<span class="string">&quot;3&gt;5正确吗？&quot;</span>+str1);</span><br><span class="line">        System.out.println(<span class="string">&quot;200的十六进制是：&quot;</span>+str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常规转换符</p><p><img src="https://s2.loli.net/2022/05/24/497xB3AmJMle1zQ.png" alt="image-20220524230250853"></p><h5 id="正则表达式（需加强部分）"><a href="#正则表达式（需加强部分）" class="headerlink" title="正则表达式（需加强部分）"></a>正则表达式（需加强部分）</h5><ol><li><p>正则表达式通常被用于判断语句中，用来检查某一字符串是否满足某一格式，正则表达式是含有一些具有特殊意义字符的字符串，这些特殊字符成为正则表达式元字符</p></li><li><p>正则表达式中”.”代表任何一个字符，因此在正则表达式中如果想使用普通意义的电字符”.”，必须使用转义字符”&quot;</p></li><li><p>正则表达式中，可以使用方括号括起来若干个字符来表示一个元字符，该元字符可代表方括号中的任何一个字符，如: reg=”[abc]4”,这样字符串a4，b4，c4都是和正则表达式匹配的字符串</p><p>方括号还可以为以下格式：</p><p><img src="https://s2.loli.net/2022/05/25/LVmnQ4tGX27Y38w.png"></p></li></ol><p>正则表达式中的元字符：</p><p><img src="https://s2.loli.net/2022/05/25/9Qt1aLKUgo8RG73.png" alt="image-20220525214446064"></p><p>限定修饰符：</p><p><img src="https://s2.loli.net/2022/05/25/cXVxn69yzDeC5oW.png" alt="image-20220525215141545"></p><p>训练：使用正则表达式来判断email是否合法？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Judge</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 字符集\\w匹配任意字符，+表示字符可以出现1次或多次</span></span><br><span class="line">      <span class="comment">// (\\.\\w&#123;2,3&#125;)* 代表如&quot;.com&quot;的字符串可以出现0次或多次</span></span><br><span class="line">        String regex = <span class="string">&quot;\\w+@\\w+(\\.\\w&#123;2,3&#125;)*\\.\\w&#123;2,3&#125;&quot;</span>;</span><br><span class="line">        String str1 = <span class="string">&quot;111@&quot;</span>;</span><br><span class="line">        String str2 = <span class="string">&quot;12343254&quot;</span>;</span><br><span class="line">        String str3 = <span class="string">&quot;12343254@163.com&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(str1.matches(regex))&#123;</span><br><span class="line">            System.out.println(str1 + <span class="string">&quot;是正确的邮箱&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(str2.matches(regex))&#123;</span><br><span class="line">            System.out.println(str2 + <span class="string">&quot;是正确的邮箱&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(str3.matches(regex))&#123;</span><br><span class="line">            System.out.println(str3 + <span class="string">&quot;是正确的邮箱&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="字符串生成器-StringBuilder类"><a href="#字符串生成器-StringBuilder类" class="headerlink" title="字符串生成器(StringBuilder类)"></a>字符串生成器(StringBuilder类)</h5><p>​    创建成功的字符串对象，其长度是固定的，内容不能被改变和编译。虽然使用+可以达到附加新字符或字符串的目的，但+会产生一个新的String实例，会在内存中创建新的字符串对象，而JDK新增了可变的字符序列StringBuilder类，大大提高了频繁增加字符串的效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jerque</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 使用+运算符把0~9999逐个拼接成字符串</span></span><br><span class="line">        String str =<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">long</span> starttime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">            str = str + i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endtime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> time = endtime - starttime;</span><br><span class="line">        System.out.println(<span class="string">&quot;消耗的时间为：&quot;</span> +time);</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 使用StringBuilder把0~9999逐个拼接成字符串</span></span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        starttime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;<span class="number">10000</span>;x++)&#123;</span><br><span class="line">            builder.append(x);</span><br><span class="line">        &#125;</span><br><span class="line">        endtime = System.currentTimeMillis();</span><br><span class="line">        time = endtime - starttime;</span><br><span class="line">        System.out.println(<span class="string">&quot;builder的消耗时间为：&quot;</span> + time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>通过上述实例可以看出，两种操作执行时间差距很大，所以在程序中频繁附加字符串，建议使用StringBuilder类</li><li>若要使用StringBuilder类最后输出字符串结果，可以使用toString()方法</li></ul><ol><li>append(content)<ul><li>该方法用于向字符串生成器中追加内容</li><li>content表示要追加的字符串生成器中的内容，可以是任何类型的数据类型</li></ul></li><li>insert(int offset, arg)<ul><li>该方法用于向字符串生成器中插入数据内容</li><li>offset: 字符串生成器的位置，该参数必须大于0，且小于等于此序列的长度</li><li>arg: 将插入至字符串生成器的内容</li></ul></li><li>delete(int start , int end)<ul><li>该方法用于移除序列的字符</li><li>start: 删除字符串的起点位置；end: 删除的字符串的终点位置</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;熊出没小心&quot;</span>);</span><br><span class="line">        <span class="comment">// 在字符串后面增加；</span></span><br><span class="line">        builder.append(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">        <span class="comment">// 在字符串索引2位置增加，</span></span><br><span class="line">        builder.insert(<span class="number">2</span>,<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        System.out.println(builder.toString());</span><br><span class="line">        <span class="comment">// 删除索引2的字符</span></span><br><span class="line">        builder.delete(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 在字符串索引3位置增加，</span></span><br><span class="line">        builder.insert(<span class="number">3</span>,<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        System.out.println(builder.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用类库"><a href="#常用类库" class="headerlink" title="常用类库"></a>常用类库</h4><h5 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h5><ul><li>Java是一种面向对象语言，但在Java中不能定义基本数据类型的对象，为了能将基本数据类型视为对象处理，Java提出了包装类的概念</li><li>Java是可以直接处理基本数据类型的，但在有些情况下需要将其作为对象来处理，这事就需要装换为包装类</li><li>包装类相当于基本数据类型和对象之间的桥梁，由于两者之间的装换，引入了装箱和拆箱的概念</li><li>装箱：将基本数据类型装换为包装类</li><li>拆箱：将包装类装换为基本数据类型</li></ul><p><img src="https://s2.loli.net/2022/06/03/2RxCqXmDLgynid8.png" alt="image-20220603174259895"></p><h6 id="Integer类"><a href="#Integer类" class="headerlink" title="Integer类"></a>Integer类</h6><p><img src="https://s2.loli.net/2022/06/03/QzF54xib27gwDap.png" alt="image-20220603174649124"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1234</span>;</span><br><span class="line">        Integer i = Integer.valueOf(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        <span class="comment">// 将i装换为十六进制并赋值给str1</span></span><br><span class="line">        String str1 = Integer.toHexString(i);</span><br><span class="line">        <span class="comment">// 将i装换为二进制并赋值给str2</span></span><br><span class="line">        String str2 = Integer.toBinaryString(i);</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">        System.out.println(str2);</span><br><span class="line">        System.out.println(i.compareTo(a));</span><br><span class="line">        System.out.println(i.equals(a));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Integer类提供的4个常量</p><ul><li>MAX_VALUE：表示int类型可取的最大值</li><li>MIN_VALUE：表示int类型可取的最小值</li><li>SIZE：用来以二进制补码形式表示int值的尾数</li><li>TYPE：表示基本数据类型int的Class实例</li></ul><h6 id="Double类"><a href="#Double类" class="headerlink" title="Double类"></a>Double类</h6><p><img src="https://s2.loli.net/2022/06/03/XMFgtNxIP2Uf35z.png" alt="image-20220603175612432"></p><h6 id="Boolean类"><a href="#Boolean类" class="headerlink" title="Boolean类"></a>Boolean类</h6><p><img src="https://s2.loli.net/2022/06/03/O6ZVyqPvDRFBnQt.png" alt="image-20220603175828801"></p><h6 id="Character类"><a href="#Character类" class="headerlink" title="Character类"></a>Character类</h6><p><img src="https://s2.loli.net/2022/06/03/RBMEpbOyJ8i76ef.png" alt="image-20220603175952734"></p><h6 id="Number类"><a href="#Number类" class="headerlink" title="Number类"></a>Number类</h6><ul><li>对于数值型的包装类，他们有一个共同的父类，就是Number类</li><li>该类是一个抽象类，它是Byte、Integer、Short、Long、Float和Double类的父类，其子类必须提供将表示的数值转换为byte、int、short、long、float和double的方法</li><li>例如：doubleValue()方法返回双精度浮点值，floatValue()方法返回单精度浮点值</li></ul><p><img src="https://s2.loli.net/2022/06/03/9l8pY7rJcgbGZ3M.png" alt="image-20220603180112234"></p><p>练习：判断字符串中的字符是数字还是字母</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberOrString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;JDK11.0.1&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span> ss[] = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ss.length;i++)&#123;</span><br><span class="line">            Character c = Character.valueOf(ss[i]);</span><br><span class="line">            <span class="keyword">if</span>(Character.isLetter(c))&#123;</span><br><span class="line">                System.out.println(ss[i] +<span class="string">&quot;为字母&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(Character.isDigit(c))&#123;</span><br><span class="line">                System.out.println(ss[i] +<span class="string">&quot;为数字&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数字处理"><a href="#数字处理" class="headerlink" title="数字处理"></a>数字处理</h5><ul><li>Java语言中，Math类提供了基本的数学运算方法，如三角函数方法、指数函数方法、对数函数方法、平方根函数方法等运算方法，还提供常用的数学常量，如PI、E等</li><li>生成随机数的方法：Math类中的random()方法、直接调用Random类生成各种类型的随机数</li></ul><h6 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h6><p>在Java中，没有格式化的数据遵循一下原则</p><ul><li>大于0.001并小于10000000，则使用常规小数表示</li><li>小于0.001或大于10000000，则使用科学计数法表示</li></ul><p>由于上述输出格式不能满足解决实际问题的要求，通常将结果格式化为指定形式后输出。在Java中，可以使用DecimalFormat类进行格式化操作</p><p>DecimalFormat类中的特殊字符及其说明：</p><p><img src="https://s2.loli.net/2022/06/05/aVf7Pstr53bU2OR.png" alt="image-20220605170606294"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecimaFormatDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SimpleDome</span><span class="params">(String para,<span class="keyword">double</span> value)</span></span>&#123;</span><br><span class="line">        DecimalFormat myFormat = <span class="keyword">new</span> DecimalFormat(para);</span><br><span class="line">        <span class="comment">// 使用format方法进行格式化</span></span><br><span class="line">        String output = myFormat.format(value);</span><br><span class="line">        System.out.println(value+<span class="string">&quot; &quot;</span>+para+<span class="string">&quot; &quot;</span>+output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UseApplyPatternMethodFormat</span><span class="params">(String para,<span class="keyword">double</span> value)</span></span>&#123;</span><br><span class="line">        DecimalFormat myFormat = <span class="keyword">new</span> DecimalFormat(para);</span><br><span class="line">        <span class="comment">// 使用applyPattern方法进行格式化</span></span><br><span class="line">        myFormat.applyPattern(para);</span><br><span class="line">        System.out.println(value+<span class="string">&quot; &quot;</span>+para+<span class="string">&quot; &quot;</span>+myFormat.format(value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SimpleDome(<span class="string">&quot;###,###,###&quot;</span>,<span class="number">123456.789</span>);</span><br><span class="line">        SimpleDome(<span class="string">&quot;00000000.###kg&quot;</span>,<span class="number">123456.789</span>);</span><br><span class="line">        SimpleDome(<span class="string">&quot;000000.000&quot;</span>,<span class="number">123.78</span>);</span><br><span class="line">        UseApplyPatternMethodFormat(<span class="string">&quot;#.###%&quot;</span>,<span class="number">0.789</span>);</span><br><span class="line">        UseApplyPatternMethodFormat(<span class="string">&quot;###.##&quot;</span>,<span class="number">123456.789</span>);</span><br><span class="line">        UseApplyPatternMethodFormat(<span class="string">&quot;0.00\u2030&quot;</span>,<span class="number">0.789</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h6><p>三角函数方法</p><p>指数函数方法</p><p>取整函数方法</p><ul><li>Math.ceil(double a): 返回大于等于参数的最小整数</li><li>Math.floor(double a): 返回小于等于参数的最大整数</li><li>Math.rint(double a): 返回与参数最接近的整数，如果存在两个同样接近的整数，则结果取偶数</li><li>Math.round(float a): 将参数加上0.5后返回与参数最近的整数</li><li>Math.round(double a): 将参数加上0.5后返回与参数最近的整数，然后强制装换为长整型long</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ceil方法&quot;</span>+ Math.ceil(<span class="number">2.5</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;floor方法&quot;</span>+ Math.floor(<span class="number">2.5</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;rint方法&quot;</span>+ Math.rint(<span class="number">2.5</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;rint方法&quot;</span>+ Math.rint(<span class="number">3.5</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;round方法&quot;</span>+ Math.round(<span class="number">1.5</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;round方法&quot;</span>+ Math.round(<span class="number">2.5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最大/小值，绝对值函数方法</p><ul><li>Math.max(double a,double b): 取a与b之间的最大值</li><li>Math.int(int a,int b): 取a与b之间的最小值</li><li>Math.abs(int a): 返回整型参数的绝对值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxMinAbsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(Math.max(<span class="number">3</span>,<span class="number">7</span>));</span><br><span class="line">        System.out.println(Math.min(<span class="number">3</span>,<span class="number">1</span>));</span><br><span class="line">        System.out.println(Math.abs(-<span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h6><p>​    Random类是JDK中的随机数生成器类，可以通过实例化一个Random对象创建一个随机数生成器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        System.out.println(<span class="string">&quot;生成随机整数：&quot;</span>+ r.nextInt());</span><br><span class="line">        System.out.println(<span class="string">&quot;生成随机0-10整数：&quot;</span>+ r.nextInt(<span class="number">10</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;生成随机float：&quot;</span>+ r.nextFloat());</span><br><span class="line">        System.out.println(<span class="string">&quot;生成随机double：&quot;</span> + r.nextDouble());</span><br><span class="line">        System.out.println(<span class="string">&quot;生成随机boolean：&quot;</span> + r.nextBoolean());</span><br><span class="line">        System.out.println(<span class="string">&quot;生成随机long：&quot;</span> + r.nextLong());</span><br><span class="line">        System.out.println(<span class="string">&quot;生成随机高斯分布的双精度浮点型：&quot;</span> + r.nextGaussian());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    random()方法返回的值实际上市伪随机数，它通过复杂的运算而得到一系列的数，该方法时通过当前时间作为随机数生成器的参数，所以每次执行程序都会产生不同的随机数</p><h6 id="BigInteger类"><a href="#BigInteger类" class="headerlink" title="BigInteger类"></a>BigInteger类</h6><ul><li>BigInteger类的数字范围比Integer类的数字范围要大得多，如果要计算更大的数字就需要使用BigInteger类</li><li>BigInteger类中封装了多种操作，除了基本的加减乘除操作，还提供了绝对值、相反数、最大公约数以及判断是否为质数等操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigIntegerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        BigInteger b1 = <span class="keyword">new</span> BigInteger(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        BigInteger b2 = <span class="keyword">new</span> BigInteger(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;加法：&quot;</span> + b1.add(b2));</span><br><span class="line">        System.out.println(<span class="string">&quot;减法：&quot;</span> + b2.subtract(b1));</span><br><span class="line">        System.out.println(<span class="string">&quot;乘法：&quot;</span> + b1.multiply(b2));</span><br><span class="line">        System.out.println(<span class="string">&quot;除法：&quot;</span> + b2.divide(b1) );</span><br><span class="line">      <span class="comment">// 使用divideAndRemainder方法做除法，返回为数组，第一个值为商，第二个值为余数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;取商：&quot;</span> + b2.divideAndRemainder(b1)[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;取余数：&quot;</span> + b2.divideAndRemainder(b1)[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;b1的4次数：&quot;</span> + b1.pow(<span class="number">4</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;取相反数：&quot;</span> + b1.negate());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="BigDecimal类"><a href="#BigDecimal类" class="headerlink" title="BigDecimal类"></a>BigDecimal类</h6><p>​    BigDecimal类和BigInteger类都能实现大数字的运算，不同的是BigDecimal类加入了小数的概念，一般float和double只能用来做科学计算和工程计算，但由于商业计算中要求数字精度比较高，所以要用到BigDecimal类</p><p><img src="https://s2.loli.net/2022/06/05/lgxZed9Mrt2ipV1.png" alt="image-20220605211329727"></p><p><img src="https://s2.loli.net/2022/06/05/DfierjaZwVg9hCY.png" alt="image-20220605211410943"></p><p>​    在上述方法中，BigDecimal类中的divide()方法有多种设置，用于返回商小数点后的末位的处理，这些模式的名称与含义如下表所示：</p><p><img src="https://s2.loli.net/2022/06/05/6WbMmTs9h1OvDdo.png" alt="image-20220605211554392"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigDecimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;0.003476576556712536&quot;</span>);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;0.003324234234555536&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;加法为：&quot;</span> + b1.add(b2));</span><br><span class="line">        System.out.println(<span class="string">&quot;减法为：&quot;</span> + b1.subtract(b2));</span><br><span class="line">        System.out.println(<span class="string">&quot;乘法为：&quot;</span> + b1.multiply(b2));</span><br><span class="line">        <span class="comment">// 两数相除，将结果保留7为小数，并将第8位做四舍五入处理</span></span><br><span class="line">        System.out.println(<span class="string">&quot;除法为：&quot;</span> + b1.divide(b2,<span class="number">7</span>,BigDecimal.ROUND_HALF_UP));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在指定数字区间内随机生成6个偶数，并求和</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumEvenNumber</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">EvenNumber</span><span class="params">(<span class="keyword">double</span> num1,<span class="keyword">double</span> num2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = (<span class="keyword">int</span>) num1 + (<span class="keyword">int</span>) (Math.random()*(num2-num1));</span><br><span class="line">            <span class="keyword">if</span>(tmp != <span class="number">0</span> &amp;&amp; tmp % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                sum = sum + tmp;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count==<span class="number">6</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算结果为：&quot;</span> + EvenNumber(<span class="number">2</span>,<span class="number">32</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="comment">// 定义一个圆形面积计算方法，并将计算结果保留5为小数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleArea</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Area</span><span class="params">(<span class="keyword">double</span> radius)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> a = Math.pow(radius,<span class="number">2</span>) * Math.PI;</span><br><span class="line">        DecimalFormat d = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;#.00000&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;计算一个圆形面积为： &quot;</span> + d.format(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Area(<span class="number">3.678969</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h5><p>​    System类是JDK中提供的系统类，该类是用final修饰的，所以不允许被继承</p><p><img src="https://s2.loli.net/2022/06/10/h8oxsj7dWkqzNDb.png" alt="image-20220610230507285"></p><h6 id="控制台输出字符"><a href="#控制台输出字符" class="headerlink" title="控制台输出字符"></a>控制台输出字符</h6><ol><li><p>不会自动换行的print()方法</p><p>System.out.print(“\n”)     利用换行符\n实现换行</p><p>System.out.print(“”)     空参数会报错 </p></li><li><p>可以自动换行的ptintln()方法</p><p>System.out.println()      空参数即可实现换行</p><p>System.out.println(“\n”)     会打印两个空行</p></li></ol><h6 id="计时"><a href="#计时" class="headerlink" title="计时"></a>计时</h6><p>​    System.currentTimeMilis()方法可以获取自1970年1月1日零点至今的毫秒数。虽然Date日期类也有类似的方法，但代码会比System类多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字符串对象，循环拼接一万次，利用System.currentTimeMilis()来计算运行时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JointStrTime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">long</span> start_time = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">            str = str + i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end_time = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;计算消耗时间为:&quot;</span> + (end_time - start_time) +<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用“+=”运算符与String类中的concat()方法拼接字符串，执行效率对比</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JointStrTime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">long</span> start_time = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">            str = str + i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end_time = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;+=方式计算消耗时间为:&quot;</span> + (end_time - start_time) +<span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String str2 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">long</span> start_time1 = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">            String a = String.valueOf(i);</span><br><span class="line">            str2 = str2.concat(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end_time1 = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;String类方式concat()方式计算消耗时间为:&quot;</span> + (end_time1 - start_time1) +<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h5><p>​    Java从控制台中读出用户输入的值，用到的不是一行可以直接使用的代码，而是由一个叫Scanner类来实现的，让Scanner扫描System.in就可以获取用户输入的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入Scanner类</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/10/fTUiRKxmqkEc36Z.png" alt="image-20220610233919386"></p><ol><li>nextLine()方法扫描的内容是从第一个字符开始到换行符为止</li><li>next()、nextInt()等方法扫描的内容是从第一个字符开始到这段完整内容结束</li></ol><h6 id="new"><a href="#new" class="headerlink" title="new"></a>new</h6><p>​    System.in表示控制台输入流，在创建Scanner对象时把System.in作为参数，这样创建出的扫描器对象扫描的目标就是用户在控制台中输入的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个随机数，再while循环不断获取用户输入的数字，来对比</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> num = r.nextInt(<span class="number">100</span>);</span><br><span class="line">        Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\n猜一下随机数是多少？&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> input = s.nextInt();</span><br><span class="line">            <span class="keyword">if</span>(input&gt;num)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您猜的数太大了！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(input&lt;num)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您猜的数太小了！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;恭喜您猜对了&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="日期时间类"><a href="#日期时间类" class="headerlink" title="日期时间类"></a>日期时间类</h5><p>​    在程序开发中，经常需要处理日期时间，Java中提供了专门的日期时间类来处理响应的问题</p><h6 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h6><p>​    Date类用于表示日期时间，使用该类表示时间需要使用期构造方法创建对象</p><p>​    Date(): 分配Date对象并初始化，以表示分配他它的时间（精确到毫秒）</p><p>​    Date(long date): 分配Date对象并初始化，以表示自标准基准时间起经过指定毫秒数date后的时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Date对象</span></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">        Date date_time = <span class="keyword">new</span> Date(time);</span><br><span class="line">        System.out.println(<span class="string">&quot;System获取的时间为：&quot;</span>+ time);</span><br><span class="line">        System.out.println(<span class="string">&quot;Date类获取的时间为：&quot;</span> + date_time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/11/5UdTE9RtA2McmYu.png" alt="image-20220611134042577"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前的日期和时间</span></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeNow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time1 = System.currentTimeMillis();</span><br><span class="line">        Date time2 = <span class="keyword">new</span> Date(time1);</span><br><span class="line">        Date time =<span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间为：&quot;</span>+ time);</span><br><span class="line">        System.out.println(<span class="string">&quot;传入当前毫秒的时间为：&quot;</span>+ time2);</span><br><span class="line">        System.out.println(<span class="string">&quot;经过的毫秒数为：&quot;</span> + time.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="日期时间格式化"><a href="#日期时间格式化" class="headerlink" title="日期时间格式化"></a>日期时间格式化</h6><p>​    DateFormat类来实现日期时间格式化功能，该类为日期时间格式化子类的抽象类，可以按照指定的格式对日期或时间进行格式化，格式化风格主要包括：SHORT（完全为数字）、MEDIUM（较长）、LONG（更长）、FULL（完全指定）</p><p>​    使用DateFormat类还可以自定义日期时间格式，要格式化一个当前语言环境下的日期，首先需要创建DateFormat类对象，但是由于它是个抽象类，不能直接new创建实例对象，因此可以使用其静态方法getDateInstance()方法进行创建:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建DateFormat对象</span></span><br><span class="line">DateFormat df = DateFormat.getDateFormat();</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/11/C7NXOz4QZvfMn6h.png" alt="image-20220611142158974"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Date time = <span class="keyword">new</span> Date();</span><br><span class="line">        DateFormat dateFormat = DateFormat.getDateInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;未格式化之前日期为：&quot;</span> + time);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用format格式化后的日期为：&quot;</span> + dateFormat.format(time));</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyy-MM-dd,HH-mm-ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;格式化为指定格式：&quot;</span>+ df.format(time));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Calendar日历类"><a href="#Calendar日历类" class="headerlink" title="Calendar日历类"></a>Calendar日历类</h6><p>​    Date类已经不能胜任如日期时间运算、获取指定时间的年月日时分秒信息等复杂操作，因此JDK提供了新的时间处理类-Calendar日历类</p><p>​    Calendar日历类是一个抽象类</p><p><img src="https://s2.loli.net/2022/06/11/56xVLyEb9YKvUHF.png" alt="image-20220611212834365"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="comment">// 计算当前时间离中国成立100周年还剩下多少天</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd,HH-mm-ss&quot;</span>);</span><br><span class="line">        String time = dateFormat.format(date);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间为：&quot;</span> + time);</span><br><span class="line">        <span class="comment">// 输入将当前时间装换为毫秒级</span></span><br><span class="line">        <span class="keyword">long</span> today = date.getTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建日历类对象，因为抽象类 不能用new</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.set(<span class="number">2049</span>,<span class="number">10</span>-<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 将指定日历对象的日期装换为毫秒级</span></span><br><span class="line">        <span class="keyword">long</span> option_time = calendar.getTimeInMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;距离天数为：&quot;</span> + ((option_time-today)/(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h5><p>​    Runtime类是JDK提供的运行时类，该类为Java程序提供了与当前运行环境相连接的一个通道，Java程序可以利用该类对当前的运行环境执行一些简单的操作</p><p>​    Runtime类不能使用new关键字创建实例，只能通过Runtime.getRuntime()方法获取实例对象</p><p><img src="https://s2.loli.net/2022/06/12/kpy6Dq2hlb9GCoQ.png" alt="image-20220612033733989"></p><h6 id="执行本地命令"><a href="#执行本地命令" class="headerlink" title="执行本地命令"></a>执行本地命令</h6><p>​    本地命令指的是操作系统的命令，例如，在Linux系统下就是shell命令，在Windows系统下就表示cmd命令</p><p>​    Runtime类提供exec()方法让Java代码可以执行系统的命令，exec()方法有很多重载的形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重载形式</span></span><br><span class="line"><span class="function">Process <span class="title">exec</span><span class="params">(String command)</span></span></span><br><span class="line"><span class="function">Process <span class="title">exec</span><span class="params">(String[] cmdarray)</span></span></span><br><span class="line"><span class="function"><span class="comment">// command： 要执行的系统命令，字符串类型</span></span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/06/12/4xey3L7XbMOaBGC.png" alt="image-20220612034206087"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">// 用Java程序在本机Mac执行命令</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaExecMac</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 实例化Runtime对象，抽象类，使用Runtime.getRuntime()方法实例</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 实例化进程对象</span></span><br><span class="line">            Process process = runtime.exec(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取进程字节流输入</span></span><br><span class="line">            InputStream is = process.getInputStream();</span><br><span class="line">            <span class="comment">// 将字节流输入装换为字符流输入</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">            <span class="comment">// 创建空的String对象</span></span><br><span class="line">            String s= <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 如果字符流可以获取非空对象，则打印字节流</span></span><br><span class="line">            <span class="keyword">while</span> ((s=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h6><p> Runtime类可以通过freeMemory()方法查看当前Java虚拟机可用内存的剩余量，从而防止”内存溢出”的情况</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Runtime r = Runtime.getRuntime();</span><br><span class="line">        <span class="keyword">long</span> free = r.freeMemory();</span><br><span class="line">        Integer ints[] =<span class="keyword">new</span> Integer[<span class="number">10000000</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;执行前的内存为：&quot;</span>+free);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ints.length;i++)&#123;</span><br><span class="line">            ints[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endfree = r.freeMemory();</span><br><span class="line">        System.out.println(<span class="string">&quot;执行后的内存为：&quot;</span> + endfree);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;执行过程消耗的内存为：&quot;</span> + (free-endfree));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h4><h5 id="集合类的概述"><a href="#集合类的概述" class="headerlink" title="集合类的概述"></a>集合类的概述</h5><p>​    Java.util包中提供了一些集合类，这些集合类又被成为容器，提到容器不难想到数组。</p><p>​    集合类和数组的不同之处是：数组长度是固定，集合的长度是可变的。数组用来存放基本类型的数据，集合用来存放对象的引用</p><p>​    常见的集合有List集合、Set集合、Map集合，其中List、Set集合继承了Collection接口</p><p><img src="https://s2.loli.net/2022/06/12/Qz7BrD1iuHcCqme.png" alt="image-20220612190913162"></p><h5 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h5><p>​    Collection接口是层次结果中的根接口，构成Collection的单位成为元素。通常不能直接使用，但该接口提供了添加、删除、管理数据元素的方法</p><p><img src="https://s2.loli.net/2022/06/12/vqt5LYSHBlpuzxP.png" alt="image-20220612191202686"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="comment">// 创建集合对象，添加数据并遍历打印</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Muster</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Collection &lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">&quot;book_1&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;book_2&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;book_3&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回集合中元素的个数，返回int</span></span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">// 从集合中删除指定元素</span></span><br><span class="line">        list.remove(<span class="string">&quot;book_3&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">// 判断集合是否为空</span></span><br><span class="line">        System.out.println(list.isEmpty());</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">        <span class="comment">// 遍历集合类中的元素,list.iterator()方法返回迭代器，用于遍历元素</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="comment">// hasNext()判断是否有下一个元素  </span></span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            String str = it.next();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h5><p>​    List集合包括List接口以及List接口的所有实现类，List集合中的元素允许重复，各元素的顺序就是对象插入的顺序，类似数组，可通过使用索引来访问集合中的元素</p><h6 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h6><p>​    List接口继承了Collection接口，因此包含了该接口中的全部方法，此外List接口还定义了一下两个非常重要的方法：</p><p>get(int index)：获取指定索引位置的元素</p><p>set(int index,Object obj)：将索引位置对象修改为指定对象</p><h6 id="List接口的实现方法"><a href="#List接口的实现方法" class="headerlink" title="List接口的实现方法"></a>List接口的实现方法</h6><p>ArrayList类：实现可变的数组，允许保存所有元素包括null，并可以根据索引位置对集合快速的随机访问，缺点是插入对象和删除对象速度慢</p><p>LinkedList类：采用链表结构保存对象，优点是便于插入和删除对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">// 创建一个List集合并添加元素，获取一个随机索引值并删除后遍历集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取一个在list长度内的随机索引</span></span><br><span class="line">        <span class="keyword">int</span> i = (<span class="keyword">int</span>)(Math.random()*list.size());</span><br><span class="line">        System.out.println(<span class="string">&quot;随机索引对应的元素为：&quot;</span> + list.get(i));</span><br><span class="line">        <span class="comment">// 删除随机索引的元素</span></span><br><span class="line">        list.remove(i);</span><br><span class="line">        <span class="comment">// 遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>;a&lt;list.size();a++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;集合中剩余的元素为：&quot;</span> + list.get(a));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h5><p>​    Set集合中的对象不按特定的方式排列，只是简单地把对象加入集合中，但Set集合中不能包含重复对象，Set集合由Set接口和Set接口的实现类组成。</p><p>​    Set接口继承了Collection接口，因此包含其全部方法</p><p>​    Set集合的构造有一个约束条件，传入的Collection对象不能有重复值，必须小心操作可变对象，如果一个Set集合中的可变元素改变了自身状态导致Object.equals(Object) = true,则会出现一些问题</p><p>Set常用的实现类有HashSet类、TreeSet类</p><ul><li><p>HashSet：由哈希表支持，它不保证Set集合的迭代顺序，特别是它不保证该顺序恒久不变。此类允许使用null元素</p></li><li><p>TreeSet：不仅实现Set接口，还实现了java.util.SortedSet接口，按自然顺序排列同时也可以按照指定比较器递增排序</p><p><img src="https://s2.loli.net/2022/06/13/N5BtZpLXQlFSsfa.png" alt="image-20220613212720018"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"><span class="comment">// 创建一个Integer对象集合，并添加元素，再遍历打印出来</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; integers = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        integers.add(-<span class="number">3</span>);</span><br><span class="line">        integers.add(-<span class="number">7</span>);</span><br><span class="line">        integers.add(<span class="number">7</span>);</span><br><span class="line">        integers.add(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : integers) &#123;</span><br><span class="line">            System.out.println(integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h5><p>​    Map集合没有继承Collection接口，其提供的是key到value的映射。Map集合中不能包含相同的key，每个key只能映射一个value。Map集合包括Map接口以及Map接口的所有实现类</p><h6 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h6><p><img src="https://s2.loli.net/2022/06/19/wUgp8zVf1PrblFA.png" alt="image-20220619182455434"></p><h6 id="Map接口的实现类"><a href="#Map接口的实现类" class="headerlink" title="Map接口的实现类"></a>Map接口的实现类</h6><ul><li>HashMap：基于哈希表的Map接口的实现，此实现提供所有可选的映射操作，并允许使用null值与null键，但必须保证键的唯一性，通过哈希表对其内部的映射关系进行快速查找。此类不保证映射映射的顺序，特别是它不保证该顺序恒久不变</li><li>TreeMap：不仅实现了Map接口，还实现了java.util.SortedMap接口，因此集合中的映射关系具有一定的顺序，但在添加、删除和定位映射关系时，TreeMap类比HashMap类性能稍差，不允许键对象为null</li></ul><p>推荐使用HashMap类实现Map集合，因为效率更高，可以通过HashMap类创建Map集合，当需要顺序输出是，再创建一个完全相同映射关系的TreeMap类实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建Map集合使用HashMap实现类</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 添加数据</span></span><br><span class="line">        map.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;python&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;js&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;html&quot;</span>);</span><br><span class="line">        <span class="comment">// 指定Map的key值，创建为set集合</span></span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        <span class="comment">// 创建迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">        System.out.print(<span class="string">&quot;key值有： &quot;</span>);</span><br><span class="line">        <span class="comment">// 迭代输出</span></span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            System.out.print(it.next()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Collection&lt;String&gt; coll = map.values();</span><br><span class="line">        it = coll.iterator();</span><br><span class="line">        System.out.print(<span class="string">&quot;\nvalue值有： &quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            System.out.print(it.next()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2章-Java面向对象</title>
      <link href="/2022/05/03/2022-5-3-%E7%AC%AC2%E7%AB%A0-Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/05/03/2022-5-3-%E7%AC%AC2%E7%AB%A0-Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><h5 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h5><ol><li>类的属性也称为成员变量，可以是任何类型，整个类中均是成员变量的作用范围</li></ol><h5 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h5><ol><li>类对象的行为对应着成员方法</li><li>成员方法可以有参数，参数可以为对象也可以为基本数据类型的变量</li><li>成员方法需要返回值时，方法体中使用return关键词，指定后将被终止</li><li>成员方法无return返回值时，使用void关键词表示</li></ol><h5 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h5><p><img src="https://s2.loli.net/2022/05/04/KN5bC31926tRiXf.png" alt="image-20220504152228310"></p><ul><li>若声明类时不使用权限修饰符，则这个类默认设为package-private，在本包内可见</li><li>类声明权限未private时，即使类里面的成员方法又设置了public权限，但是访问权限依然与类的权限相同</li></ul><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><ol><li><p>定义</p><ul><li>成员方法中定义的变量，这个变量就被称为局部变量</li><li>成员方法中的形参也作为一个局部变量</li><li>局部变量在方法执行时创建，方法结束时销毁</li></ul></li><li><p>局部变量的作用域</p><ul><li>在相互不嵌套的作用域中可以同时声明两个名称与类型相同的局部变量</li><li>在相同嵌套的区域中不能这样声明两个名称与类型相同的局部变量，编译器将会报错</li></ul></li></ol><h5 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h5><ol><li>用于表示本类当前的对象，当前对象不是new出来的实体对象，而是当前正在编辑的类，this关键字只能在本类中使用</li><li>this可以调用成员变量和成员方法</li><li>当局部变量或方法参数覆盖了成员变量时，就要添加this关键字来明确引用的是类成员还是局部变量或方法</li><li>this还可以作为方法的返回值，直接在方法体中return this</li></ol><h4 id="类的构造方法"><a href="#类的构造方法" class="headerlink" title="类的构造方法"></a>类的构造方法</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>​    在类中，除了成员方法外，还有构造方法，构造方法是一个与类同名的方法，对象的创建就是通过构造方法完成的，每当类实例化一个对象时，类都会自动调用构造方法</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>构造方法没有返回值（与成员方法区别在于构造方法不需要void关键字修饰）</li><li>名称与本类名称相同</li><li>在构造方法中可以为成员变量赋值，这样当实例化一个本类对象时，相应的成员变量也将被初始化，如果类中没有构造方法，编译器会自动创建一个不带参数的默认构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EggCake</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> eggcake;</span><br><span class="line"><span class="comment">// 有参构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EggCake</span><span class="params">(<span class="keyword">int</span> eggcake)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.eggcake = eggcake;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无参构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EggCake</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">EggCake cake1 = <span class="keyword">new</span> EggCake();</span><br><span class="line">System.out.println(<span class="string">&quot;顾客不要求加蛋，只会有&quot;</span>+ cake1.eggcake + <span class="string">&quot;个蛋&quot;</span>);</span><br><span class="line">EggCake cake2 = <span class="keyword">new</span> EggCake(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;顾客要求加2个蛋，就有&quot;</span>+ cake2.eggcake + <span class="string">&quot;个蛋&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态变量和静态方法"><a href="#静态变量和静态方法" class="headerlink" title="静态变量和静态方法"></a>静态变量和静态方法</h4><h5 id="使用-static-关键字创建静态变量和静态方法"><a href="#使用-static-关键字创建静态变量和静态方法" class="headerlink" title="使用 static 关键字创建静态变量和静态方法"></a>使用 static 关键字创建静态变量和静态方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Static</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建静态变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> p =<span class="number">3</span>;</span><br><span class="line"><span class="comment">// 创建静态防范</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;这是一个静态方法&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用静态变量和静态方法</span></span><br><span class="line">System.out.println(Static.p);</span><br><span class="line">Static.method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态变量与静态方法的作用通常为了提供共享数据或方法，比如数学计算公式</li><li>静态成员同样遵循public/private/protected修饰符的约束</li></ul><h5 id="使用static注意点："><a href="#使用static注意点：" class="headerlink" title="使用static注意点："></a>使用static注意点：</h5><ul><li>静态方法中不可以使用this关键字</li><li>静态方法中不可以调用非静态方法</li><li>局部变量不可以使用static关键字声明</li><li>主方法必须用static声明</li><li>只有内部类可以使用static关键字声明</li></ul><h4 id="类的主方法"><a href="#类的主方法" class="headerlink" title="类的主方法"></a>类的主方法</h4><p>​    主方法是类的入口点，它定义了程序从何处开始，主方法提供对程序流向的控制，java编译器通过对主方法来执行程序</p><h5 id="主方法定义的特性"><a href="#主方法定义的特性" class="headerlink" title="主方法定义的特性"></a>主方法定义的特性</h5><ul><li>主方法是静态的，所有如果要直接在主方法中调用其他方法，则该方法必须也是静态</li><li>主方法没有返回值</li><li>主方法的形参为数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取主方法的参数值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainDome</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;args.length;i++) &#123;</span><br><span class="line">System.out.println(args[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>​    对象是由类实例化而来，所有问题都通过对象来处理，对象可以通过操作类的属性和方法来解决相应的问题</p><h5 id="对象的创建-new"><a href="#对象的创建-new" class="headerlink" title="对象的创建 new"></a>对象的创建 new</h5><ul><li>对象被创建出来时，就是一个对象的引用，这个引用在内存中为对象分配存储空间</li><li>可以在构造方法中初始化成员变量，当创建对象时，自动调用构造方法，也就是说初始化与创建是捆绑在一起的</li><li>每个对象都是相互独立的，在内存中有独立的位置，当一个对象的生命周期结束后时，对象就变成了垃圾。由java虚拟机自带的垃圾回收机制处理，不能再被使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建People类，实例化两个人</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    String sex;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(<span class="keyword">int</span> age,String name,String sex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        People p1 = <span class="keyword">new</span> People(<span class="number">11</span>,<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;man&quot;</span>);</span><br><span class="line">        People p2 = <span class="keyword">new</span> People(<span class="number">12</span>,<span class="string">&quot;lily&quot;</span>,<span class="string">&quot;women&quot;</span>);</span><br><span class="line">        System.out.println(p1.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="访问对象的属性和行为"><a href="#访问对象的属性和行为" class="headerlink" title="访问对象的属性和行为"></a>访问对象的属性和行为</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Dog类，实例化d1后调用属性和行为</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line">String Color;</span><br><span class="line">String vioce;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name,String color,String vioce)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">Color = color;</span><br><span class="line"><span class="keyword">this</span>.vioce = vioce;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(vioce);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Dog d1 = <span class="keyword">new</span> Dog(<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;red&quot;</span>,<span class="string">&quot;wanwan&quot;</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;第一条狗是：&quot;</span>+d1.name + <span class="string">&quot;，毛色为：&quot;</span>+d1.Color + <span class="string">&quot;，叫声为：&quot;</span>);</span><br><span class="line">d1.call();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="对象的引用"><a href="#对象的引用" class="headerlink" title="对象的引用"></a>对象的引用</h5><p><img src="https://s2.loli.net/2022/05/06/j3IneXOH71oYa5i.png" alt="image-20220506135658141"></p><p>​    上述中实际的对象为 new People()，为了方便开发者保存，调用对象，于是创建一个People类型、名叫tom的引用变量，实际上tom只是代表一个对象的内存位置，只要记住引用变量就能快速的在内存里找到对象数据</p><h5 id="对象的销毁"><a href="#对象的销毁" class="headerlink" title="对象的销毁"></a>对象的销毁</h5><ol><li><p>怎样的对象会被java虚拟机视为垃圾</p><ul><li><p>对象引用超过作用范围</p><p><img src="https://s2.loli.net/2022/05/06/Z95GJyz3PKFm6vQ.png" alt="image-20220506140300581"></p></li><li><p>将对象赋值为null</p><p><img src="https://s2.loli.net/2022/05/06/T2K5hVMslxd9juE.png" alt="image-20220506140326648"></p></li></ul></li><li><p>注意点</p><ul><li>只有通过new操作符创建的对象才会被自动回收</li><li>不是通过new操作符创建的对象提供了一个finalize()方法，这个方法为Object类，它被声明为protected，用户可以在自己的类中定义这个方法，在垃圾回收时会先调用该方法，在下一次垃圾回收动作发送时，才真正回收被对象占用的内存</li><li>由于垃圾回收不受人为控制，具体执行时间也不确定，所以finalize方法也就无法执行，java提供了System.gc()方法来强制启动垃圾回收器</li></ul></li></ol><h3 id="继承、多态、抽象类和接口"><a href="#继承、多态、抽象类和接口" class="headerlink" title="继承、多态、抽象类和接口"></a>继承、多态、抽象类和接口</h3><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><ul><li><p>java语言中一个类继承另外一个类需要使用extends关键词</p></li><li><p>java只支持单继承，即一个类只能有一个父类</p></li><li><p>子类继承父类之后，创建的子类对象会先调用父类的构造方法，在调用子类的构造方法</p></li><li><p>子类继承父类时不需要再用public修饰</p></li><li><p>java虽然不允许同时继承两个父类，但可以通过多代继承实现多继承的关系：祖父》父》儿子》孙子，方式继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> my_project;</span><br><span class="line"><span class="comment">// 创建子类对象，并观察构造方法的调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;构造父类方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinld</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Chinld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;构造子类方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Chinld();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类电话类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Telephone</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 电话类的属性button</span></span><br><span class="line">String button = <span class="string">&quot;0~9&quot;</span>;</span><br><span class="line"><span class="comment">// 电话类的行为：call</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;拨打号位：&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 手机类继承电话类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Moblie</span> <span class="keyword">extends</span> <span class="title">Telephone</span></span>&#123;</span><br><span class="line">  <span class="comment">// 手机类的属性screen</span></span><br><span class="line">String screen = <span class="string">&quot;液晶屏&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dome2</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实例化对象手机类m1</span></span><br><span class="line">Moblie m1 = <span class="keyword">new</span> Moblie();</span><br><span class="line">System.out.println(m1.button);</span><br><span class="line">System.out.println(m1.screen);</span><br><span class="line">m1.call();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h4><ul><li>java中所有的类都直接或间接的继承了java.lang.Object类</li><li>Object类是所有类的父类，是java类层中最高层类</li><li>由于所有类都是Object类的子类，所以在定义类时可省略extends</li></ul><h5 id="getClass-方法"><a href="#getClass-方法" class="headerlink" title="getClass()方法"></a>getClass()方法</h5><ul><li> getClass方法是Object类定义的方法，他会返回对象执行时的Class实例，然后使用此实例调用getName()方法可以取得类的名称</li><li>语法：getClass().getName();</li></ul><h5 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h5><ul><li><p>该方法将一个对象返回为字符串形式，他会返回一个String实例、在实际应用中通常重写toString方法，为对象提供一个特定的输出模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> my_project;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// toString方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;, 今年&quot;</span> + age + <span class="string">&quot;岁&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>,<span class="number">15</span>);</span><br><span class="line">System.out.println(s1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h5><ul><li>“==”运算符是比较两个对象的引用内存地址是否相等</li><li>equals()方法比较的是两个对象的实际内容</li></ul><h4 id="对象类型转换"><a href="#对象类型转换" class="headerlink" title="对象类型转换"></a>对象类型转换</h4><h5 id="向上转换"><a href="#向上转换" class="headerlink" title="向上转换"></a>向上转换</h5><ul><li>向上转换是将子类类型的对象转换为父类类型的对象，即把子类类型对象直接赋值给父类类型对象</li><li>因为people类是teacher类的父类，所有向上转型，能够把教师类直接赋值给人类的对象</li><li>向上转型是安全的，因为是将一个较具体的类对象转换为一个较为抽象的类对象，可以说平行四边形是四边形，但是不能说四边形是平行四边形</li></ul><p><img src="https://s2.loli.net/2022/05/09/ikVbPmQjwKfat5n.png" alt="image-20220509094738547"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在运用向上转型的过程中，父类的对象无法调用子类独有的属性或者方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quadrangle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parallelogram</span> <span class="keyword">extends</span> <span class="title">Quadrangle</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> edges = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Quadrangle P = <span class="keyword">new</span> Parallelogram();</span><br><span class="line">p.edges = <span class="number">6</span>;  <span class="comment">// 报语法错误</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="向下转换"><a href="#向下转换" class="headerlink" title="向下转换"></a>向下转换</h5><ul><li>向下转换将父类类型的对象转换为子类类型的对象</li><li>运用向下转换是不安全的，如果把一个较抽象的对象转换为一个较具体的类对象，这样通常会出现错误</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类对象不能直接赋值给子类对象，如果一定要转换</span></span><br><span class="line"><span class="comment">// 可以通过该语法强制装换： 子类类型 子类对象 = (子类类型) 父类对象;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pigeon</span> <span class="keyword">extends</span> <span class="title">Bird</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Bird b = <span class="keyword">new</span> Pigeon();</span><br><span class="line">Pigeon p = (Pigeon) b;   <span class="comment">// 强制类型转换</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="instanceof关键字判断对象类型"><a href="#instanceof关键字判断对象类型" class="headerlink" title="instanceof关键字判断对象类型"></a>instanceof关键字判断对象类型</h4><ul><li><p>在执行向下转换之前需要先使用instanceof来判断父类对象是否为子类对象的实例</p></li><li><p>instanceof返回值为布尔值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quadrangle</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Quadrangle</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circular</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Quadrangle q = <span class="keyword">new</span> Quadrangle();</span><br><span class="line">Square s = <span class="keyword">new</span> Square();</span><br><span class="line">System.out.println(q <span class="keyword">instanceof</span> Square); </span><br><span class="line">        <span class="comment">// 判断四边形是否为正方形的子类</span></span><br><span class="line">System.out.println(s <span class="keyword">instanceof</span> Quadrangle);    <span class="comment">// 判断正方形是否为四边形的子类</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><p>​    同一个类中允许存在一个以上的同名方法，只要这些方法的参数个数和类型不同即可</p><h4 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h4><h5 id="final变量"><a href="#final变量" class="headerlink" title="final变量"></a>final变量</h5><ul><li>使用final声明变量后，就不可以再改变该变量的值</li><li>通常用final定义的变量为常量</li><li>一个既是static又是final的字段只占据一段不能改变的存储空间</li></ul><h5 id="final方法"><a href="#final方法" class="headerlink" title="final方法"></a>final方法</h5><ul><li>将方法定义为final，可以防止子类修改父类的定义和实现方式</li><li>定义为final的方法执行效率要高于非final方法</li><li>一个定位为private的方法隐式指定为final类型，因此无须将一个定义为private的方法再定义为final类型</li></ul><h5 id="final类"><a href="#final类" class="headerlink" title="final类"></a>final类</h5><ul><li>定义为final的类不能被继承，不允许进行改动</li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;&#125; <span class="comment">// 正方形类继承绘图类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circular</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;&#125; <span class="comment">// 圆形类继承绘图类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo6</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个公开 静态 无输出的方法，传入一个绘图类对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Shape s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断传入的对象是否为正方形类对象或者正方形的子类对象</span></span><br><span class="line"><span class="keyword">if</span>(s <span class="keyword">instanceof</span> Square) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;绘制正方形&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s <span class="keyword">instanceof</span> Circular) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;绘制图形&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;绘制父类图形&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">draw(<span class="keyword">new</span> Shape());</span><br><span class="line">draw(<span class="keyword">new</span> Square());</span><br><span class="line">draw(<span class="keyword">new</span> Circular());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h4><h5 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类(abstract)"></a>抽象类(abstract)</h5><ul><li><p>用于描述特征且极具抽象性的类称为抽象类</p></li><li><p>抽象类不可以实例化为对象</p></li><li><p>抽象类必须被继承，继承后必须重写其中所有的抽象方法，保证以相同的方法名称、参数列表和返回值类型创建出非抽象方法</p></li><li><p>只要类中有一个抽象方法，则该类就为抽象类</p></li><li><p>抽象方法是没有方法体的，除了被重写否则这个方法没有任何意义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;  <span class="comment">// 定义抽象类</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;   <span class="comment">// 定义抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h5><p>​    为解决有些对象继承抽象类后又不需要抽象方法，但是又不得不重写，接口就是为了解决这一问题</p><p><img src="https://s2.loli.net/2022/05/10/U4z2Q1LubcvXV6S.png" alt="image-20220510100911636"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Paintable</span></span>&#123;  <span class="comment">// 定义接口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个类继承一个父类的同时再实现一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parallelogram</span> <span class="keyword">extends</span> <span class="title">Quadrangele</span> <span class="keyword">implements</span> <span class="title">Paintable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>在接口中方法必须定义为public或abstract形式</li><li>在接口中定义的任何字段都自动是static和final的</li><li>继承多个接口时使用逗号隔开即可</li><li>继承接口后需要实现接口中所有的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义绘图接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Paintable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义四边形类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quadrangle</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAnything</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;四边形提供的方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义平行四边形继承四边形类再实现绘制接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parallelogram</span> <span class="keyword">extends</span> <span class="title">Quadrangle</span> <span class="keyword">implements</span> <span class="title">Paintable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;绘制平行四边形&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义正方形继承四边形类再实现绘制接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Quadrangle</span> <span class="keyword">implements</span> <span class="title">Paintable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;绘制正边形&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义圆形只实现接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circular</span> <span class="keyword">implements</span> <span class="title">Paintable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;绘制圆形&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo9</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Parallelogram p =<span class="keyword">new</span> Parallelogram();</span><br><span class="line">p.draw();</span><br><span class="line">Square s = <span class="keyword">new</span> Square();</span><br><span class="line">s.draw();</span><br><span class="line">Circular c =<span class="keyword">new</span> Circular();</span><br><span class="line">c.draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：某景区只允许满载30人的大巴车进出，已驶入景区的大巴车有7俩，驶出景区的大巴车有4俩，请计算当前景区还有多少人？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义增加接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Addable</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义减少接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Reducible</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">reduce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义人员变动接口继承 增加和减少接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Chanfeable</span> <span class="keyword">extends</span> <span class="title">Addable</span>,<span class="title">Reducible</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> UNITS = <span class="number">30</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reduce</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义人数类，实现人员变动接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Chanfeable</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> goin;</span><br><span class="line"><span class="keyword">int</span> goout;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Number</span><span class="params">(<span class="keyword">int</span> goin,<span class="keyword">int</span> goout)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.goout = goout;</span><br><span class="line"><span class="keyword">this</span>.goin = goin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (goin *UNITS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reduce</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (goout *UNITS);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo14</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Number n = <span class="keyword">new</span> Number(<span class="number">7</span>,<span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;景区还剩&quot;</span>+(n.add()-n.reduce())+<span class="string">&quot;人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包和内部类"><a href="#包和内部类" class="headerlink" title="包和内部类"></a>包和内部类</h3><h4 id="Java类包"><a href="#Java类包" class="headerlink" title="Java类包"></a>Java类包</h4><ul><li><p>包的出现很好的解决了类名重名的情况</p></li><li><p>一个完整的类路径：<img src="https://s2.loli.net/2022/05/10/QweYUmsLHV8oMBv.png" alt="image-20220510205318649"></p></li><li><p>在类中指定包名时使用 package表达式放置在程序的第一行</p></li><li><p>包的命名规则是全部使用小写字母</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义一个Math类</span></span><br><span class="line"><span class="keyword">package</span> com.mr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;不是java.lang.Math类，而是com.mr.Math 类&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="导入包-import"><a href="#导入包-import" class="headerlink" title="导入包(import)"></a>导入包(import)</h5><ul><li>使用import关键词指定导入包</li><li>可以使用import关键字指定时，在包后加上*，表示可以在程序中使用该包中的所有类</li><li>当使用*导入包中的所有类时，不会导入该包中子包的类，如果需要子包的类需要单独引入</li><li>当类中已经导入com.mr.Math类，如果想再使用其他包的Math类时，就必须指定完整的带有包格式的类名</li></ul><h5 id="使用import导入静态成员"><a href="#使用import导入静态成员" class="headerlink" title="使用import导入静态成员"></a>使用import导入静态成员</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mr;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.max; <span class="comment">// 导入静态成员方法</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.out; <span class="comment">// 导入静态成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">out.println(<span class="string">&quot;1和4之间较大值为：&quot;</span>+ max(<span class="number">1</span>,<span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>​    如果在类中再定义一个类，则将类中的那个类称为内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span></span>&#123;   <span class="comment">// 外部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;   <span class="comment">// 内部类</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h5><ol><li>内部类介绍<ul><li>内部类中可以随意使用外部内的成员方法和成员变量，即使被修饰为private</li><li>内部类的实例一定要绑定在外部类的实例上，如果从外部类中初始化一个内部类对象，那么内部类对象就会绑定在外部类对象上</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span></span>&#123;</span><br><span class="line">  <span class="comment">// 修饰为private的成员变量和成员方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// 内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">// 直接使用外部类被修饰成为private的成员变量和方法</span></span><br><span class="line">g&#123;&#125;;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>内部类练习：使用内部类模拟发动机点火</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建外部Car类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个私有成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">  <span class="comment">// Car类构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String brand)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 内部类Engine</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line">      <span class="comment">// 内部类成员变量</span></span><br><span class="line">        String model;</span><br><span class="line">      <span class="comment">// 内部类构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Engine</span><span class="params">(String model)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.model = model;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 内部类成员方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ignite</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发动机&quot;</span> + <span class="keyword">this</span>.model + <span class="string">&quot;点火&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 外部类的成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;启动&quot;</span> + <span class="keyword">this</span>.brand);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// main函数；程序起始位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 实例化外部类</span></span><br><span class="line">        Car c = <span class="keyword">new</span> Car(<span class="string">&quot;马自达&quot;</span>);</span><br><span class="line">      <span class="comment">// 调用外部类成员方法</span></span><br><span class="line">        c.start();</span><br><span class="line">      <span class="comment">// 实例化内部类；内部类的实例化需要借助外部类实例化对象</span></span><br><span class="line">        Car.Engine e = c.<span class="function">new <span class="title">Engine</span><span class="params">(<span class="string">&quot;1.5t自然吸气发动机&quot;</span>)</span></span>;</span><br><span class="line">      <span class="comment">// 调用内部类成员方法</span></span><br><span class="line">        e.ignite();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>注意：</p><ul><li>在外部类和非静态方法之外实例化内部类对象，需要使用”外部类.内部类”的形式指定该对象的类型</li><li>内部类对象会依赖外部类对象，除非已经存在一个外部类对象，否则类中不会出现内部类对象</li></ul></li><li><p>使用this关键字获取内部类与外部类的引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.如果再外部类中定义的成员变量与内部类的成员变量名称相同，可以使用this关键字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheSameName</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 外部类的变量x</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">      <span class="comment">// 内部类的变量x</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> x = <span class="number">9</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doit</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="comment">// 内部类成员方法的变量x</span></span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">11</span>;</span><br><span class="line">            x++;</span><br><span class="line">          <span class="comment">// 内部类变量x</span></span><br><span class="line">            <span class="keyword">this</span>.x++;</span><br><span class="line">          <span class="comment">// 外部类变量x</span></span><br><span class="line">            TheSameName.<span class="keyword">this</span>.x++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 实例化外部类对象</span></span><br><span class="line">        TheSameName t = <span class="keyword">new</span> TheSameName();</span><br><span class="line">      <span class="comment">// 实例化内部类对象</span></span><br><span class="line">        TheSameName.Inner i = t.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">// 调用内部类方法</span></span><br><span class="line">        i.doit();</span><br><span class="line">        System.out.println(t.x);</span><br><span class="line">        System.out.println(i.x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><p>​    匿名类是只在创建对象时才会编写类体的一种写法，匿名类的特点是”先用先写”</p><ul><li>匿名类不能写构造方法</li><li>匿名类不能定义静态成员</li><li>如果匿名类创建的对象没有赋值给任何引用变量，会导致该对象用完一次就会被java虚拟机销毁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    String Color;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 无法直接实例化对象的抽象类，可以用new关键词，这样实现的匿名类</span></span><br><span class="line">        Dog maomao = <span class="keyword">new</span> Dog() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;四腿狂奔&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;嗷呜&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        maomao.Color = <span class="string">&quot;灰色&quot;</span>;</span><br><span class="line">        maomao.move();</span><br><span class="line">        maomao.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建人类里面有个走路方法和心脏内部类，当调用走路方法时心脏跳动方法也会同时执行</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用走路方法&quot;</span>);</span><br><span class="line">        Heart c = <span class="keyword">this</span>.<span class="function">new <span class="title">Heart</span><span class="params">()</span></span>;</span><br><span class="line">        c.beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;调用心脏跳动方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        People p = <span class="keyword">new</span> People();</span><br><span class="line">        p.walk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1章-Java语言基础</title>
      <link href="/2022/04/15/2022-4-15-%E7%AC%AC1%E7%AB%A0-Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/15/2022-4-15-%E7%AC%AC1%E7%AB%A0-Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="java语言基础"><a href="#java语言基础" class="headerlink" title="java语言基础"></a>java语言基础</h3><h4 id="java主类结构"><a href="#java主类结构" class="headerlink" title="java主类结构"></a>java主类结构</h4><ul><li>java程序的基本组成单元是类，类体中包括属性与方法两个部分</li><li>每个程序都包含一个main()方法，含有main()方法的类成为主类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Frist</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> String s1 = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String s2= <span class="string">&quot;java&quot;</span>;</span><br><span class="line">System.out.println(s1);</span><br><span class="line">System.out.println(s2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>包声明    </p><p>一个java应用程序是由若干个类组成，上述例子中就是一个类名为Frist的类，语句package Number为声明该类的包，package为包的关键词</p></li><li><p>声明成员变量和局部变量</p><ul><li>成员变量：（又叫全局变量），声明在类体中</li><li>局部变量：声明在方法体中</li><li>例子中s1为成员变量，s2为局部变量</li></ul></li><li><p>编写主方法</p><ul><li>main()方法时类体中的主方法，该方法从{开始，至}结束  ，是程序开始执行的位置</li><li>pubic：权限修饰符</li><li>static：静态修饰符</li><li>void：返回值修饰符</li><li>java程序中必须声明public static void</li><li>String[] args：是一个字符类型的数组</li></ul></li><li><p>导入api类库</p><ul><li>import关键词导入相关类</li></ul></li></ol><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ol><li><p>整数类型</p><p><img src="https://s2.loli.net/2022/04/16/azjnHoRYKEt48fA.png"></p><ul><li>byte：定义方式与int一致</li><li>short：定义方式与int一致</li><li>int：int变量在内存中占4字节，也就是32位bit，int为java整型值的默认数据类型</li><li>long：取值范围比int大，且属于高精度数据类型，赋值时需要在整数后加L或l，定义long类型变量</li></ul></li><li><p>浮点类型</p><p><img src="https://s2.loli.net/2022/04/16/NUJvynihsexdkmK.png"></p><ul><li>float：单精度浮点类型，在定义时需要加F/f来表明为float类型，不能会默认为double类型</li><li>double：双精度浮点类型（默认浮点类型）</li></ul></li><li><p>字符类型</p><ul><li><p>char：’s’表示为一个字符，”s”表示为一个字符串</p></li><li><p>转义字符：转义一个特殊字符需要使用反斜号\</p><p><img src="https://s2.loli.net/2022/04/16/IV1foFz8eWYXcJr.png" alt="image-20220416173814269"></p></li></ul></li><li><p>布尔类型</p><ul><li>布尔类型又称为逻辑类型，简称布尔型，只有true/false两个值</li></ul></li></ol><h4 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h4><ol><li><p>标识符和关键词</p><ul><li><p>标识符：用来标识类名，变量名，方法名，数组名，文件名的有效字符序列，一般由字母+下划线、$和数字组成，且第一个字符不能是数字，标识符不能为java关键词</p></li><li><p>关键词：为java的保留字，是java语言中已经被赋予特定意义的一些单词</p><p><img src="https://s2.loli.net/2022/05/17/M2SDr6IH7BOnJhF.png" alt="image-20220517094000268"></p></li></ul></li><li><p>声明变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">char</span> char1 = <span class="string">&#x27;r&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>系统内存可大略分为3个区域，系统os区、程序program区、数据data区，当程序执行时，程序代码会加载到内存中的程序区，数据暂时存储在数据区中，假设上述两个变量定义在方法体中，则程序加载到程序区中，当执行程序代码时，会在数据区配置空间给出这两个变量</li></ul></li><li><p>声明常量</p><ul><li><p>程序运行过程中一直不会改变的量称为常量（constant），通常也称为“final变量”</p></li><li><p>在java中声明一个常量，除了指定数据类型，还需要通过final关键词进行限定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">final</span> char2 = <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="复合语句"><a href="#复合语句" class="headerlink" title="复合语句"></a>复合语句</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myproject;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Compound</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line">&#123;<span class="comment">// 复合语句1</span></span><br><span class="line"><span class="keyword">int</span> y = <span class="number">40</span>;</span><br><span class="line">System.out.println(y);</span><br><span class="line"><span class="keyword">int</span> z = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">boolean</span> b;</span><br><span class="line">&#123;<span class="comment">// 复合语句2</span></span><br><span class="line">b = y &gt; z;</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">String word = <span class="string">&quot;hello java&quot;</span>;</span><br><span class="line">System.out.println(word);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>复合语句中每个语句都是从上至下执行，复合语句以整个块为单位，能够用在任何一个单独语句可以使用的地方，并且复合语句中还可以嵌套复合语句</li><li>复合语句中的变量在语句外使用时会发生错误</li></ul><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><h5 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h5><ol><li><p>语法规则</p><ul><li>if后面跟布尔表达式，当为true时，执行后续语句，为false则执行else后的语句</li><li>if 条件语句可分为简单的if语句、if…else语句、if…else if多分支语句</li></ul></li><li><p>if</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TakePhone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> phone_number = <span class="number">12345678</span>;</span><br><span class="line"><span class="keyword">if</span>(phone_number != <span class="number">123456</span>) &#123;<span class="comment">// 判断手机号是否存在</span></span><br><span class="line">System.out.println(<span class="string">&quot;对不起，您拨打的号码不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>if…else</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TakePhone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> phone_number = <span class="number">123456</span>;</span><br><span class="line"><span class="keyword">if</span>(phone_number != <span class="number">123456</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;对不起，您拨打的号码不存在&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;拨打123456成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>if…else if</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请问有多少人用餐？&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">11</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;回答：&quot;</span>+ count + <span class="string">&quot;人&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(count&lt;=<span class="number">4</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请到4人桌用餐&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(count&gt;<span class="number">4</span> &amp;&amp; count&lt;=<span class="number">8</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请到8人桌用餐&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(count&gt;<span class="number">8</span> &amp;&amp; count&lt;=<span class="number">16</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请到16人桌用餐&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;抱歉，本店没有这么大的包间&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="switch-多分支语句"><a href="#switch-多分支语句" class="headerlink" title="switch 多分支语句"></a>switch 多分支语句</h5><ol><li><p>语法规则：</p><ul><li>switch语句中表达式的值必须是整数、字符型、字符串类型或者枚举类型，常量值数据类型必须与表达式类型相同</li><li>switch语句先计算表达式的值，如果表达式的结果和某个case的常量值相同，则执行该case后的语句直到遇到break为止，若该case中没有break则继续执行后面case的语句直到遇到break为止</li><li>若没有一个case常量的值与表达式相同，则执行default后的语句，default语句为可选，若不存在default语句也没有case常量与表达式相同，switch语句则不做任何处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myproject;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入成绩：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> grade = sc.nextInt();</span><br><span class="line"><span class="keyword">switch</span>(grade) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;优&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;良&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;中&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;差&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;成绩无效&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">sc.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><h5 id="while"><a href="#while" class="headerlink" title="while"></a>while</h5><ol><li><p>语法规则：</p><ul><li>当条件表达式返回值为true时，则执行后面的语句块，执行玩语句块后重新判断条件表达式是否为true，直到条件表达式返回为false则退出循环</li><li>注意点：while表达式的括号后加；这样程序会认为要执行一条空语句，而进入无限循环</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">While</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=<span class="number">1000</span>) &#123;</span><br><span class="line">sum = sum + x;</span><br><span class="line">x++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;sum等于 &quot;</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="do-while循环语句"><a href="#do-while循环语句" class="headerlink" title="do while循环语句"></a>do while循环语句</h5><ol><li><p>语法规则：</p><ul><li>先执行一次循环，在判断条件是否成立</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myproject;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建扫描器，获取控制台输入的值</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> password;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入6位密码：&quot;</span>);</span><br><span class="line"><span class="comment">// 将用户输入的密码记录下来</span></span><br><span class="line">password = sc.nextInt();</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">123</span>!=password);</span><br><span class="line">System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">sc.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h5><ol><li><p>for</p><ol><li><p>语法规则：</p><ul><li>for循环语句中有3个表达式，1初始化表达式，负责完成变量的初始化；2循环条件表达式，指定循环条件，为布尔值；3每次循环结束后执行的语句，一般用来改变循环条件</li><li>首次执行表达式1来完成变量的初始化，然后判断表达式2的值为true时进入循环执行语句块中的代码，执行结束后计算表达式3，第二轮循环时从表达式2开始，若返回true则执行语句块内的代码，返回false则跳出整个for语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">For</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 计算2-100的偶数之和</span></span><br><span class="line"><span class="keyword">int</span> sum =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i=i+<span class="number">2</span>) &#123;</span><br><span class="line">sum = sum + i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;合为：&quot;</span> + sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/18/RWitParJU5cp1gB.png" alt="image-20220418142944860"></p></li></ol></li><li><p>foreach</p><p>foreach是for的简化版本，不能取代for语句，foreach不是关键词，习惯将这种特殊的for语句成为foreach语句，foreach语句在遍历数组上很方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForEach</span> </span>&#123;</span><br><span class="line"><span class="comment">// 使用foreach遍历数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x :arr) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;元素分别为&quot;</span> + x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h4><h5 id="break"><a href="#break" class="headerlink" title="break"></a>break</h5><ol><li><p>使用break可中断当前循环体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Break</span> </span>&#123;</span><br><span class="line"><span class="comment">// 遇到第一个偶数时中断循环</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n =<span class="number">1</span> ;n&lt;<span class="number">20</span>;n++) &#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span> ==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;n为：&quot;</span> + n);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用标签名中断指定位置的循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Break</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ll:<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span> ;i&lt;=<span class="number">3</span>;i++) &#123; <span class="comment">// 指定循环标签名ll</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;<span class="number">5</span>;k++) &#123;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">break</span> ll;<span class="comment">// 指定当k=3时，跳出ll循环，不指定时只会跳出当前循环</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;i=&quot;</span>+i +<span class="string">&quot;k=&quot;</span>+k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h5><ol><li><p>条件为true时则跳过本次循环，继续下一次循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContinueTest</span> </span>&#123;</span><br><span class="line"><span class="comment">// 当i为偶数时跳过</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">20</span>;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;奇数有：&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="练习1-打印菱形"><a href="#练习1-打印菱形" class="headerlink" title="练习1. 打印菱形"></a>练习1. 打印菱形</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> my_project;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rhombus</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 先打印上面的正三角</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;<span class="number">8</span>-i;x++) &#123;</span><br><span class="line"><span class="comment">// 打印前面的空格</span></span><br><span class="line">System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;<span class="number">2</span>*i+<span class="number">1</span>;y++) &#123;</span><br><span class="line"><span class="comment">// 打印出*</span></span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印换行</span></span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 再打印下面的倒三角</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">8</span>;i&gt;<span class="number">0</span>;i--) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;<span class="number">9</span>-i;x++) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;<span class="number">2</span>*i-<span class="number">1</span>;y++) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="练习2：百钱百鸡"><a href="#练习2：百钱百鸡" class="headerlink" title="练习2：百钱百鸡"></a>练习2：百钱百鸡</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickenGame</span> </span>&#123;</span><br><span class="line"><span class="comment">// 百钱百鸡练习:</span></span><br><span class="line"><span class="comment">// 公鸡5文钱一只，母鸡3文钱一只，雏鸡1文钱3只，用100文钱买100只鸡，求鸡分别为多少只？</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=<span class="number">33</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">3</span>;y&lt;=<span class="number">300</span>;y+=<span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>((i*<span class="number">5</span> + x*<span class="number">3</span> + y/<span class="number">3</span>)-<span class="number">100</span> == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;有公鸡&quot;</span>+i+<span class="string">&quot;只，&quot;</span>+<span class="string">&quot;母鸡&quot;</span>+x+<span class="string">&quot;只，&quot;</span>+<span class="string">&quot;有雏鸡&quot;</span>+y+<span class="string">&quot;只\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="练习3：输出由4、5、6、7能组成的互不相同且无重复数字的三位数"><a href="#练习3：输出由4、5、6、7能组成的互不相同且无重复数字的三位数" class="headerlink" title="练习3：输出由4、5、6、7能组成的互不相同且无重复数字的三位数"></a>练习3：输出由4、5、6、7能组成的互不相同且无重复数字的三位数</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> myproject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeNumber</span> </span>&#123;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">4</span>;i&lt;<span class="number">8</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">4</span>;x&lt;<span class="number">8</span>;x++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">4</span>;y&lt;<span class="number">8</span>;y++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i!=x&amp;&amp;i!=y&amp;&amp;x!=y) &#123;</span><br><span class="line">System.out.println(i+<span class="string">&quot;&quot;</span>+x+<span class="string">&quot;&quot;</span>+y);&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>概念：具有相同数据类型的一组数据的集合</li></ul><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><ol><li><p>创建一维数组：先声明，再用new关键词进行内存分配</p><ol><li>数组元素类型 数组名字[ ] = new数组元素类型[数组元素个数];</li></ol></li><li><p>初始化数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两种初始化数组方式</span></span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> arr2[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用一维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> my_project;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Args</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 打印月份对应的天数</span></span><br><span class="line"><span class="keyword">int</span> day[] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++) &#123;</span><br><span class="line">System.out.println((i+<span class="number">1</span>)+<span class="string">&quot;月的天数为&quot;</span>+day[i]+<span class="string">&quot;天&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><ol><li><p>概念：如果一维数组中的各个元素仍然是一个数组，那么他就是一个二位数组。二维数组常用语表示表，表中的信息以行和列的形式组织，第一个下标代表元素所在的行，第二个下标代表元素所在的列</p></li><li><p>创建二位数组：先声明，再用new关键词进行内存分配</p><ol><li>数组元素的类型 数组名字[] []; </li><li>数组元素的类型[] [] 数组名字;</li></ol></li><li><p>初始化二位数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">type arrayname[][] = &#123;value&#125;;</span><br><span class="line"><span class="comment">// type 数组类型</span></span><br><span class="line"><span class="comment">// arrayname 数组名称，一个合法的标识符</span></span><br><span class="line"><span class="comment">// value 二维数组中各元素都代表一个一位数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> myarr[][] = &#123;&#123;<span class="number">12</span>,<span class="number">1</span>&#125;,&#123;<span class="number">23</span>,<span class="number">4</span>&#125;&#125;</span><br><span class="line"><span class="comment">// 初始化数组后，要明确数组的下标都是从0开始，例如：myarr[1][1]的值为4</span></span><br></pre></td></tr></table></figure></li><li><p>使用二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> my_project;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArr</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 输出一个全部值为0的二维数组</span></span><br><span class="line"><span class="comment">// 使用new为数分配内存时，整数数组中各个元素的初始值都为0</span></span><br><span class="line"><span class="keyword">int</span> a[][]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a[i].length;j++) &#123;</span><br><span class="line">System.out.print(a[i][j]);</span><br><span class="line">&#125;System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>训练1:模拟书柜放书</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> my_project;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArr</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String arr[][] = <span class="keyword">new</span> String[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&quot;history&quot;</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&quot;economics&quot;</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">&quot;science&quot;</span>;</span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="数组基本操作"><a href="#数组基本操作" class="headerlink" title="数组基本操作"></a>数组基本操作</h4><h5 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h5><h6 id="for循环遍历"><a href="#for循环遍历" class="headerlink" title="for循环遍历"></a>for循环遍历</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个二位数组</span></span><br><span class="line"><span class="keyword">int</span> num[][] = <span class="keyword">new</span> <span class="keyword">int</span>[][] &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="comment">// 循环外层数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num.length;i++) &#123;</span><br><span class="line">            <span class="comment">// 循环内层数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;num[i].length;x++) &#123;</span><br><span class="line">                <span class="comment">// 打印每个元素</span></span><br><span class="line">System.out.print(num[i][x]);</span><br><span class="line">&#125;System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="使用foreach语句遍历数组"><a href="#使用foreach语句遍历数组" class="headerlink" title="使用foreach语句遍历数组"></a>使用foreach语句遍历数组</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForeachArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[][]= &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;数组中的元素有：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x[]:arr) &#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> e:x) &#123;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span>(i == arr.length &amp;&amp; j == x.length) &#123;</span><br><span class="line">System.out.print(e);</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">System.out.print(e + <span class="string">&quot;、&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="填充替换数组元素"><a href="#填充替换数组元素" class="headerlink" title="填充替换数组元素"></a>填充替换数组元素</h5><ol><li><p>使用Array类中的fill()方法，语法如下</p><p>fill(数组名,指定填充的第一个元素索引,指定填充的最好一个元素的索引,要分配给数组的值)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayFill</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">// 将数组arr的全部元素填充为8</span></span><br><span class="line">Arrays.fill(arr,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.print(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayFill</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">// 替换数组中索引1-3的元素（不包含3）</span></span><br><span class="line">Arrays.fill(arr,<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">System.out.print(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="对数组排序（sort）"><a href="#对数组排序（sort）" class="headerlink" title="对数组排序（sort）"></a>对数组排序（sort）</h5><ol><li>语法使用：Arrays.sort(数组名)，java中string类型的排序根据字典编排排序的，数字&gt;大写字母&gt;小写字母</li></ol><h5 id="复制数组（copyOf、copyOfRange）"><a href="#复制数组（copyOf、copyOfRange）" class="headerlink" title="复制数组（copyOf、copyOfRange）"></a>复制数组（copyOf、copyOfRange）</h5><ol><li><p>copyOf()：复制数组至指定长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayFill</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">// 复制arr至新的9为数组newarr中</span></span><br><span class="line"><span class="keyword">int</span> newarr[] = Arrays.copyOf(arr, <span class="number">9</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;newarr.length;i++) &#123;</span><br><span class="line">System.out.print(newarr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>copyOfRange()：将指定数组的指定长度复制到新数组中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayFill</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="comment">// 将arr数组索引0-3的元素复制至新数组newarr(不包含3)</span></span><br><span class="line"><span class="keyword">int</span> newarr[] = Arrays.copyOfRange(arr,<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;newarr.length;i++) &#123;</span><br><span class="line">System.out.print(newarr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="查询数组（binarySearch）"><a href="#查询数组（binarySearch）" class="headerlink" title="查询数组（binarySearch）"></a>查询数组（binarySearch）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="comment">// 二分查找前先排序</span></span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">        <span class="comment">// 在数组arr中查找8，如果有这个元素则会返回索引值，没有则返回-（插入点+1）</span></span><br><span class="line"><span class="keyword">int</span> e = Arrays.binarySearch(arr, <span class="number">8</span>);</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">4</span>&#125;;</span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">        <span class="comment">// 指定查找索引范围</span></span><br><span class="line"><span class="keyword">int</span> e = Arrays.binarySearch(arr,<span class="number">0</span>,<span class="number">2</span>,<span class="number">8</span>);</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数组排序算法"><a href="#数组排序算法" class="headerlink" title="数组排序算法"></a>数组排序算法</h4><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><ol><li><p>基本思想：对比相邻的元素值，如果满足条件则交换元素值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num[] = &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        <span class="comment">// 外层控制循环次数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;num.length;i++) &#123;</span><br><span class="line">            <span class="comment">// 内存循环对比相邻数据</span></span><br><span class="line">            <span class="comment">// 每次循环后缩短循环次数，第一次循环结束后最大的值已经在最后，就没有对比的必要，依次类推</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num.length-i;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(num[j]&gt;num[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = num[j];</span><br><span class="line">num[j]=num[j+<span class="number">1</span>];</span><br><span class="line">num[j+<span class="number">1</span>]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:num) &#123;</span><br><span class="line">System.out.print(i+<span class="string">&quot;、&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="直接排序"><a href="#直接排序" class="headerlink" title="直接排序"></a>直接排序</h5><h5 id="反转排序"><a href="#反转排序" class="headerlink" title="反转排序"></a>反转排序</h5>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电商性能测试实战</title>
      <link href="/2022/02/24/2022-2-24-%E7%94%B5%E5%95%86%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98/"/>
      <url>/2022/02/24/2022-2-24-%E7%94%B5%E5%95%86%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h4 id="压测实施步骤："><a href="#压测实施步骤：" class="headerlink" title="压测实施步骤："></a>压测实施步骤：</h4><p>1、性能需求指标</p><ul><li>时间指标：响应耗时，常见场景就是2.5.8原则，而当为电商下单，加入购物车如果响应时间达到500毫秒、1秒已经算是很大的延迟了，所以我们需要结合我们实际的场景中我们对性能测试的需求</li><li>容量指标：同时承载多少人的并发，结合我们的用户和订单量来实际给出指标</li><li>资源利用指标：一般是需要我们与运维来同步，什么样的内存，cpu占用量是我们可以接受的范围内，以这样的一个指标来达成我们性能测试的目的</li></ul><h4 id="2、性能模型"><a href="#2、性能模型" class="headerlink" title="2、性能模型"></a>2、性能模型</h4><p>压测场景要尽可能还原我们的用户实际使用场景的</p><ul><li>业务模型：用户实际的操作流程，那我们的业务模型就需要与用户的操作流程相匹配</li></ul><h4 id="3、性能方案"><a href="#3、性能方案" class="headerlink" title="3、性能方案"></a>3、性能方案</h4><ul><li>测试环境：独立干净的环境，配置尽可能与线上相同</li><li>测试数据：测试数据怎么造，需要什么体量的数据才能满足你的业务模型测试需求</li><li>测试模型：业务模型</li><li>性能指标</li><li>压力策略：策略一般为一个递增策略，例如我们先做多少并发预计QPS(并发量/响应时间)，持续多久之后开始做递增，递增多少预计QPS为多少</li><li>准入准出</li></ul><h4 id="4、性能监控"><a href="#4、性能监控" class="headerlink" title="4、性能监控"></a>4、性能监控</h4><ul><li>客户端的一些性能指标监控</li><li>服务端的监控（查看日志）</li></ul><h4 id="5、性能场景执行"><a href="#5、性能场景执行" class="headerlink" title="5、性能场景执行"></a>5、性能场景执行</h4><ul><li>场景执行</li></ul><h4 id="6、性能结果-报告"><a href="#6、性能结果-报告" class="headerlink" title="6、性能结果/报告"></a>6、性能结果/报告</h4><ul><li>场景结果整理</li><li>监控结果整理</li><li>性能整体分析</li><li>性能结论</li><li>优化建议</li></ul>]]></content>
      
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试项目设计</title>
      <link href="/2022/02/23/2022-2-23-%E9%9D%A2%E8%AF%95%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/02/23/2022-2-23-%E9%9D%A2%E8%AF%95%E9%A1%B9%E7%9B%AE%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="毕业设计"><a href="#毕业设计" class="headerlink" title="毕业设计"></a>毕业设计</h3><ul><li>软技能：沟通能力、文档能力</li><li>计算机知识：协议、算法、linux</li><li><strong>项目经验</strong>：介绍的好很加分</li></ul><h3 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h3><ol><li><p>项目背景</p><p>由于淘力网主要的功能模块的前端页面UI改变很小，而且老的接口变动也很小，经过权衡后决定开始做自动化</p></li><li><p>业务架构</p><p>后端为PHP，前端为vus.js，数据库为mysql。开发初期后端回给前端提供一份接口文档，而前端则根据这份接口文档去进行页面代码的编写，前端也可以直接根据文档做mock数据进行调试，当后端代码完成后，则可以开始前后联调</p></li><li><p>框架需要达到的一些指标</p><p>1、首先需要与jenkins持续集成，让其他开发人员也能很方便的执行</p><p>2、需要输出日志，出现用例失败后可快速定位到对应接口</p><p>3、还要输出可视化的测试报告以供项目经理查看用例执行情况。</p></li><li><p>自动化设计方案</p><p>1、首先我们对业务进行梳理，看看哪些页面适合做UI自动化，将主要功能模块划分出优先级，把用户使用频率比较多同时页面UI变动比较小的开始做 </p><p>2、我采用的技术框架是python+pytest+allure </p><p>3、技术架构大概</p><p>page_object包,： base_page，base_page里面我会封装浏览器驱动方法，selenium的元素操作的方法二次封装，比如send_keys,find_element,click等，然后还有一些页面的page_object ，将每个页面都单独写成一个page类，且这个page类继承base_page，page里面的每个函数中编写该页面的一个操作动作并return 一个page对象或者是一个断言数据 </p><p> test_case包，编写测试用例，使用pytest用例编写方式，set_up中写一个实例化浏览器的对象，用例中直接采用链式调用的写法，最后做断言 - test_data：存放一些yaml测试数据</p><p>config：存放配置文件，环境地址，数据库连接</p><p>log：封装log日志方法，存放日志文件</p><p>tool：工具类，写一个公用方法，例如取文件的绝对路径，上传文件，读取yaml文件的方法 </p><p>result：存放allure的报告文件 </p><p>pytest.ini文件：存放一些前置方法，以供测试用例可以直接调用，存放二次开发的方法，例如开发过程中如果一个用例有多条测试数据的时候会给数据一个ids，当ids为中文时，默认是会显示乱码，所以我们在pytest收集测试用例之前对pytest方法进行重写，改变编码格式即可解决该问题</p></li><li><p>可优化的点</p><p>1、UI自动化分布式执行的时候，账号问题，分布式的时候相互挤账号，目前还没有找到很合适的方案</p><p>2、接口，之前一直在推进后端用swagger来写接口文档，我们这边就可以利用swagger的自动生成测试用例，来更方便的做自动化</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试问题复盘</title>
      <link href="/2022/01/21/2022-1-21-%E6%A0%BC%E5%8A%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
      <url>/2022/01/21/2022-1-21-%E6%A0%BC%E5%8A%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="1、第一轮技术面"><a href="#1、第一轮技术面" class="headerlink" title="1、第一轮技术面"></a>1、第一轮技术面</h3><ol><li><h4 id="如何理解po模型"><a href="#如何理解po模型" class="headerlink" title="如何理解po模型"></a>如何理解po模型</h4><ul><li><p>通过面向对象的方式，把页面定位和页面操作动作，与测试逻辑分开</p></li><li><p>提高代码的可读性，减少代码的重复，提高代码可维护性</p></li><li><p>页面元素如果有变化，只需要维护每个page</p></li><li><p>测试步骤有变化，只需要维护case</p></li></ul></li><li><h4 id="如何搭建你的测试框架"><a href="#如何搭建你的测试框架" class="headerlink" title="如何搭建你的测试框架"></a>如何搭建你的测试框架</h4><ul><li><p>首先根据实际项目组实际情况，综合项目经理的意见，来决定优先做接口还是UI自动化</p></li><li><p>我自己的想法是，如果对数据很敏感，很重视，可以优先做接口自动化，如果对用户体验要求比较高，可以优先考虑做UI自动化</p></li><li><p>如果优先开始做接口自动化，首先我会先熟悉需求，熟悉功能模块，然后结合api文档和抓包来分析接口逻辑</p></li><li><p>分析的差不多后，我会先在postman把需求自动化的接口全部调试一下</p></li><li><p>然后开始简单写一下接口自动化文本用例</p></li><li><p>然后开始搭建框架</p></li><li><p>新增一个protocol包，里面放入封装的协议方法，例如requests方法的封装，或者还有其他的网络协议方法的封装</p></li><li><p>再新增一个api包，里面存放api的描述类，这里面存放功能模板所需要api，继承protocol，但不牵扯测试数据和业务逻辑的关联，只是接口的描述</p></li><li><p>再新增一个test_data包，里面存放测试数据</p></li><li><p>新增一个utlis包，存放封装的工具类，log类，yaml读取方法，jsonpath解析json方法，get_path获取项目绝对路径方法，pymysql连接mysql方法</p></li><li><p>新增test_case包，存放测试用例</p></li><li><p>新增result包，存放测试报告</p></li><li><p>新增logs包，存放日志文件</p></li><li><p>编写测试用例，慢慢完善测试框架，差什么补什么，</p></li><li><p>推到git仓库</p></li><li><p>集成至jenkins</p></li></ul></li><li><h4 id="测试框架搭建过程中，有没有遇到什么问题？举例说明"><a href="#测试框架搭建过程中，有没有遇到什么问题？举例说明" class="headerlink" title="测试框架搭建过程中，有没有遇到什么问题？举例说明"></a>测试框架搭建过程中，有没有遇到什么问题？举例说明</h4><ul><li>搭建UI自动化框架时，我是把driver初始化放在basepage，然后其他页面操作的方法都继承basepage，但是在第二条测试用例的时候会出现重复实例化的问题，然后产生多个浏览器，最后解决办法是在driver初始化的方法中添加形参base_driver=None，并加一个判断，当形参为空时做初始化driver的操作，当形参不为空时，base_driver直接赋值self.driver</li></ul></li><li><h4 id="pytest的前置与后置"><a href="#pytest的前置与后置" class="headerlink" title="pytest的前置与后置"></a>pytest的前置与后置</h4><ul><li><p>pytest.fixture(scope=)来指定作用域</p></li><li><p>或者直接写setup函数来指定作用域</p></li></ul></li><li><h4 id="pytest与unittest的区别"><a href="#pytest与unittest的区别" class="headerlink" title="pytest与unittest的区别"></a>pytest与unittest的区别</h4><ul><li><p>用例的前置：unittest使用setup/teardown来实现，作用于全部用例，pytest可以使用fixtrue来标识作用域也可以自定义</p></li><li><p>参数化：unittest必须通过ddt库来实现，pytest可以通过fixture或者pytest.mark.parametrize来实现</p></li><li><p>报告生成：unittest使用htmltestrun，pytest可以使用pytest-html、allure</p></li><li><p>总结：unittest支持插件少，兼容性差；pytest可以兼容unittest风格用例，插件丰富，用例编写格式简单，兼容性好</p></li></ul></li><li><h4 id="pytest参数化实现方法"><a href="#pytest参数化实现方法" class="headerlink" title="pytest参数化实现方法"></a>pytest参数化实现方法</h4><ul><li><p>@pytest.fixture()</p></li><li><p>@pytest.mark.parametrize()</p></li></ul></li><li><h4 id="pytest随机执行用例的命令"><a href="#pytest随机执行用例的命令" class="headerlink" title="pytest随机执行用例的命令"></a>pytest随机执行用例的命令</h4><ul><li>pytest-random-order 插件</li><li>执行命令pytest –random-order</li></ul></li><li><h4 id="UI自动化的轴定位"><a href="#UI自动化的轴定位" class="headerlink" title="UI自动化的轴定位"></a>UI自动化的轴定位</h4><ul><li>xpath父子关系，兄弟关系，孙子关系定位</li></ul></li><li><h4 id="接口脚本返回为null，如何排查问题"><a href="#接口脚本返回为null，如何排查问题" class="headerlink" title="接口脚本返回为null，如何排查问题"></a>接口脚本返回为null，如何排查问题</h4><ul><li>首先使用postman调试，如果postman调试也是返回null，那就需要去抓包分析一下</li><li>postman调试正常的情况下，要对比脚本与postman的请求url，请求方式，请求参数data，headers，cookies是否一致</li><li>完全一致的情况下，再查看代码逻辑是否有问题</li></ul></li><li><h4 id="自动化框架如何连接的数据库"><a href="#自动化框架如何连接的数据库" class="headerlink" title="自动化框架如何连接的数据库"></a>自动化框架如何连接的数据库</h4><ul><li>pymysql库</li></ul></li><li><h4 id="json与字典dict的区别"><a href="#json与字典dict的区别" class="headerlink" title="json与字典dict的区别"></a>json与字典dict的区别</h4><ul><li>dict为python的一种数据类型，而json为字符串</li><li>json的key是有序可重复的，dict的key不可重复</li><li>dict可以嵌套元组，而json里只有数组</li></ul></li></ol><h3 id="2、第二轮技术面-侧重管理"><a href="#2、第二轮技术面-侧重管理" class="headerlink" title="2、第二轮技术面(侧重管理)"></a>2、第二轮技术面(侧重管理)</h3><ol><li><h4 id="对敏捷开发的理解"><a href="#对敏捷开发的理解" class="headerlink" title="对敏捷开发的理解"></a>对敏捷开发的理解</h4></li><li><h4 id="如何管理的手下的测试人员"><a href="#如何管理的手下的测试人员" class="headerlink" title="如何管理的手下的测试人员"></a>如何管理的手下的测试人员</h4></li><li><h4 id="敏捷开发如何保证测试质量"><a href="#敏捷开发如何保证测试质量" class="headerlink" title="敏捷开发如何保证测试质量"></a>敏捷开发如何保证测试质量</h4><ul><li><p>开发增加单元测试覆盖、进行代码扫描</p></li><li><p>测试提前介入，进行接口测试</p></li><li><p>前后端联调完成后，需要进行P0测试</p></li><li><p>测试进行功能测试</p></li><li><p>上线完成后，准备做新功能的UI自动化</p></li></ul></li><li><h4 id="生产出现性能问题，测试环境无法重现，研发优化后，你该如何测试？"><a href="#生产出现性能问题，测试环境无法重现，研发优化后，你该如何测试？" class="headerlink" title="生产出现性能问题，测试环境无法重现，研发优化后，你该如何测试？"></a>生产出现性能问题，测试环境无法重现，研发优化后，你该如何测试？</h4><ul><li>首先跟研发进行沟通，确定问题出现的原因</li><li>通过在测试环境，模拟生产出现的场景，看能不能复现</li><li>可以复现的话则正常测试</li><li>不能复现则根据开发修改后的范围评估，进行测试</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac使用的tips</title>
      <link href="/2022/01/20/2022-1-20-Mac%E4%BD%BF%E7%94%A8%E7%9A%84tips/"/>
      <url>/2022/01/20/2022-1-20-Mac%E4%BD%BF%E7%94%A8%E7%9A%84tips/</url>
      
        <content type="html"><![CDATA[<h3 id="1、切换root用户"><a href="#1、切换root用户" class="headerlink" title="1、切换root用户"></a>1、切换root用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><h3 id="2、查看本机ip"><a href="#2、查看本机ip" class="headerlink" title="2、查看本机ip"></a>2、查看本机ip</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | grep &quot;inet&quot;</span><br></pre></td></tr></table></figure><h3 id="3、chromedriver存放路径"><a href="#3、chromedriver存放路径" class="headerlink" title="3、chromedriver存放路径"></a>3、chromedriver存放路径</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/</span><br></pre></td></tr></table></figure><h3 id="4、环境变量配置"><a href="#4、环境变量配置" class="headerlink" title="4、环境变量配置"></a>4、环境变量配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 打开文件，配置环境变量</span></span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 环境变量立即生效</span></span></span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python项目生成依赖文件清单</title>
      <link href="/2022/01/20/2022-1-20-python%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E4%BE%9D%E8%B5%96%E6%96%87%E4%BB%B6%E6%B8%85%E5%8D%95/"/>
      <url>/2022/01/20/2022-1-20-python%E9%A1%B9%E7%9B%AE%E7%94%9F%E6%88%90%E4%BE%9D%E8%B5%96%E6%96%87%E4%BB%B6%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h3 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipreqs</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前项目下使用</span></span><br><span class="line">pipreqs ./</span><br><span class="line"><span class="comment"># 上面命令不能用时，使用</span></span><br><span class="line">pipreqs ./ --encoding=utf-<span class="number">8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python项目结构树生成</title>
      <link href="/2022/01/20/2022-1-20-python%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E6%A0%91%E7%94%9F%E6%88%90/"/>
      <url>/2022/01/20/2022-1-20-python%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E6%A0%91%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h3 id="安装tree工具，"><a href="#安装tree工具，" class="headerlink" title="安装tree工具，"></a>安装tree工具，</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tree</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># n表示目录层级</span><br><span class="line">tree -L n</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试策略：自动化的思考</title>
      <link href="/2022/01/20/2022-1-20-%E6%B5%8B%E8%AF%95%E7%AD%96%E7%95%A5%EF%BC%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2022/01/20/2022-1-20-%E6%B5%8B%E8%AF%95%E7%AD%96%E7%95%A5%EF%BC%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<h3 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h3><p>概念：测试策略并不是通用的一个测试方案，而是根据项目实际情况来指定一个可行度比较高的测试流程，逐渐提升内部测试效率</p><ul><li>单元测试：研发保证，QA监督审计<ul><li>与研发同事沟通，增加代码扫描工具、完善单元测试覆盖率，优化代码提交流程，</li><li>比如新功能代码必须在分支上冒烟测试通过才能合到master，测试可以提供P0冒烟测试用例给到研发，减少新功能直接发布后基础功能都不完善导致的前期沟通成本</li></ul></li><li>集成测试：通过接口测试保证</li><li>系统测试：接口自动化测试</li><li>验收测试：UI自动化测试</li></ul><h3 id="参考下面的思考来制定公司的测试方案："><a href="#参考下面的思考来制定公司的测试方案：" class="headerlink" title="参考下面的思考来制定公司的测试方案："></a>参考下面的思考来制定公司的测试方案：</h3><h4 id="1、什么时候做自动化"><a href="#1、什么时候做自动化" class="headerlink" title="1、什么时候做自动化"></a>1、什么时候做自动化</h4><ul><li>项目有比较多的在线用户时，做自动化可以增强用户的体验</li><li>产品迭代速度十分的快，手工测试时间非常紧张</li><li>公司内部测试人员有自动化技术储备</li></ul><h4 id="2、什么时候做UI、什么时候做接口"><a href="#2、什么时候做UI、什么时候做接口" class="headerlink" title="2、什么时候做UI、什么时候做接口"></a>2、什么时候做UI、什么时候做接口</h4><ul><li>对数据准确性十分敏感的产品，可以考虑优先做接口自动化</li><li>对用户体验要求比较高的产品，则优先考虑做UI自动化，因为只有UI自动化才是真正能还原并模拟用户的实际操作</li></ul><h4 id="3、UI自动化有没有意义？耗时长，回报"><a href="#3、UI自动化有没有意义？耗时长，回报" class="headerlink" title="3、UI自动化有没有意义？耗时长，回报"></a>3、UI自动化有没有意义？耗时长，回报</h4><ul><li>对于一些用户体验要求十分高的产品，UI自动化是很有必要的，因为只有UI自动化才是真正能还原并模拟用户的实际操作</li></ul><h4 id="4、接口自动化是否需要全字段校验？"><a href="#4、接口自动化是否需要全字段校验？" class="headerlink" title="4、接口自动化是否需要全字段校验？"></a>4、接口自动化是否需要全字段校验？</h4><ul><li>如果项目人员配置足够，校验可以越详细越好，如果人员都不足，可以先保证接口正常功能的场景校验</li><li>如果为内部支付接口或者调用第三方api的接口，可以尽量做全字段校验，因为第三方接口自己公司是没办法把控的，如果第三方随意调整了响应数据，很有可能对项目造成很严重的问题</li><li>大部分情况来说，主要针对对业务流程有影响的字段做校验就可以了，不需要全字段做校验</li></ul>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEditor工具安装</title>
      <link href="/2022/01/16/2022-1-16-WEditor%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/"/>
      <url>/2022/01/16/2022-1-16-WEditor%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装uiautomator2</span></span><br><span class="line">pip install --pre -U uiautomator2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装weditor</span></span><br><span class="line">pip install weditor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化手机设备环境</span></span><br><span class="line">python -m uiautomator2 init <span class="comment"># 手机出现ATX小汽车app</span></span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m weditor</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>安装完weditor后，手机上自动安装的ATX软件会跟appium起冲突</li><li>运行appium时需要把ATX软件卸载</li></ul>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> appium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>appium自动化</title>
      <link href="/2022/01/16/2022-1-16-appium/"/>
      <url>/2022/01/16/2022-1-16-appium/</url>
      
        <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li><p>JDK</p></li><li><p>SDK</p></li><li><p>appium desktop</p></li><li><p>appium-python-client</p><p>安装方法：pip install appium-python-client</p></li><li><p>安卓模拟器/真机</p></li><li><p>appium server版</p></li></ul><h3 id="adb用例录制"><a href="#adb用例录制" class="headerlink" title="adb用例录制"></a>adb用例录制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前连接的设备</span><br><span class="line">adb devices</span><br><span class="line"># 安装应用</span><br><span class="line">adb shell install 包路径</span><br><span class="line"># 查看包名/页面名</span><br><span class="line">adb logcat|grep -i displayed</span><br><span class="line"># 获取当前界面元素</span><br><span class="line">adb shell dumpsys activity top</span><br><span class="line"># 启动应用</span><br><span class="line">adb shell am start -W -n 包名/页面名</span><br></pre></td></tr></table></figure><h3 id="元素定位-隐式等待"><a href="#元素定位-隐式等待" class="headerlink" title="元素定位/隐式等待"></a>元素定位/隐式等待</h3><h4 id="用例的组成"><a href="#用例的组成" class="headerlink" title="用例的组成"></a>用例的组成</h4><ul><li>导入依赖</li><li>capabilities设置</li><li>初始化driver</li><li>隐式等待，增加用例稳定</li><li>元素定位于操作。find+action</li><li>断言 assert</li></ul><h4 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h4><ul><li>id方式定位：find_element_by_id(resource-id)</li><li>accessibility_id方式定位：find_element_by_accessibility(content-desc)</li></ul><h4 id="等待方式"><a href="#等待方式" class="headerlink" title="等待方式"></a>等待方式</h4><ul><li>强制等待time.sleep()</li><li>隐式等待(全局等待)</li><li>显式等待(单个元素等待)</li></ul><h3 id="android基础知识"><a href="#android基础知识" class="headerlink" title="android基础知识"></a>android基础知识</h3><h4 id="android七大布局"><a href="#android七大布局" class="headerlink" title="android七大布局"></a>android七大布局</h4><ul><li>线性布局</li><li>相对布局</li><li>帧布局</li><li>绝对布局</li><li>表格布局</li><li>网格布局</li><li>约束布局</li></ul><h4 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h4><ul><li>activity：与用户交互的可视化界面</li><li>service：实现程序后台运行的解决方案</li><li>content provider：内容提供者，提供程序所需要的数据</li><li>broadcast receiver：广播接收器，坚挺外部事件的到来（比如来电）</li></ul><h4 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h4><ul><li>TextView：文本控件</li><li>EditText：可编辑文本控件</li><li>Button：按钮</li><li>ImageButton：图片按钮</li><li>ToggleButton：开关按钮</li><li>ImageView：图片控件</li><li>CheckBox：复选框控件</li><li>RadioButton：单选框控件</li></ul><p>​        注意点：android应用的层级结构与html不一样，是一个定制的xml</p><h4 id="定位方式"><a href="#定位方式" class="headerlink" title="定位方式"></a>定位方式</h4><ul><li>id定位</li><li>accessibility_id定位</li><li>xpath定位</li></ul><h4 id="定位工具"><a href="#定位工具" class="headerlink" title="定位工具"></a>定位工具</h4><p>​            android sdk自带工具：uiautomatorviewer</p><h3 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h3><h4 id="控件交互"><a href="#控件交互" class="headerlink" title="控件交互"></a>控件交互</h4><ul><li>.click() 点击</li><li>.send_keys() 输入</li><li>.set_value() 设置元素的值</li><li>.clear() 清除操作</li><li>.displayed() 是否可见</li><li>.is_enabled() 是否可用</li><li>.is_selected() 是否被选中</li><li>get_attribute(属性名) 获取属性值</li><li>.location 获取元素坐标</li><li>.size 获取元素尺寸</li></ul><h4 id="触控交互（TouochAction）"><a href="#触控交互（TouochAction）" class="headerlink" title="触控交互（TouochAction）"></a>触控交互（TouochAction）</h4><ul><li>self.driver.get_window_size()  获取设备尺寸</li><li>press()  点按，点按后必须有释放</li><li>move_to()  移动</li><li>release()  释放</li><li>perform()  执行，一切动作完后，需要跟上perform方法才能执行</li></ul><h3 id="高级定位技巧"><a href="#高级定位技巧" class="headerlink" title="高级定位技巧"></a>高级定位技巧</h3><h4 id="xpath定位进阶"><a href="#xpath定位进阶" class="headerlink" title="xpath定位进阶"></a>xpath定位进阶</h4><ul><li>父节点定位子节点</li><li>子节点定位父节点</li><li>子节点定位兄弟节点</li><li>爷爷节点定位孙子节点</li></ul><h4 id="uiautomator定位"><a href="#uiautomator定位" class="headerlink" title="uiautomator定位"></a>uiautomator定位</h4><ul><li>滚动查找</li><li>父子关系查找</li><li>兄弟关系查找</li></ul><h3 id="断言方法"><a href="#断言方法" class="headerlink" title="断言方法"></a>断言方法</h3><ul><li>assert</li><li>Hamcrest断言</li></ul>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> appium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口自动化</title>
      <link href="/2022/01/15/2021-12-17-%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2022/01/15/2021-12-17-%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="接口自动化框架介绍"><a href="#接口自动化框架介绍" class="headerlink" title="接口自动化框架介绍"></a>接口自动化框架介绍</h3><ul><li>python-requests：实现python调用http请求</li><li>allure：生成测试报告</li><li>pytest：测试用例框架</li></ul><h3 id="接口用例编写"><a href="#接口用例编写" class="headerlink" title="接口用例编写"></a>接口用例编写</h3><h5 id="基本api功能测试"><a href="#基本api功能测试" class="headerlink" title="基本api功能测试"></a>基本api功能测试</h5><ul><li>冒烟用例</li><li>正向流程覆盖</li></ul><h5 id="基于输入域的测试"><a href="#基于输入域的测试" class="headerlink" title="基于输入域的测试"></a>基于输入域的测试</h5><ul><li>边界值</li><li>特殊字符</li><li>必填参数</li><li>接口幂等：多次发起同样的操作，结果需要是不同的</li><li>组合参数校验</li><li>参数类型校验</li></ul><h5 id="线程安全测试"><a href="#线程安全测试" class="headerlink" title="线程安全测试"></a>线程安全测试</h5><ul><li>并发测试</li><li>分布式测试</li><li>数据库读写安全测试</li></ul><h3 id="接口PO封装思想"><a href="#接口PO封装思想" class="headerlink" title="接口PO封装思想"></a>接口PO封装思想</h3><ul><li>用例之间不应该有依赖，需要都能单独执行</li><li>base_api：完成测试框架中工具的封装，requests、jsonpath等</li><li>api：实现对每个接口的描述，与业务无关，只单纯描述接口</li><li>test_case：组合业务逻辑，单个界面的字段校验，断言</li></ul><h3 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h3><h5 id="jsonshema"><a href="#jsonshema" class="headerlink" title="jsonshema"></a>jsonshema</h5><blockquote><p>把上一次接口响应数据生成一个jsonschema数据，第二次校验时会拿到最新的响应数据与这个jsonschema做比对，比较数据结构，字段类型有没有发生变化</p></blockquote><h6 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h6><ul><li><p>导入genson库，将json数据存放为jsonschema数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> genson <span class="keyword">import</span> SchemaBuilder</span><br><span class="line"><span class="keyword">from</span> jsonschema <span class="keyword">import</span> validate, ValidationError, SchemaError</span><br><span class="line"><span class="keyword">from</span> we_work_api.utils.logger <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_genson</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将json数据生成jsonschema文件</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 实例化SchemaBuilder</span></span><br><span class="line">    builder = SchemaBuilder()</span><br><span class="line">    <span class="comment"># 添加一些符合的json数据</span></span><br><span class="line">    <span class="comment"># a可以为int和str,b为str,c为str,d为null,abc为必须返回的字段   </span></span><br><span class="line">        builder.add_object(&#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;b&quot;</span>:<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;c&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;d&quot;</span>:<span class="literal">None</span>&#125;)</span><br><span class="line">    builder.add_object(&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>,<span class="string">&quot;b&quot;</span>:<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;c&quot;</span>:<span class="string">&quot;1&quot;</span>,&#125;)</span><br><span class="line">    <span class="comment"># 将jsonschema数据存放至文件中</span></span><br><span class="line">    json.dump(builder.to_schema(),<span class="built_in">open</span>(<span class="string">&quot;dome_schema.json&quot;</span>,<span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure></li><li><p>导入jsonschema.validate方法，并封装schema_validate对比方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">schema_validate</span>(<span class="params">obj,schema</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    封装schema对比方法</span></span><br><span class="line"><span class="string">    :param obj: 当前获取数据</span></span><br><span class="line"><span class="string">    :param schema: 本地schema数据</span></span><br><span class="line"><span class="string">    :return: True/False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 尝试去对比数据</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        validate(instance=obj,schema=schema)</span><br><span class="line">    <span class="comment"># 抓取schema内置错误</span></span><br><span class="line">    <span class="keyword">except</span> ValidationError <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;验证json_schema失败，失败位置为<span class="subst">&#123;e.path&#125;</span>，失败原因为<span class="subst">&#123;e.message&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> SchemaError <span class="keyword">as</span> e:</span><br><span class="line">        logger.error(<span class="string">f&quot;验证json_schema失败，失败位置为<span class="subst">&#123;e.path&#125;</span>，失败原因为<span class="subst">&#123;e.message&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 如果未发生错误，则验证成功</span></span><br><span class="line">        logger.info(<span class="string">&quot;验证成功&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li><li><p>使用schema_validate方法进行测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_schema</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1.使用封装的schema比对方法进行测试</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 打开jsonschema文件流</span></span><br><span class="line">    _schema = json.load(<span class="built_in">open</span>(<span class="string">&quot;dome_schema.json&quot;</span>,<span class="string">&quot;r&quot;</span>))</span><br><span class="line">    <span class="comment"># 使用数据跟schema数据作对比</span></span><br><span class="line">    <span class="keyword">assert</span> schema_validate(&#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>,<span class="string">&quot;b&quot;</span>:<span class="string">&quot;111&quot;</span>&#125;,_schema)</span><br></pre></td></tr></table></figure></li></ul><h5 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sql</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.database = &#123;<span class="string">&quot;host&quot;</span>:<span class="string">&quot;rm-wz98kz68757yf5k2i2o.mysql.rds.aliyuncs.com&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;port&quot;</span>:<span class="number">3306</span>,</span><br><span class="line">                         <span class="string">&quot;database&quot;</span>:<span class="string">&quot;bbc20201120&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;user&quot;</span>:<span class="string">&quot;ec_admin&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;passwd&quot;</span>:<span class="string">&quot;ec_admin@123&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute_sql</span>(<span class="params">self,sql</span>):</span></span><br><span class="line">        <span class="comment"># 创建连接</span></span><br><span class="line">        self.conne = pymysql.connect(host=self.database[<span class="string">&quot;host&quot;</span>],</span><br><span class="line">                                     user=self.database[<span class="string">&quot;user&quot;</span>],</span><br><span class="line">                                     password=self.database[<span class="string">&quot;passwd&quot;</span>],</span><br><span class="line">                                     db=self.database[<span class="string">&quot;database&quot;</span>],)</span><br><span class="line">        <span class="comment"># 创建游标</span></span><br><span class="line">        self.cursor = self.conne.cursor()</span><br><span class="line">        <span class="comment"># 执行sql语句</span></span><br><span class="line">        self.cursor.execute(sql)</span><br><span class="line">        <span class="comment"># 接收数据</span></span><br><span class="line">        res = self.cursor.fetchall()</span><br><span class="line">        <span class="comment"># 关闭游标</span></span><br><span class="line">        self.cursor.close()</span><br><span class="line">        <span class="comment"># 关闭连接</span></span><br><span class="line">        self.conne.close()</span><br><span class="line">        <span class="comment"># 返回查询数据</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sql = Sql()</span><br><span class="line">    <span class="built_in">print</span>(sql.execute_sql(<span class="string">&quot;select * from bbc20201120.tounicktaxpower_order where mobile = &#x27;15000000000&#x27;;&quot;</span>))</span><br></pre></td></tr></table></figure><h5 id="session接口共享token"><a href="#session接口共享token" class="headerlink" title="session接口共享token"></a>session接口共享token</h5><ul><li>使用requests.Session()方式发起请求</li></ul><h5 id="多线程-多进程"><a href="#多线程-多进程" class="headerlink" title="多线程/多进程"></a>多线程/多进程</h5><ul><li>多线程执行测试用例：pytest-xdist库，-n参数指定几个cpu来运行</li><li>pytest-parallel库</li></ul>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins持续集成</title>
      <link href="/2022/01/15/2022-1-15-jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
      <url>/2022/01/15/2022-1-15-jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h4 id="CI持续集成基础"><a href="#CI持续集成基础" class="headerlink" title="CI持续集成基础"></a>CI持续集成基础</h4><blockquote><p>相比传统的瀑布流，持续集成可以频繁多次的将代码提交至主干</p></blockquote><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>每完成一个功能更新，就集成至对应分支，可以快速发现错误，更早的定位问题</li><li>防止分支大幅度偏离主干，经常不集成，分支又在不断更新，再集成时难度会变大</li></ul><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>1、docker方式安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取jenkins镜像文件</span></span><br><span class="line">docker pull jenkins/jenkins:lts</span><br><span class="line"><span class="comment"># 创建一个文件名为jenkins_home的docker映射文件卷</span></span><br><span class="line">docker volume create jenkins_home</span><br><span class="line"><span class="comment"># 启动jenkins并指定端口，映射关系</span></span><br><span class="line">docker run -d --name jenkins -p 10240:8080 -p 10241:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts</span><br><span class="line"><span class="comment"># 查看启动日志</span></span><br><span class="line">docker logs -f 容器id</span><br><span class="line"><span class="comment"># 查看文件卷具体路径</span></span><br><span class="line">docker inspect jenkins_home</span><br></pre></td></tr></table></figure><p>2、nginx，tomcat方式安装</p><ul><li>下载jenkins.war</li></ul><h5 id="job机制"><a href="#job机制" class="headerlink" title="job机制"></a>job机制</h5><h5 id="节点管理"><a href="#节点管理" class="headerlink" title="节点管理"></a>节点管理</h5><ul><li>一个master管理多个slave，可指定由某个节点执行job</li></ul><h5 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h5><ul><li>安全矩阵</li><li>项目矩阵</li></ul><h5 id="报警机制（邮箱提醒）"><a href="#报警机制（邮箱提醒）" class="headerlink" title="报警机制（邮箱提醒）"></a>报警机制（邮箱提醒）</h5><p>1、配置</p><ul><li><p>系统管理-配置邮件通知</p></li><li><p>测试邮箱通知</p></li></ul><p>2、使用</p><ul><li><p>Extended E-mail Notification，配置邮件模板</p></li><li><p>模板也需要配置邮箱授权码</p></li><li><p>job中配置构建后操作-邮箱通知</p></li></ul><h5 id="job的父子关系"><a href="#job的父子关系" class="headerlink" title="job的父子关系"></a>job的父子关系</h5><h5 id="踩坑问题"><a href="#踩坑问题" class="headerlink" title="踩坑问题"></a>踩坑问题</h5><p>1、执行自动化任务job时，总是提示python命令找不到？</p><ul><li><p>排查：1、找不到python环境，在容器内去部署python环境</p></li><li><p>排查：2、将宿主机的python环境映射到容器内</p></li><li><p>最终解决：将宿主机配置成为一个节点，job使用节点去执行</p></li></ul><p>2、执行pip install -r xxx提示安装库失败</p><ul><li>解决：pip版本出现问题，重新安装python环境</li></ul><p>3、配置allure时提示： unrecognized arguments: –alluredir</p><ul><li>解决：本地未安装allure-pytest库</li></ul><p>4、直接运行pytest命令，提示找不到模块</p><ul><li>解决：引入模块时没有从项目根目录开始</li></ul><p>5、allure配置好后，提示java代码错误，无法生成报告</p><ul><li><p><img src="https://api2.mubu.com/v3/document_image/ea4df0b6-1d29-45a5-b99e-c5000d1aa652-13730468.jpg" alt="img"></p></li><li><p>执行的节点上需要安装allure-commandline环境</p></li><li><p>需要配置jenkins全局变量allure-commandline、java_home</p></li></ul><p>6、环境变量配置的问题</p><ul><li><p>1、可以在执行shell时，指定环境变量文件</p></li><li><p>2、在节点配置需要的环境变量</p></li><li><p>3、全局变量设置环境变量</p></li><li><p>想要在jenkins上执行的命令，必须在对应的slave节点上本身就可以执行，jenkins才能跑起来</p></li></ul><h4 id="jenkins持续集成实际运用"><a href="#jenkins持续集成实际运用" class="headerlink" title="jenkins持续集成实际运用"></a>jenkins持续集成实际运用</h4><h5 id="1、接口自动化集成"><a href="#1、接口自动化集成" class="headerlink" title="1、接口自动化集成"></a>1、接口自动化集成</h5><ul><li><p>新增执行节点</p><ul><li><p>设置执行核心数</p></li><li><p>选择工作目录</p></li><li><p>ssh连接方式</p></li></ul></li><li><p>节点环境准备</p><ul><li><p>python</p></li><li><p>git</p></li><li><p>jdk</p></li><li><p>allure-commandline</p></li></ul></li><li><p>jenkins环境准备</p><ul><li><p>下载插件git、allure</p></li><li><p>配置环境变量</p></li></ul></li><li><p>源码地址</p><ul><li>github、gitee…</li></ul></li><li><p>配置job</p><ul><li><p>选择执行节点</p></li><li><p>源码拉取-检出到子目录</p></li><li><p>shell命令配置</p></li><li><p>allure报告配置</p></li><li><p>报告path需要从根目录开始</p></li></ul></li></ul><h5 id="2、接口压力自动化集成"><a href="#2、接口压力自动化集成" class="headerlink" title="2、接口压力自动化集成"></a>2、接口压力自动化集成</h5><ul><li><p>jmeter压力测试脚本文件jmx</p></li><li><p>运行jmx文件的sh脚本</p></li><li><p>关闭jmeter对报告js渲染的限制</p><ul><li><p>jenkins下载插件HTML Publisher插件</p></li><li><p>System.setProperty(“hudson.model.DirectoryBrowserSupport.CSP”,””)</p></li></ul></li><li><p>配置HTML reports</p></li></ul><h5 id="3、webUI自动化集成"><a href="#3、webUI自动化集成" class="headerlink" title="3、webUI自动化集成"></a>3、webUI自动化集成</h5><ul><li><p>节点机slave需要安装chrome、chromedriver，且版本需要对应</p></li><li><p>driver需要指定为无界面模式运行，示例代码</p><ul><li><p>chrome_options = Options()</p></li><li><p>chrome_options.add_argument(“–headless”)</p></li><li><p>chrome_options.add_argument(“–no-sandbox”)</p></li><li><p>self.driver=webdriver.Chrome(executable_path=”机器上chromedriver存放位置”,options=chrome_options)</p></li></ul></li><li><p>注意代码读取数据的路径，是否为相对路径，相对路径需要cd到对应的目录去执行用力了</p></li><li><p>其他配置与接口自动化类似</p></li><li><p>slenium-hub的兼容</p></li></ul><h5 id="4、appUI自动化集成"><a href="#4、appUI自动化集成" class="headerlink" title="4、appUI自动化集成"></a>4、appUI自动化集成</h5><ul><li><p>将连接真机或者模拟器的pc作为slave节点</p><ul><li>添加本机mac为节点时，由于jenkins部署在云服务器，与本机不在同一个网络环境，需要做内网映射</li></ul></li><li><p>配置环境变量</p><ul><li><p>allure生成失败，找不到allure-commandline</p></li><li><p>需要配置jenkins全局变量allure-commandline、java_home，每个执行节点都需要配置，取不同名字标识，jenkins会自动读取</p></li></ul></li><li><p>打开节点上的appium服务</p></li><li><p>git拉取代码</p></li><li><p>执行用例</p><ul><li><p>pip、pytest命令找不到</p></li><li><p>由于系统有两个python版本，直接输入pip，pytest找不到命令，需要使用pip3，python3 -m pytest执行</p></li></ul></li><li><p>生成allure</p></li></ul><h5 id="5、持续集成体系建设"><a href="#5、持续集成体系建设" class="headerlink" title="5、持续集成体系建设"></a>5、持续集成体系建设</h5><ul><li><p>拉取app应用代码，打包出apk文件</p></li><li><p>拉取测试代码</p></li><li><p>判断是否存在app，卸载app</p></li><li><p>安装app</p></li><li><p>冒烟测试</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 持续集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux与bash脚本</title>
      <link href="/2022/01/15/2022-1-15-linux%E4%B8%8Ebash%E8%84%9A%E6%9C%AC/"/>
      <url>/2022/01/15/2022-1-15-linux%E4%B8%8Ebash%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看进程</span></span><br><span class="line">ps aux</span><br><span class="line">ps -ef</span><br><span class="line"><span class="comment"># 实时查看进程</span></span><br><span class="line">top</span><br><span class="line"><span class="comment"># 筛选查看进程</span></span><br><span class="line">ps aux|grep</span><br><span class="line">ps -ef|grep</span><br><span class="line"><span class="comment"># 查看对应用户的进程</span></span><br><span class="line">ps -u 用户名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看线程</span></span><br><span class="line">ps au -m</span><br><span class="line"><span class="comment"># 筛选需要展示的线程字段</span></span><br><span class="line">ps -o pid,ppid,<span class="built_in">stat</span>,cmd -m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂起当前进程</span></span><br><span class="line">ctrl+z</span><br><span class="line"><span class="comment"># 管理进程 查看后台运行的进程</span></span><br><span class="line"><span class="built_in">jobs</span></span><br><span class="line"><span class="comment"># 重新运行后台的进程</span></span><br><span class="line"><span class="built_in">bg</span></span><br><span class="line"><span class="comment"># 将在后台的进程切换至前台</span></span><br><span class="line"><span class="built_in">fg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死进程（杀掉子进程后，子进程变成z状态（僵尸状态），杀掉父进程，全部进程终止）</span></span><br><span class="line"><span class="built_in">kill</span> -9 pid</span><br></pre></td></tr></table></figure><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换目录</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="comment"># 查看目录下的文件</span></span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 打印当前路径位置</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># 复制</span></span><br><span class="line">cp </span><br><span class="line"><span class="comment"># 将目录下的文件复制到另一个目录</span></span><br><span class="line">cp -r dir1 dir2</span><br><span class="line"><span class="comment"># 移动</span></span><br><span class="line">mv</span><br><span class="line"><span class="comment"># 查看路径下的隐藏文件</span></span><br><span class="line">ls -a</span><br><span class="line"><span class="comment"># 删除目录</span></span><br><span class="line">rm -r</span><br><span class="line"><span class="comment"># 建立软链接</span></span><br><span class="line">ln -s 源文件 软链接位置</span><br><span class="line"><span class="comment"># 搜索文件</span></span><br><span class="line">find 目录 -name 文件名</span><br><span class="line"><span class="comment"># 查看文件内容</span></span><br><span class="line">cat   <span class="comment"># 查看体量较小文件</span></span><br><span class="line">less、more <span class="comment"># 分页查看，空格下一页 b上一页 回车下一页</span></span><br><span class="line">head -n <span class="comment"># 取文件前x行查看</span></span><br><span class="line">tail -n <span class="comment"># 取文件后x行查看</span></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">tar -zcvf name files</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xf 文件名</span><br><span class="line"><span class="comment"># 指定解压至目标路径</span></span><br><span class="line">tar -xf 文件名 -C 指定路径</span><br></pre></td></tr></table></figure><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi编辑器</span></span><br><span class="line"><span class="comment"># 命令行模式</span></span><br><span class="line">gg    <span class="comment"># 移动光标至第一行</span></span><br><span class="line">G     <span class="comment"># 移动光标至最后一行</span></span><br><span class="line">yy    <span class="comment"># 复制光标所在行</span></span><br><span class="line">dd    <span class="comment"># 剪切光标所在行</span></span><br><span class="line">p     <span class="comment"># 粘贴</span></span><br><span class="line">x     <span class="comment"># 删除光标所在字符</span></span><br><span class="line">X     <span class="comment"># 删除光标所在的前一个字符</span></span><br><span class="line"><span class="comment"># 底行模式</span></span><br><span class="line">:q    <span class="comment"># 不保存修改退出</span></span><br><span class="line">:wq   <span class="comment"># 保存修改并退出</span></span><br><span class="line">:wq!  <span class="comment"># 强制保存修改并退出</span></span><br><span class="line"><span class="comment"># 编辑模式</span></span><br><span class="line">i     <span class="comment"># 进入编辑模式</span></span><br><span class="line">esc   <span class="comment"># 退出编辑模式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># echo输出重定向</span></span><br><span class="line"><span class="built_in">echo</span> ’hello world‘ &gt; test.log   <span class="comment"># 将打印信息输出至test.log</span></span><br></pre></td></tr></table></figure><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置文件全部权限</span></span><br><span class="line">chmod 777 文件名</span><br><span class="line"><span class="comment"># 设置文件为没有权限</span></span><br><span class="line">chmod 0 文件名</span><br></pre></td></tr></table></figure><h4 id="文件权限标识"><a href="#文件权限标识" class="headerlink" title="文件权限标识"></a>文件权限标识</h4><ul><li>r：读权限，代表数字4</li><li>w：写权限，代表数字2</li><li>x：执行权限，代表数字1</li></ul><h3 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看网卡信息</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="comment"># 测试网络连通性</span></span><br><span class="line">ping ip</span><br><span class="line">ping -c 3 -i 5 ip  <span class="comment"># ping3次，每次间隔5秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行出全部端口</span></span><br><span class="line">netstat -a</span><br><span class="line"><span class="comment"># 行出所以tcp端口</span></span><br><span class="line">netstat -at</span><br><span class="line"><span class="comment"># 筛选某个端口</span></span><br><span class="line">lsof -i:端口号</span><br></pre></td></tr></table></figure><h3 id="性能命令"><a href="#性能命令" class="headerlink" title="性能命令"></a>性能命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看cpu信息</span></span><br><span class="line">cat /proc/cpuinfo</span><br><span class="line"><span class="comment"># 查看内存使用情况</span></span><br><span class="line">free -h</span><br><span class="line"><span class="comment"># 清理缓存，先执行sync的命令，在执行</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"><span class="comment"># 查看磁盘使用情况</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><h3 id="IO相关"><a href="#IO相关" class="headerlink" title="IO相关"></a>IO相关</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试数据读写io</span></span><br><span class="line">dd <span class="keyword">if</span>=/dev/zero bs=1024 count=4096000 of=test.iso   <span class="comment"># 测试写</span></span><br><span class="line">dd <span class="keyword">if</span>=test.iso bs=64k |dd of=/dev/null   <span class="comment"># 测试读</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># iostat工具，需要安装yum install sysstat才能使用</span></span><br><span class="line">iostat -m 3  <span class="comment"># 格式化单位为mb，隔间3秒刷新</span></span><br><span class="line">iostat -c    <span class="comment"># 只看cpu</span></span><br><span class="line">iostat -d    <span class="comment"># 只看硬盘</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络io工具</span></span><br><span class="line">iftop</span><br></pre></td></tr></table></figure><h3 id="统计与排序"><a href="#统计与排序" class="headerlink" title="统计与排序"></a>统计与排序</h3><h4 id="排序sort"><a href="#排序sort" class="headerlink" title="排序sort"></a>排序sort</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认每行对应索引字符排序</span></span><br><span class="line">cat filename|sort</span><br><span class="line"><span class="comment"># 忽略开头的空白字符</span></span><br><span class="line">cat filename|sort -b</span><br><span class="line"><span class="comment"># 将小写字母看作大写排序</span></span><br><span class="line">cat filename|sort -f</span><br><span class="line"><span class="comment"># 按照存储容量大小来排序</span></span><br><span class="line">cat filename|sort -h</span><br><span class="line"><span class="comment"># 将排序结果反装</span></span><br><span class="line">cat filename|sort -r</span><br><span class="line"><span class="comment"># 安装数字大小排序</span></span><br><span class="line">cat filename|sort -n</span><br><span class="line"><span class="comment"># 将排序的结果存储到指定文件中</span></span><br><span class="line">cat filename|sort -n -o 文件名</span><br><span class="line"><span class="comment"># -t指定分割符，-k指定需要排序的行</span></span><br><span class="line">cat filename|sort -t: -k 2</span><br><span class="line"><span class="comment"># 对版本信息进行排序</span></span><br><span class="line">cat filename|sort -V</span><br></pre></td></tr></table></figure><h4 id="去重uniq"><a href="#去重uniq" class="headerlink" title="去重uniq"></a>去重uniq</h4><ul><li>uniq只会检查上下的重复，所有要先进行排序，让重复内容都排序在一起，然后再做去重</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先查看文件，然后使用sort对第三行进行排序，在使用uniq对第三行统计出现次数并去重，再使用sort进行数字排序并倒序</span></span><br><span class="line">cat uniq_demo.txt |sort -k 3|uniq -f2 -c -d|sort -nr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计出现次数</span></span><br><span class="line">uniq -c</span><br><span class="line"><span class="comment"># 去重，重复次数要&gt;=2</span></span><br><span class="line">uniq -d</span><br><span class="line"><span class="comment"># 跳过对前n行的比较，分隔符默认为空格</span></span><br><span class="line">uniq -f</span><br><span class="line"><span class="comment"># 跳过前n个字符的比较</span></span><br><span class="line">uniq -s</span><br><span class="line"><span class="comment"># 支队前n个字符比较</span></span><br><span class="line">uniq -w</span><br></pre></td></tr></table></figure><h4 id="字符统计wc"><a href="#字符统计wc" class="headerlink" title="字符统计wc"></a>字符统计wc</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认展示文件行数，词数，字符数</span></span><br><span class="line">wc</span><br><span class="line"><span class="comment"># 行数</span></span><br><span class="line">wc -l</span><br><span class="line"><span class="comment"># 字符数</span></span><br><span class="line">wc -c</span><br><span class="line"><span class="comment"># 词数</span></span><br><span class="line">wc -w</span><br><span class="line"><span class="comment"># 最长的一行字符数</span></span><br><span class="line">wc -L</span><br></pre></td></tr></table></figure><h3 id="三剑客"><a href="#三剑客" class="headerlink" title="三剑客"></a>三剑客</h3><h4 id="grep（查找）"><a href="#grep（查找）" class="headerlink" title="grep（查找）"></a>grep（查找）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示包含参数的行</span></span><br><span class="line">grep 参数 文件名</span><br><span class="line"><span class="comment"># 显示以参数开头的行</span></span><br><span class="line">grep ^参数 文件名</span><br><span class="line"><span class="comment"># 显示以参数结尾的行</span></span><br><span class="line">grep 参数$ 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示我需要的内容</span></span><br><span class="line">grep -o 参数 文件名</span><br><span class="line"><span class="comment"># 显示匹配的下一行</span></span><br><span class="line">grep -A1 参数 文件名</span><br><span class="line"><span class="comment"># 显示匹配的上一行</span></span><br><span class="line">grep -B1 参数 文件名</span><br><span class="line"><span class="comment"># 显示匹配的上下各一行</span></span><br><span class="line">grep -C1 参数 文件名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件检索</span></span><br><span class="line"><span class="comment"># 递归搜索</span></span><br><span class="line">grep 文件名 -r 绝对路径</span><br><span class="line"><span class="comment"># 只暂时文件名，不展示具体路径</span></span><br><span class="line">grep -h 文件名 -r 绝对路径</span><br><span class="line"><span class="comment"># 查找包含参数的文件</span></span><br><span class="line">grep -l 文件名 -r 绝对路径</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关约束</span></span><br><span class="line">grep -i    <span class="comment"># 忽略大小写</span></span><br><span class="line">grep -v    <span class="comment"># 显示匹配内容除外的行</span></span><br><span class="line">grep -E    <span class="comment"># 使用扩展正则表达式</span></span><br><span class="line"><span class="comment"># 搜索参数1时，使用--include排除参数2的文件或目录条件</span></span><br><span class="line">grep -l 参数1 -r 绝对路径 --include 参数2</span><br></pre></td></tr></table></figure><h4 id="awk（匹配）"><a href="#awk（匹配）" class="headerlink" title="awk（匹配）"></a>awk（匹配）</h4><h5 id="awk中的内置变量"><a href="#awk中的内置变量" class="headerlink" title="awk中的内置变量"></a>awk中的内置变量</h5><ul><li>NR：行数</li><li>NF：列数</li><li>FS：输入分隔符</li><li>OFS：输出分隔符</li><li>RS：记录输入换行符</li><li>ORS：记录输出换行符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印文件内容</span></span><br><span class="line"><span class="comment"># 注意 ：$1这种内置变量的外侧不能加入双引号，否则$1会被当做文本输出</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print&#125;&#x27;</span> filename</span><br><span class="line">awk <span class="string">&#x27;&#123;print $0&#125;&#x27;</span> filename </span><br><span class="line"><span class="comment"># 打印内容中的第2和5行</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print $2,$5&#125;&#x27;</span> filename </span><br><span class="line"><span class="comment"># 打印最后一行</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span> filename </span><br><span class="line"><span class="comment"># 打印倒数第二行</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print $NF-1&#125;&#x27;</span> filename </span><br><span class="line"><span class="comment"># 打印时拼接字符串</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print “test1:”$2&#125;&#x27;</span> filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># BNGIN模式（处理文本之前需要执行的操作）</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;print &quot;行1&quot;,&quot;行2&quot;&#125;&#123;print $1,$2&#125;&#x27;</span> filename</span><br><span class="line"><span class="comment"># END模式（处理文本之后执行的操作）</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;print &quot;行1&quot;,&quot;行2&quot;&#125;&#123;print $1,$2&#125;END&#123;print &quot;总1&quot;,&quot;总2&quot;&#125;&#x27;</span> filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定,为输入分隔符,打印第2行（可指定多个分隔符用|隔开）</span></span><br><span class="line">awk -F, <span class="string">&#x27;&#123;print$2&#125;&#x27;</span> filename</span><br><span class="line"><span class="comment"># 指定分隔符,查询第1行和第三行，输出时添加&gt;&gt;&gt;&gt;&gt;&gt;为分隔符</span></span><br><span class="line">awk -F, -v OFS=<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> <span class="string">&#x27;&#123;print $1,$3&#125;&#x27;</span> filename</span><br><span class="line"><span class="comment"># 计算文件中第2行的平均值</span></span><br><span class="line">awk <span class="string">&#x27;BEGIN&#123;init=0;FS=&quot;,&quot;&#125;&#123;init+=$2&#125;END&#123;print init/NR&#125;&#x27;</span> filename</span><br></pre></td></tr></table></figure><h4 id="sed（编辑）"><a href="#sed（编辑）" class="headerlink" title="sed（编辑）"></a>sed（编辑）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印第二列</span></span><br><span class="line">sed -n 2p filename</span><br><span class="line"><span class="comment"># 删除第二列</span></span><br><span class="line">sed 2d filename</span><br><span class="line"><span class="comment"># 删除最后一行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件第四行后面加上newline</span></span><br><span class="line">sed -e <span class="string">&#x27;4 a newline&#x27;</span> 文件名</span><br><span class="line"><span class="comment"># 在文件第四行前面加上newline</span></span><br><span class="line">sed -e <span class="string">&#x27;4 a newline&#x27;</span> 文件名</span><br><span class="line"><span class="comment"># 将文件第四行替换为newline</span></span><br><span class="line">sed -e <span class="string">&#x27;4 c newline&#x27;</span> 文件名</span><br><span class="line"></span><br><span class="line">sed <span class="variable">$d</span></span><br><span class="line"><span class="comment"># 替换内容</span></span><br><span class="line">sed <span class="string">&#x27;s/查找关键词/替换为/&#x27;</span> filename</span><br><span class="line"><span class="comment"># 在关键词前后添加内容</span></span><br><span class="line">sed <span class="string">&#x27;s/查找关键词/前&amp;后/g&#x27;</span> filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配到1-3的3个元素，然后使用反斜杠\反向引用</span></span><br><span class="line"><span class="built_in">echo</span> 6 7 1 2 3 |sed -E <span class="string">&#x27;s#([1-3]) ([1-3]) ([1-3])#\3 \2 \1#&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口测试基础</title>
      <link href="/2022/01/15/2022-1-15-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/01/15/2022-1-15-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="get与post"><a href="#get与post" class="headerlink" title="get与post"></a>get与post</h4><ul><li>get是向服务端请求数据，post则是向服务端提交数据</li><li>get请求的url中传送的参数是有长度限制的，而post没有限制</li><li>post比get要安全，因为get请求参数直接暴露在url上，而post在body中</li></ul><h4 id="cookie、session与token"><a href="#cookie、session与token" class="headerlink" title="cookie、session与token"></a>cookie、session与token</h4><ul><li>cookie：浏览器接受服务器的set-cookie指令，并把cookie保存在电脑上，每个网站保存的cookie只作用于自己的网站</li><li>session：数据存储在服务端，只把关联数据的一个加密串放在cookie中标记</li><li>token：用户请求时附带的请求字段，用于验证身份与权限</li></ul><h4 id="常见的错误码"><a href="#常见的错误码" class="headerlink" title="常见的错误码"></a>常见的错误码</h4><ul><li>200：请求成功</li><li>301：重定向</li><li>404：请求资源不存在</li><li>500：服务端错误</li></ul><h4 id="协议代理工具"><a href="#协议代理工具" class="headerlink" title="协议代理工具"></a>协议代理工具</h4><h5 id="postman主要功能"><a href="#postman主要功能" class="headerlink" title="postman主要功能"></a>postman主要功能</h5><ul><li><p>设置cookie</p></li><li><p>接口断言</p></li><li><p>参数之间的传递</p></li><li><p>数据驱动</p></li><li><p>设置变量</p></li></ul><h5 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h5><ul><li>将请求真实的还原出来</li><li>自带认证信息，脱离浏览器直接执行</li><li>方便重新执行，修改调试参数，修改脚本</li></ul><h6 id="curl相关命令参数：https-ceshiren-com-t-topic-1065"><a href="#curl相关命令参数：https-ceshiren-com-t-topic-1065" class="headerlink" title="curl相关命令参数：https://ceshiren.com/t/topic/1065"></a>curl相关命令参数：<a href="https://ceshiren.com/t/topic/1065">https://ceshiren.com/t/topic/1065</a></h6><h5 id="mitmproxy"><a href="#mitmproxy" class="headerlink" title="mitmproxy"></a>mitmproxy</h5><h6 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install mitmproxy==5.2.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">mitmproxy --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定端口8999启动</span></span><br><span class="line"><span class="comment"># 本机wifi设置中勾线代理，并开启http、https代理指定8999端口</span></span><br><span class="line">mitmproxy -p 8999 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器输入mitm.it，安装证书，安装完成后设置始终信任证书</span></span><br></pre></td></tr></table></figure><h6 id="mitmproxy-mock实战"><a href="#mitmproxy-mock实战" class="headerlink" title="mitmproxy mock实战"></a>mitmproxy mock实战</h6><blockquote><p>主要包含三大组件：mitmproxy、mitmweb、mitmdump</p></blockquote><ul><li>实现maplocal</li><li>实现rewrite</li></ul><h5 id="charles"><a href="#charles" class="headerlink" title="charles"></a>charles</h5><h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><ul><li>抓包端口确认，打开proxy settings，查看端口</li></ul><p><img src="https://s2.loli.net/2022/01/15/X9CpITVWoSOuPUY.png" alt="image-20220115134037925"></p><ul><li>本地证书安装，始终信任</li></ul><p><img src="https://s2.loli.net/2022/01/15/91Dm4UwcdN3K6yb.png" alt="image-20220115134123246"></p><ul><li>charles ssl proxying settings 设置https端口号443</li></ul><p><img src="https://s2.loli.net/2022/01/15/XPu5kodcfAmJR6s.png" alt="image-20220115134207103"></p><h6 id="移动端配置"><a href="#移动端配置" class="headerlink" title="移动端配置"></a>移动端配置</h6><ul><li>统一wifi下，修改wifi设置，添加代理服务器</li><li>浏览器输入chls.pro/ssl，安装证书</li><li>charles弹窗点击allow</li></ul><h6 id="移动端注意"><a href="#移动端注意" class="headerlink" title="移动端注意"></a>移动端注意</h6><ul><li>安卓6.0以上，不支持证书安装</li><li>IOS10.0以上需要手动信任证书</li></ul><h6 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h6><ul><li>charles可以修改请求参数或者修改响应数据</li><li>动态修改响应数据</li><li>解决跨域问题</li></ul><p><img src="https://s2.loli.net/2022/01/15/jwEol98BWzOxcaJ.png" alt="image-20220115134314156"></p><h6 id="map-local"><a href="#map-local" class="headerlink" title="map local"></a>map local</h6><ul><li>客户端发起请求，charles接受后不发送给服务端，而是直接返回一个本地文件当做响应数据</li><li>修改一些复杂的响应数据时使用</li></ul><p><img src="https://s2.loli.net/2022/01/15/BiUTpMZldV6R5A4.png" alt="image-20220115134351624"></p><h6 id="map-remote"><a href="#map-remote" class="headerlink" title="map remote"></a>map remote</h6><ul><li>将原本需要请求服务端A的请求转发至服务端B，转发请求</li><li>多套测试环境切换时可以使用</li></ul><p><img src="https://s2.loli.net/2022/01/15/UqrIBj7EJgda3Oz.png" alt="image-20220115134525454"></p>]]></content>
      
      
      <categories>
          
          <category> 接口 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> charles </tag>
            
            <tag> curl </tag>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>po设计模型</title>
      <link href="/2022/01/15/2022-1-15-po%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/01/15/2022-1-15-po%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="PageObject设计思想"><a href="#PageObject设计思想" class="headerlink" title="PageObject设计思想"></a>PageObject设计思想</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li><p>通过面向对象的方式，把页面定位和页面操作动作，与测试逻辑分开</p></li><li><p>提高代码的可读性，减少代码的重复，提高代码的可维护性</p></li><li><p>页面元素如果有变化，只需要维护每个page</p></li><li><p>测试步骤有变化，只需要维护test_case</p></li></ul><h4 id="方法意义"><a href="#方法意义" class="headerlink" title="方法意义"></a>方法意义</h4><ul><li>用公共方法代表UI所提供的功能</li><li>方法应该返回其他的pageobject对象或者返回用于断言的数据</li><li>同样的行为不同的结果可以建模为不同的方法</li><li>不要再方法内加断言</li></ul><h4 id="字段意义"><a href="#字段意义" class="headerlink" title="字段意义"></a>字段意义</h4><ul><li>不要暴露页面内部元素给到外部</li><li>不需要建模UI内所有元素</li></ul><h4 id="交互关系"><a href="#交互关系" class="headerlink" title="交互关系"></a>交互关系</h4><ul><li>页面需要class定义</li><li>每个操作动作用方法定义</li><li>方法应该返回跳转页面的页面对象，或者测试用例断言需要用到的数据</li></ul><h4 id="PO执行时的思路"><a href="#PO执行时的思路" class="headerlink" title="PO执行时的思路"></a>PO执行时的思路</h4><ol><li>梳理测试用例</li><li>构造po模型<ul><li>构造页面相关类和方法</li><li>实现暂时可以为空</li></ul></li><li>编写测试用例<ul><li>根据业务逻辑编写</li><li>链式调用</li></ul></li><li>填充实现方法<ul><li>driver初始化</li><li>basepage封装</li></ul></li><li>优化用例<ul><li>封装样板代码：常用的查找元素方法封装至basepage</li><li>提取页面元素：将元素变量私有化，同一元素使用次数多次时，将元素参数化</li><li>添加起始页url：basepage与具体业务没有关系，起始url不建议放在basepage</li></ul></li></ol><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><ol><li><p>driver初始化如果绑定在某个页面类中，那么多个页面类都需要进行初始化操作？</p><p><u>解决：driver的初始化部分放在basepage中，其他page类继承basepage，子类可以使用父类的属性，直接通过self.driver调用driver实例对象</u></p></li><li><p>其他页面类在调用basepage时会重复实例化driver的初始化，导致出现多个浏览器？</p><p><u>解决：在__init__初始化方法中添加形参base_driver = None，并加一个判断，当形参为空时，初始化浏览器驱动，当形参有值时直接附上self.driver对象</u></p></li><li><p>如果出现A导入B，B又导入A，这种循环导入的问题？</p><p><u>解决：可以把导包的操作放在方法里面</u></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> appium </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>adb</title>
      <link href="/2022/01/15/2022-1-15-adb/"/>
      <url>/2022/01/15/2022-1-15-adb/</url>
      
        <content type="html"><![CDATA[<h3 id="Adb环境搭建准备"><a href="#Adb环境搭建准备" class="headerlink" title="Adb环境搭建准备"></a>Adb环境搭建准备</h3><h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><h4 id="安装SDK"><a href="#安装SDK" class="headerlink" title="安装SDK"></a>安装SDK</h4><h4 id="验证环境"><a href="#验证环境" class="headerlink" title="验证环境"></a>验证环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb version</span><br></pre></td></tr></table></figure><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><h5 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h5><ul><li>根据模拟器提供的官方文档进行adb连接</li></ul><h5 id="真机"><a href="#真机" class="headerlink" title="真机"></a>真机</h5><ul><li>usb</li><li>开启开发者模式</li><li>删除手机助手类软件</li></ul><h3 id="adb基础"><a href="#adb基础" class="headerlink" title="adb基础"></a>adb基础</h3><h4 id="adb介绍"><a href="#adb介绍" class="headerlink" title="adb介绍"></a>adb介绍</h4><blockquote><p>全称android debug bridge，安卓调试桥，是android环境提供的命令行工具，用户可以通过adb在电脑上对Android设备进行全面操作，比如安装和调试应用，操作文件的传输等</p></blockquote><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">adb kill-server</span><br><span class="line">adb start-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看设备状态</span></span><br><span class="line">adb devices    <span class="comment"># device正常；offline设备无响应；unauthorized未授权</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装应用</span></span><br><span class="line">adb install 包路径</span><br><span class="line">adb install -r 包路径   <span class="comment"># 覆盖安装</span></span><br><span class="line">adb -s 设备名 install 包路径  <span class="comment"># 指定设备安装</span></span><br><span class="line"><span class="comment"># 卸载应用</span></span><br><span class="line">adb uninstall 包路径</span><br><span class="line">adb uninstall -k 包路径    <span class="comment"># 卸载包不删除配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前已打开的应用包名</span></span><br><span class="line">adb shell dumpsys window w |grep \/ |grep name=</span><br><span class="line"><span class="comment"># 快速启动app</span></span><br><span class="line">adb shell am start -n 包名</span><br><span class="line"><span class="comment"># 清理缓存</span></span><br><span class="line">adb shell pm clear 包名</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="进阶命令"><a href="#进阶命令" class="headerlink" title="进阶命令"></a>进阶命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设备与电脑传输文件</span></span><br><span class="line">adb push 电脑路径 设备路径   <span class="comment"># 电脑--&gt;设备</span></span><br><span class="line">adb pull 设备路径 电脑路径   <span class="comment"># 设备--&gt;电脑</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统日志</span></span><br><span class="line">adb logcat -v time &gt;.\longcat.log</span><br><span class="line"><span class="comment"># 清理日志</span></span><br><span class="line">adb logcat -c</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> adb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> adb </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium自动化</title>
      <link href="/2022/01/15/2022-1-15-selenium%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2022/01/15/2022-1-15-selenium%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="隐式等待与显式等待"><a href="#隐式等待与显式等待" class="headerlink" title="隐式等待与显式等待"></a>隐式等待与显式等待</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接等待</span></span><br><span class="line">time.sleep()</span><br></pre></td></tr></table></figure><h4 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h4><ul><li>设置一个等待时间，轮询查找（默认0.5秒）元素是否出现，如果没有出现则抛出异常</li><li>缺点: 当一个元素出现异常时，会等到等待时间结束才抛出异常，影响效率</li><li>一般放在浏览器驱动初始化方法里面，整个driver全局等待</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 隐式等待</span></span><br><span class="line">implicitly_wait()</span><br></pre></td></tr></table></figure><h4 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h4><ul><li>指定一个等待条件，当条件满足时则继续执行，不满足则抛异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="comment">#在10秒内隔1秒去执行一次until中调用的方法，直到方法不再返回false</span></span><br><span class="line">WebDriverWait(self.driver,<span class="number">10</span>,<span class="number">1</span>).until(EC.具体条件)</span><br><span class="line"><span class="comment"># 在10秒内隔1秒去执行一次until_not中调用的方法，直到方法返回false</span></span><br><span class="line">WebDriverWait(self.driver,<span class="number">10</span>,<span class="number">1</span>).until_not(EC.具体条件)</span><br></pre></td></tr></table></figure><h3 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h3><h4 id="常见元素定位方法"><a href="#常见元素定位方法" class="headerlink" title="常见元素定位方法"></a>常见元素定位方法</h4><ul><li>id</li><li>name</li><li>class_name</li><li>css</li><li>xpath</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>元素有id、name直接使用id或name定位，一般id和name为唯一</li><li>其次优先使用css定位，但css定位可能不适用移动端自动化</li><li>xpath兼容web与app端，但是xpath是在整个页面中去找元素，速度慢</li></ul><h3 id="web控件交互"><a href="#web控件交互" class="headerlink" title="web控件交互"></a>web控件交互</h3><h4 id="ActionChains"><a href="#ActionChains" class="headerlink" title="ActionChains"></a>ActionChains</h4><blockquote><p>调用ActionChains时，不会立刻执行，而是将所有操作按顺序存放在一个队列里面，当你调用perform()时，队列里的事件会依次执行</p></blockquote><h5 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 点击</span></span><br><span class="line">click</span><br><span class="line"><span class="comment"># 双击</span></span><br><span class="line">double_click</span><br><span class="line"><span class="comment"># 右击</span></span><br><span class="line">context_click</span><br><span class="line"><span class="comment"># 拖拽</span></span><br><span class="line">drag_and_drop</span><br><span class="line"><span class="comment"># 移动光标</span></span><br><span class="line">move_to_element</span><br></pre></td></tr></table></figure><h4 id="TouchActions"><a href="#TouchActions" class="headerlink" title="TouchActions"></a>TouchActions</h4><blockquote><p>模拟pc或h5端的操作</p></blockquote><h5 id="常用操作-1"><a href="#常用操作-1" class="headerlink" title="常用操作"></a>常用操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 点击</span></span><br><span class="line">tap</span><br><span class="line"><span class="comment"># 双击</span></span><br><span class="line">double_tap</span><br><span class="line"><span class="comment"># 长按</span></span><br><span class="line">long_press</span><br><span class="line"><span class="comment"># 滑动</span></span><br><span class="line">scroll_from_element</span><br><span class="line"><span class="comment"># 点击不释放</span></span><br><span class="line">tap_and_hold</span><br><span class="line"><span class="comment"># 从某个元素位置开始手势滑动(负数：向上滑动，正数：向下滑动)</span></span><br><span class="line">flick_element</span><br></pre></td></tr></table></figure><h3 id="多窗口-frame"><a href="#多窗口-frame" class="headerlink" title="多窗口/frame"></a>多窗口/frame</h3><h4 id="多窗口切换"><a href="#多窗口切换" class="headerlink" title="多窗口切换"></a>多窗口切换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先获取当前的窗口句柄，在获取所有窗口句柄，再进行窗口切换</span></span><br><span class="line">current_window_handle   <span class="comment"># 获取当前窗口句柄</span></span><br><span class="line">window_handles    <span class="comment"># 获取全部窗口句柄</span></span><br><span class="line">switch_to.window  <span class="comment"># 切换窗口</span></span><br></pre></td></tr></table></figure><h4 id="frame"><a href="#frame" class="headerlink" title="frame"></a>frame</h4><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><ul><li>frameset<ul><li>clos：垂直布局</li><li>rows：水平布局</li></ul></li><li>frame</li><li>iframe</li></ul><h5 id="多frame切换"><a href="#多frame切换" class="headerlink" title="多frame切换"></a>多frame切换</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换至frame</span></span><br><span class="line">switch_to.frame(frame名)</span><br><span class="line"><span class="comment"># 切换至父frame</span></span><br><span class="line">switch_to.parent_frame()</span><br><span class="line"><span class="comment"># 切换至主文档</span></span><br><span class="line">switch_to.default_content()</span><br></pre></td></tr></table></figure><h3 id="多浏览器处理"><a href="#多浏览器处理" class="headerlink" title="多浏览器处理"></a>多浏览器处理</h3><ul><li>在basepage里面增加判断来创建对应浏览器的driver，使用os.getenv()读取全局变量</li></ul><h3 id="执行JavaScript脚本"><a href="#执行JavaScript脚本" class="headerlink" title="执行JavaScript脚本"></a>执行JavaScript脚本</h3><h4 id="selenium调用js脚本"><a href="#selenium调用js脚本" class="headerlink" title="selenium调用js脚本"></a>selenium调用js脚本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果想要js脚本返回数据，需要加上return</span></span><br><span class="line">execute_script()</span><br></pre></td></tr></table></figure><h4 id="常用js方法"><a href="#常用js方法" class="headerlink" title="常用js方法"></a>常用js方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 获取当前页面性能指标</span><br><span class="line"><span class="built_in">JSON</span>.stringify(performance.timing)</span><br><span class="line"># 使用js定位元素</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;su&#x27;</span>)</span><br><span class="line"># 移动页面至最底部</span><br><span class="line"><span class="built_in">document</span>.documentElement.scrollTop=<span class="number">10000</span></span><br><span class="line"># 获取页面title</span><br><span class="line"><span class="built_in">document</span>.title</span><br></pre></td></tr></table></figure><h4 id="js处理时间控件案例"><a href="#js处理时间控件案例" class="headerlink" title="js处理时间控件案例"></a>js处理时间控件案例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 思路：先将时间控件中的只读标签删除，然后直接给时间控件赋值</span><br><span class="line"><span class="string">&quot;a=document.getElementById(&#x27;J_RoomGuestInfoTxt&#x27;);a.removeAttribute(&#x27;readonly&#x27;);a.value=&#x27;一万个&#x27;&quot;</span></span><br><span class="line"># 同时需要执行多个JS脚本时，中间用;隔开即可</span><br><span class="line"># 删除标签readonly属性</span><br><span class="line">removeAttribute(<span class="string">&#x27;readonly&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装mysql</title>
      <link href="/2022/01/10/2022-1-10-docker%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2022/01/10/2022-1-10-docker%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载持续更新镜像</span></span><br><span class="line">docker pull mysql:latest</span><br></pre></td></tr></table></figure><h4 id="启动mysql容器"><a href="#启动mysql容器" class="headerlink" title="启动mysql容器"></a>启动mysql容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建文件夹opt/mysql_docker</span></span><br><span class="line">mkdir /opt/mysql_docker</span><br><span class="line"><span class="comment"># 进入文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /opt/mysql_docker</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run --name mysqlserver -v <span class="variable">$PWD</span>/conf:/etc/mysql/conf.d -v <span class="variable">$PWD</span>/logs:/logs -v <span class="variable">$PWD</span>/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d -i -p 3306:3306 mysql:latest</span><br><span class="line"><span class="comment"># 查看启动日志</span></span><br><span class="line">docker logs -f 容器id</span><br></pre></td></tr></table></figure><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysqlserver bash</span><br></pre></td></tr></table></figure><h4 id="设置远程连接权限"><a href="#设置远程连接权限" class="headerlink" title="设置远程连接权限"></a>设置远程连接权限</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 进入mysql</span><br><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br><span class="line"># 设置允许远程访问</span><br><span class="line">use mysql;</span><br><span class="line"><span class="keyword">select</span> host,<span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3语法</title>
      <link href="/2022/01/10/2022-1-10-python%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/01/10/2022-1-10-python%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>变量是一种存储数据的载体，是存储器中存储数据的一块内存空间变量的值是可以读取和修改的</li></ul><h4 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h4><ul><li><p>int</p></li><li><p>整数</p></li><li><p>float浮点数</p></li><li><p>运算符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 赋值</span></span><br><span class="line">=</span><br><span class="line"><span class="comment"># 加减乘除</span></span><br><span class="line">+-*/</span><br><span class="line"><span class="comment"># 取余</span></span><br><span class="line">%</span><br><span class="line"><span class="comment"># 乘方</span></span><br><span class="line">**</span><br><span class="line"><span class="comment"># 修改运算优先级</span></span><br><span class="line">（）</span><br><span class="line"><span class="comment">## 等于</span></span><br><span class="line">==</span><br><span class="line"><span class="comment"># 不等于</span></span><br><span class="line">！=</span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转义符</span></span><br><span class="line">\</span><br><span class="line"><span class="comment"># 换行</span></span><br><span class="line">\n</span><br><span class="line"><span class="comment"># 忽略转义符作用</span></span><br><span class="line">r</span><br><span class="line"><span class="comment"># 多个字符串连接</span></span><br><span class="line">+</span><br><span class="line"><span class="comment"># 索引</span></span><br><span class="line">从<span class="number">0</span>开始</span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line">前闭后开原则，例如：[<span class="number">1</span>;<span class="number">3</span>]则是<span class="number">1</span>≤x&lt;<span class="number">3</span></span><br><span class="line">举例：[<span class="number">1</span>:<span class="number">6</span>:<span class="number">2</span>]，从<span class="number">1</span>开始到<span class="number">5</span>结束，取值步数step为<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="列表List"><a href="#列表List" class="headerlink" title="列表List"></a>列表List</h4><ul><li>通过组合一些值得到多种复合数据类型</li><li>列表通过[]方括号、逗号分隔的一组值得到</li><li>一个列表可以包含不同类型的元素，但通常使用时各个元素类型相同</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list常用方法：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在列表末尾增加元素</span></span><br><span class="line"><span class="built_in">list</span>.append(x)</span><br><span class="line"><span class="comment"># 在指定索引i处增加元素x</span></span><br><span class="line"><span class="built_in">list</span>.insert(i,x)</span><br><span class="line"><span class="comment"># 移除列表中的第一个x值，如果没有该值则抛出ValueError</span></span><br><span class="line"><span class="built_in">list</span>,remove(x)</span><br><span class="line"><span class="comment"># 删除列表中指定位置的元素并返回它，如果没有指定位置将会删除并返回列的最后一个元素 </span></span><br><span class="line"><span class="built_in">list</span>.pop([i])</span><br><span class="line"><span class="comment"># 对列表中的元素进行排序</span></span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="comment"># 反转列表中的元素并返回</span></span><br><span class="line"><span class="built_in">list</span>.reverse()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表推导式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供一个更简单的创建列表的方法，常见的用法是把某种操作应用于序列或可迭代对象的每个元素上，然后使用其结果来创建列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 举例：生成一个(1,4)的平方列表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)]</span><br></pre></td></tr></table></figure><h4 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h4><ul><li>使用()进行定义</li><li>tuple、list、range都是序列数据类型</li><li>元组是不可变的，可以通过解包、索引来访问</li><li>元组可以嵌套列表，从而可以改变列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回元素x在元组中出现的次数</span></span><br><span class="line"><span class="built_in">tuple</span>.count(x)</span><br><span class="line"><span class="comment"># 返回元素的索引</span></span><br><span class="line"><span class="built_in">tuple</span>.index(x)</span><br></pre></td></tr></table></figure><h4 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h4><ul><li>集合是有不重复元素组成的无序的集</li><li>可以使用{}，或者set()函数来创建集合</li><li>创建空集合只能使用set()，不能直接用{}</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求并集</span></span><br><span class="line">set1.union(set2)</span><br><span class="line"><span class="comment"># 求交集</span></span><br><span class="line">set1.intersection(set2)</span><br><span class="line"><span class="comment"># 求差集</span></span><br><span class="line">set1.difference(set2)</span><br><span class="line"><span class="comment"># 增加元素</span></span><br><span class="line"><span class="built_in">set</span>.add(x)</span><br></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><ul><li>字典是以关键词为索引</li><li>关键词可以是任意不可变类型，通常是字符串或数字，如果一个元组只包含字符串、数字、元组，那这个元组也可以用作关键词</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回字典所有key值</span></span><br><span class="line"><span class="built_in">dict</span>.keys()</span><br><span class="line"><span class="comment"># 返回字典所有的values</span></span><br><span class="line"><span class="built_in">dict</span>.values()</span><br><span class="line"><span class="comment"># 删除关键词未key的键值组</span></span><br><span class="line"><span class="built_in">dict</span>.pop(key)</span><br><span class="line"><span class="comment"># 随机删除键值组</span></span><br><span class="line"><span class="built_in">dict</span>.popitem(key)</span><br><span class="line"><span class="comment"># 将keys作用键值,i为values，新建一个字典</span></span><br><span class="line"><span class="built_in">dict</span>.fromkeys(keys,i) </span><br></pre></td></tr></table></figure><h4 id="列表、元组、字典、集合的区别"><a href="#列表、元组、字典、集合的区别" class="headerlink" title="列表、元组、字典、集合的区别"></a>列表、元组、字典、集合的区别</h4><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="分支结构if-else"><a href="#分支结构if-else" class="headerlink" title="分支结构if-else"></a>分支结构if-else</h4><ul><li>一条一条语句顺序执行叫顺序结构</li><li>分支结构就是在某个判断条件后，选择一条分支去执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if-else示例</span></span><br><span class="line"><span class="keyword">if</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># 多重分支与嵌套分支</span></span><br><span class="line"><span class="comment"># 能使用偏平化的结构时就不要使用嵌套</span></span><br><span class="line"><span class="comment"># 嵌套结构影响代码可读性</span></span><br></pre></td></tr></table></figure><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><ul><li>循环语句允许我们执行一个语句或语句组多次</li><li>python提供了for与while循环</li></ul><h5 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h5><p>如果明确知道循环执行的次数或者要对一个容器进行迭代，那推荐使用for-in循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># range函数</span></span><br><span class="line"><span class="comment"># 可以用来产生一个不变的数值序列，而且这个序列通常都是用在循环中的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">range</span>(<span class="number">101</span>) <span class="comment"># 产生一个0-100的整数序列</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>) <span class="comment"># 产生一个1-99的整数序列</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>,<span class="number">2</span>) <span class="comment"># 产生一个1-99的奇数序列，其中2位step步长</span></span><br></pre></td></tr></table></figure><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><ul><li>如果构造不知道具体循环次数的结构，推荐使用while循环，通过一个能够产生或转换出布尔值的表达式来控制语句，True循环继续，False循环结束</li></ul><h5 id="break与continue语句"><a href="#break与continue语句" class="headerlink" title="break与continue语句"></a>break与continue语句</h5><ul><li>break语句可以跳出for和while循环体，如果从for和while循环中终止，任何对应的else将不执行</li><li>continue语句用来告诉python跳过当前循环块中的剩余语句，然后继续下一轮循环</li></ul><h3 id="函数def"><a href="#函数def" class="headerlink" title="函数def"></a>函数def</h3><ul><li>封装并组织好，可重复使用，用来实现单一或相关连功能的代码段</li><li>提高应用的模块性，和代码的重复利用率</li></ul><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testdef</span>():</span></span><br><span class="line">  <span class="keyword">return</span> xxx</span><br><span class="line"><span class="comment"># def开头，后接函数名和圆括号</span></span><br><span class="line"><span class="comment"># 不带表达式的 return或不写return，相当于返回None</span></span><br></pre></td></tr></table></figure><h4 id="函数的传参"><a href="#函数的传参" class="headerlink" title="函数的传参"></a>函数的传参</h4><h5 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h5><ul><li>传参与参数按位置对应</li></ul><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><ul><li>直接在定义函数时使用k=v定义</li><li>没有传参，直接使用默认参数</li><li>有传参则使用参数</li></ul><h5 id="关键词传参"><a href="#关键词传参" class="headerlink" title="关键词传参"></a>关键词传参</h5><ul><li>函数调用时，使用k=v形式传参</li><li>在函数调用时，关键词参数必须跟随在位置参数的后面</li></ul><h5 id="特殊参数"><a href="#特殊参数" class="headerlink" title="特殊参数"></a>特殊参数</h5><ul><li>仅限关键词参数，在形参前放置一个*</li></ul><h5 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h5><ul><li>可以用lambda关键词来创建一个小的匿名函数</li><li>主体是一个表达式，而不是一个代码块，仅仅能在lambda表达式中封装有限的逻辑进去</li></ul><h3 id="模块class"><a href="#模块class" class="headerlink" title="模块class"></a>模块class</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul><li>包含python定义和语句的文件</li><li>.py文件</li><li>可单独作为脚本运行</li></ul><h4 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"><span class="comment"># 指定导入该模块的具体方法</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 函数|类|变量</span><br><span class="line"><span class="comment"># 导入该模块全部方法</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> * </span><br><span class="line"><span class="comment"># 导入指定方法并给方法取个别名</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 函数 <span class="keyword">as</span> 别名</span><br></pre></td></tr></table></figure><h4 id="模块的分类"><a href="#模块的分类" class="headerlink" title="模块的分类"></a>模块的分类</h4><h5 id="系统内置模块"><a href="#系统内置模块" class="headerlink" title="系统内置模块"></a>系统内置模块</h5><ul><li>sys</li><li>os</li><li>time</li><li>re</li><li>json</li><li>…</li></ul><h5 id="第三方开源模块"><a href="#第三方开源模块" class="headerlink" title="第三方开源模块"></a>第三方开源模块</h5><h5 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块的常用方法</span></span><br><span class="line"><span class="comment"># 打印出当前可调用的方法以及变量名</span></span><br><span class="line"><span class="built_in">dir</span>()</span><br><span class="line"><span class="built_in">dir</span>(sys)</span><br></pre></td></tr></table></figure><h5 id="python解释权对模块路径搜索的顺序"><a href="#python解释权对模块路径搜索的顺序" class="headerlink" title="python解释权对模块路径搜索的顺序"></a>python解释权对模块路径搜索的顺序</h5><ul><li>1、包含输入脚本的目录（如未指定文件，则为当前目录）</li><li>2、PYTHONPATH</li><li>3、安装的默认路径</li></ul><h5 id="模块class总结"><a href="#模块class总结" class="headerlink" title="模块class总结"></a>模块class总结</h5><ul><li>提升代码的可维护性</li><li>提示编码效率</li><li>函数名重复，起名避免与系统重复</li></ul><h4 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">python3 -m venv 文件名</span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line">source 文件名/<span class="built_in">bin</span>/activate</span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure><h4 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h4><ul><li>pytest</li><li>requests</li></ul><h3 id="常用标准库"><a href="#常用标准库" class="headerlink" title="常用标准库"></a>常用标准库</h3><h4 id="os库"><a href="#os库" class="headerlink" title="os库"></a>os库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">os.mkdir()</span><br><span class="line"><span class="comment"># 查看当前所以目录</span></span><br><span class="line">os.listdir()</span><br><span class="line"><span class="comment"># 删除目录</span></span><br><span class="line">os.removedirs()</span><br><span class="line"><span class="comment"># 获取当前路径</span></span><br><span class="line">os.getcwd()</span><br><span class="line"><span class="comment"># 判断文件是否存在</span></span><br><span class="line">os.path.exists()</span><br></pre></td></tr></table></figure><h4 id="time库"><a href="#time库" class="headerlink" title="time库"></a>time库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前秒数</span></span><br><span class="line">time.time()</span><br><span class="line"><span class="comment"># 国际时间格式</span></span><br><span class="line">time.asctime</span><br><span class="line"><span class="comment"># 强制等待时间</span></span><br><span class="line">time.sleep()</span><br><span class="line"><span class="comment"># 获取元组时间类型</span></span><br><span class="line">time,localtime()</span><br><span class="line"><span class="comment"># 格式化时间</span></span><br><span class="line">time.strftime(<span class="string">&quot;%Y年%m月%d日 %H:%M:%S&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="urllib库"><a href="#urllib库" class="headerlink" title="urllib库"></a>urllib库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求链接</span></span><br><span class="line">urllib.request.urlopen(<span class="string">&#x27;url&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="math库"><a href="#math库" class="headerlink" title="math库"></a>math库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回大于等于参数x的最小整数</span></span><br><span class="line">math.ceil(x)</span><br><span class="line"><span class="comment"># 返回小于等于参数x的最小整数</span></span><br><span class="line">math.floor(x)</span><br><span class="line"><span class="comment"># 返回平方根</span></span><br><span class="line">math.sqrt(x)</span><br></pre></td></tr></table></figure><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>类：具有相同属性和方法的对象集合</li><li>类变量：在整个实例化的对象中是公用的，类变量定义在类中且在函数体之外，类变量通常不作为实例变量来使用</li><li>局部变量：定义在方法中的变量，只作用于当前实例的类</li><li>实例变量</li><li>继承</li><li>实例化：创建一个类的实例，类的具体对象</li><li>方法：类中定义的函数</li><li>对象</li><li>类方法与实例方法：类方法不能直接访问，类方法直接访问，需要添加一个装饰器：@classmethod</li></ul><h4 id="三大特征"><a href="#三大特征" class="headerlink" title="三大特征"></a>三大特征</h4><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>子类可以继承父类的属性和方法</li><li>同时又能新增自己的属性和方法</li><li>子类中有与父类相同的方法时，会覆盖掉父类方法</li><li>父类可以有多个子类</li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><ul><li>在继承关系的基础上建立</li><li>在子类中有与父类相同的方法，并实现的功能不同时，就形成了代码的多态性</li></ul><h3 id="错误与异常"><a href="#错误与异常" class="headerlink" title="错误与异常"></a>错误与异常</h3><h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><ul><li>语法错误</li><li>逻辑错误</li><li>系统错误</li></ul><h4 id="异常try…except"><a href="#异常try…except" class="headerlink" title="异常try…except"></a>异常try…except</h4><ul><li>try</li><li>except：发生异常时执行</li><li>else：不发生异常时执行</li><li>finally：无论有无异常最终都会执行</li></ul><h5 id="常见异常类型"><a href="#常见异常类型" class="headerlink" title="常见异常类型"></a>常见异常类型</h5><ul><li>除零异常</li><li>名称异常</li><li>索引异常</li><li>键异常</li><li>值异常</li><li>属性异常</li></ul><h5 id="主动抛出异常"><a href="#主动抛出异常" class="headerlink" title="主动抛出异常"></a>主动抛出异常</h5><ul><li>raise 异常名</li></ul><h5 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h5><ul><li>继承Exception类，编写自己的异常</li></ul><h4 id="调试与分析方法"><a href="#调试与分析方法" class="headerlink" title="调试与分析方法"></a>调试与分析方法</h4><h5 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h5><ul><li><p>print</p></li><li><p>logging</p></li></ul><h5 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h5><h3 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h3><h4 id="字面量定义"><a href="#字面量定义" class="headerlink" title="字面量定义"></a>字面量定义</h4><ul><li>是将变量或常量通过各种方法组合起来，返回我们想要的字符串</li></ul><h4 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h4><ul><li>数值型</li><li>字符型</li><li>布尔型</li><li>字面量集合(list,tuple,dict,set)</li><li>特殊字面量(None)</li></ul><h4 id="字面量插值"><a href="#字面量插值" class="headerlink" title="字面量插值"></a>字面量插值</h4><h5 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出%"></a>格式化输出%</h5><pre><code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必须指定一个类型，才能使用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;my name is %s\nmy age is %d\nmy num is %.3g&quot;</span>%(<span class="string">&#x27;kane&#x27;</span>,<span class="number">11</span>,<span class="number">3.1415</span>))</span><br></pre></td></tr></table></figure></code></pre><h5 id="str-format"><a href="#str-format" class="headerlink" title="str.format()"></a>str.format()</h5><ul><li>​    可字符串，列表，字典</li><li>​    列表，字典使用时需要解包，*list，**dict</li></ul><h5 id="推荐使用F-strings"><a href="#推荐使用F-strings" class="headerlink" title="推荐使用F-strings"></a>推荐使用F-strings</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用方法，在字符串前面加f，则认定字符串需要格式化</span></span><br><span class="line">name = <span class="string">&#x27;kane&#x27;</span></span><br><span class="line">age = <span class="string">&#x27;18&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;my name is <span class="subst">&#123;name&#125;</span>,my age is <span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 大括号里面可以是表达式或函数</span></span><br><span class="line"><span class="comment"># 大括号内不能转义，不能使用“\”</span></span><br></pre></td></tr></table></figure><h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line"><span class="built_in">open</span>()</span><br><span class="line"><span class="comment"># 操作文件</span></span><br><span class="line"><span class="comment"># 查看文件是否可读</span></span><br><span class="line">f.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件中一行</span></span><br><span class="line">f.readline()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件全部行</span></span><br><span class="line">f.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用with语句，可以将文件打开之后，操作完毕，自动关闭这个文件</span></span><br></pre></td></tr></table></figure><h4 id="json格式转换"><a href="#json格式转换" class="headerlink" title="json格式转换"></a>json格式转换</h4><ul><li>轻量级的数据交换格式</li><li>json由字典和列表组成</li></ul><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li>生成：将对象生成为字符串，存入文件，数据库，在网络传输等</li><li>解析：解析来自文件，数据库，网络传输的字符串成python对象</li><li>跨语言的数据交换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将json对象转换为str</span></span><br><span class="line">json.dumps(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将str对象转换为json</span></span><br><span class="line">json.loads(data)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2022/01/07/2022-1-7-git/"/>
      <url>/2022/01/07/2022-1-7-git/</url>
      
        <content type="html"><![CDATA[<h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mac安装：</span></span><br><span class="line">brew intasll git</span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">git --version</span><br><span class="line"><span class="comment"># git配置用户名、邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;yanxiaokang&quot;</span></span><br><span class="line">git config --global user.mail <span class="string">&quot;yanxiaokang1993@163.com&quot;</span></span><br><span class="line"><span class="comment"># 验证配置</span></span><br><span class="line">git config --global --list</span><br><span class="line"><span class="comment"># ssh秘钥生成</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;yanxiaokang1993@163.com&quot;</span></span><br><span class="line"><span class="comment"># 生成秘钥路径</span></span><br><span class="line"><span class="built_in">cd</span> /Users/yanxiaokang/.ssh</span><br><span class="line">id_rsa.pub  <span class="comment">#公钥配置到git</span></span><br><span class="line">id_rsa  <span class="comment">#私钥</span></span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前目录创建仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 提交文件至临时仓库</span></span><br><span class="line">git add 文件名</span><br><span class="line"><span class="comment"># 当前目录全部文件添加至临时仓库</span></span><br><span class="line">git add . </span><br><span class="line"><span class="comment"># add之前取消文件更改</span></span><br><span class="line">git restore </span><br><span class="line"><span class="comment"># 提交备注并提交到仓库</span></span><br><span class="line">git commit -m ’xxx‘</span><br><span class="line"><span class="comment"># 查看当前git状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 查看修改前后对比</span></span><br><span class="line">git diff</span><br><span class="line"><span class="comment"># 未add之前还原到上一次修改</span></span><br><span class="line">git checkout 文件名</span><br><span class="line"><span class="comment"># 已add之后，把文件从临时仓库删除，再使用checkout还原工作区</span></span><br><span class="line">git reset HEAD 文件名</span><br><span class="line"><span class="comment"># 返回到上一次commit的版本</span></span><br><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立远程连接</span></span><br><span class="line">git remote add origin xxx</span><br><span class="line"><span class="comment"># 首次推送至远程仓库，之后只需要 git push</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="comment"># 首次强制推送</span></span><br><span class="line">git push -f -u origin master</span><br><span class="line"><span class="comment"># 合并commit提交记录</span></span><br><span class="line">git rebase -i commit名</span><br><span class="line"><span class="comment"># 修改远程仓库</span></span><br><span class="line">git remote rm origin <span class="comment"># 删除原有远程仓库</span></span><br><span class="line">git remote add origin url <span class="comment"># 添加新的远程仓库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步远程仓库</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">git branch 分支名</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout 分支名</span><br><span class="line"><span class="comment"># 创建并切换</span></span><br><span class="line">git checkout -b 分支名</span><br><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 将远程仓库更新至本地仓库</span></span><br><span class="line">git pull</span><br><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">git merge 分支名</span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -D 分支名</span><br></pre></td></tr></table></figure><h4 id="git-本地代码与远程不一致时"><a href="#git-本地代码与远程不一致时" class="headerlink" title="git 本地代码与远程不一致时"></a>git 本地代码与远程不一致时</h4><p>解决1:想保留本地代码如果你想保留刚才本地修改的代码，并把git服务器上的代码pull到本地（本地刚才修改的代码将会被暂时封存起来）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line">git pull origin master</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>解决2:如果你想完全地覆盖本地的代码，只保留服务器端代码，则直接回退到上一个版本，再进行pull</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><h4 id="git-stash命令"><a href="#git-stash命令" class="headerlink" title="git stash命令"></a>git stash命令</h4><p>​    在项目开发过程中，本来在分支上愉快的开发，突然增加优先级更高的需求，这里则可以使用stash命令将原开发的功能先暂存起来，再新拉出一个分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暂存工作区修改内容</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复最近一次暂存的工作区内容</span></span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询工作区所有stash的列表</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复指定的暂存stash</span></span><br><span class="line">git stash apply stash@&#123;X&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空stash</span></span><br><span class="line">git stash clear</span><br></pre></td></tr></table></figure><h4 id="git-clone-出现无法fatal-could-not-create-work-tree-dir-‘xxx’-Permission-denied"><a href="#git-clone-出现无法fatal-could-not-create-work-tree-dir-‘xxx’-Permission-denied" class="headerlink" title="git clone 出现无法fatal: could not create work tree dir ‘xxx’: Permission denied"></a>git clone 出现无法fatal: could not create work tree dir ‘xxx’: Permission denied</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解决方法：由于没有这个目录的权限导致</span><br><span class="line">cd ..</span><br><span class="line">sudo chmod 777 目录名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试平台-前端基础</title>
      <link href="/2021/12/17/2021-12-17-%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0-%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/17/2021-12-17-%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0-%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="Vue-js介绍"><a href="#Vue-js介绍" class="headerlink" title="Vue.js介绍"></a>Vue.js介绍</h4><ul><li>是一套用于构建用户界面的渐进式框架</li><li>被设计成自底向上逐层应用</li><li>的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合</li><li>学习Vue.js需要一定的html、css和JavaScript基础</li></ul><h5 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h5><p><img src="https://s2.loli.net/2022/01/13/n7MpjxVhidOLU53.png" alt="image-20220113142654911"></p><ul><li>DOM：用户能看到的部分，与用户交互的部分</li><li>Model：存储数据的层，后端返回的数据以及用户请求的数据都存在model层</li><li>Vue层：dom层与model层之间的交互中转</li></ul><h5 id="Vue组件化开发"><a href="#Vue组件化开发" class="headerlink" title="Vue组件化开发"></a>Vue组件化开发</h5><ul><li>将页面拆分为多个组件，每个组件依赖的css、js、模板、图片等资源放在一起维护</li><li>因为组件是资源独立的，所以在系统内部可复用，组件与组件之间可以嵌套</li></ul><h5 id="组件库使用"><a href="#组件库使用" class="headerlink" title="组件库使用"></a>组件库使用</h5><ul><li>ElememtUI</li><li>BootstrapVue</li><li>Vuetify</li></ul><h5 id="Vue-js安装"><a href="#Vue-js安装" class="headerlink" title="Vue.js安装"></a>Vue.js安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm方式安装，需要依赖node环境</span></span><br><span class="line">npm install vue</span><br></pre></td></tr></table></figure><h5 id="Vue的内部指令"><a href="#Vue的内部指令" class="headerlink" title="Vue的内部指令"></a>Vue的内部指令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 元素是否存在</span><br><span class="line">v-if v-else</span><br><span class="line"># 元素是否显示</span><br><span class="line">v-show</span><br><span class="line"># 循环</span><br><span class="line">v-for</span><br><span class="line"># 绑定事件</span><br><span class="line">v-on</span><br><span class="line"># 绑定属性</span><br><span class="line">v-bind</span><br><span class="line"># 绑定数据</span><br><span class="line">v-model</span><br></pre></td></tr></table></figure><h5 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h5><ul><li>钩子函数的使用</li></ul><h4 id="Vue项目实践"><a href="#Vue项目实践" class="headerlink" title="Vue项目实践"></a>Vue项目实践</h4><h5 id="Vue-cli安装"><a href="#Vue-cli安装" class="headerlink" title="Vue-cli安装"></a>Vue-cli安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vue-cli基于webpack构建，并带有合理的默认配置</span></span><br><span class="line"><span class="comment"># webpack是一个JavaScript应用程序的静态模块打包器</span></span><br><span class="line">npm install vue-cli -g</span><br><span class="line"><span class="comment"># 验证版本</span></span><br><span class="line">vue -V</span><br></pre></td></tr></table></figure><h5 id="图形化配置项目"><a href="#图形化配置项目" class="headerlink" title="图形化配置项目"></a>图形化配置项目</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开vue项目管理器</span></span><br><span class="line">vue ui</span><br><span class="line"><span class="comment"># 如果上面命令没有反应，tian</span></span><br><span class="line">cnpm i -g @vue/cli</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 测试平台开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium grid实战</title>
      <link href="/2021/12/17/2021-12-17-docker%E5%AE%89%E8%A3%85selenium%20grid/"/>
      <url>/2021/12/17/2021-12-17-docker%E5%AE%89%E8%A3%85selenium%20grid/</url>
      
        <content type="html"><![CDATA[<h2 id="1、selenium-grid分布式UI自动化"><a href="#1、selenium-grid分布式UI自动化" class="headerlink" title="1、selenium grid分布式UI自动化"></a>1、selenium grid分布式UI自动化</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>selenium团队开发出的一款工具，本身是为浏览器兼容而生，但是又能很好的支持用例的分布式执行</p><h4 id="分布式概念"><a href="#分布式概念" class="headerlink" title="分布式概念"></a><strong>分布式概念</strong></h4><p>1、由一个主hub节点接受需要执行用例的命令，然后主hub节点根据内置的规则分配给若干个node代理节点去调用浏览器来执行</p><p>2、用例执行采用先进先出的原则，如果浏览器不足时，未分配到的用例等待先分配的用例执行完成后，再去执行</p><p><img src="https://s2.loli.net/2022/01/06/JKFlLUsgHmIzqc1.png" alt="grid概念"></p><h4 id="grid3搭建"><a href="#grid3搭建" class="headerlink" title="grid3搭建"></a>grid3搭建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull selenium/hub:3.7.1-beryllium</span><br><span class="line">docker pull selenium/node-chrome-debug:3.7.1-beryllium</span><br><span class="line"><span class="comment"># 启动主节点容器 --name指定容器名称；-p端口映射；-e指定环境变量； -d后台运行</span></span><br><span class="line">docker run --name=hub3.0 -p 5001:4444 -e GRID_TIMEOUT=0 -e GRID_THROW_ON_CAPABILITY_NOT_PRESENT=<span class="literal">true</span> -e GRID_NEW_SESSION_WAIT_TIMEOUT=-1 -e GRID_BROWSER_TIMEOUT=15000 -e GRID_TIMEOUT=30000 -e GRID_CLEAN_UP_CYCLE=30000 -d selenium/hub:3.7.1-beryllium</span><br><span class="line"><span class="comment"># 启动从节点容器 NODE_MAX_INSTANCES/NODE_MAX_SESSION 指定的数量需保持一致，开启浏览器的上限；-v执行一个虚拟内存位置 --link与主节点链接到起来</span></span><br><span class="line">docker run --name=chrome3.0 -p 5902:5900 -e NODE_MAX_INSTANCES=6 -e NODE_MAX_SESSION=6 -e NODE_REGISTER_CYCLE=5000 -e DBUS_SESSION_BUS_ADDRESS=/dev/null -v /dev/shm:/dev/shm --link hub -d selenium/node-chrome-debug:3.7.1-beryllium</span><br></pre></td></tr></table></figure><h4 id="grid4搭建"><a href="#grid4搭建" class="headerlink" title="grid4搭建"></a>grid4搭建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker pull selenium/hub:4.0.0</span><br><span class="line">docker pull selenium/node-chrome:4.0.0</span><br><span class="line"><span class="comment"># 启动主节点</span></span><br><span class="line">docker run --name=hub -p 5442-5444:4442-4444 -d selenium/hub:4.0.0</span><br><span class="line"><span class="comment"># SE_EVENT_BUS_HOST指定主节点ip，SE_NODE_MAX_SESSIONS最大浏览器限制</span></span><br><span class="line">docker run --name=chrome -p 5902:5900 -e SE_EVENT_BUS_HOST=101.35.13.59 -e SE_NODE_MAX_SESSIONS=20 -e SE_NODE_OVERRIDE_MAX_SESSIONS=<span class="literal">true</span> -e SE_EVENT_BUS_PUBLISH_PORT=5442 -e SE_EVENT_BUS_SUBSCRIBE_PORT=5443 -v /dev/shm:/dev/shm -d selenium/node-chrome:4.0.0</span><br></pre></td></tr></table></figure><h4 id="dome演示"><a href="#dome演示" class="headerlink" title="dome演示"></a>dome演示</h4><ul><li><p>编写python演示代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</span><br><span class="line"></span><br><span class="line">driver = webdriver.Remote(</span><br><span class="line">  <span class="comment"># grid3配置</span></span><br><span class="line">  command_executor=<span class="string">&#x27;http://101.35.13.59:5001/wd/hub&#x27;</span>,</span><br><span class="line">  <span class="comment"># grid4配置</span></span><br><span class="line">  <span class="comment"># command_executor=&#x27;http://101.35.13.59:5001,</span></span><br><span class="line">  desired_capabilities=DesiredCapabilities.CHROME)</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(driver.title)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li><li><p>安装vnc viewer客户端，输入node节点地址+端口，密码默认为secret，可查看节点运行情况</p></li><li><p>执行python代码</p></li></ul><h2 id="2、docker容器相关概念"><a href="#2、docker容器相关概念" class="headerlink" title="2、docker容器相关概念"></a>2、docker容器相关概念</h2><h4 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h4><p>docker 是一个开源的应用容器引擎，基于go语言开发，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口。</p><h4 id="linux名称空间（namespace）"><a href="#linux名称空间（namespace）" class="headerlink" title="linux名称空间（namespace）"></a>linux名称空间（namespace）</h4><ul><li>进程名称空间</li><li>网络名称空间</li><li>用户名称空间</li><li>mount名称空间</li><li>time名称空间</li><li>ipc名称空间</li><li>cgroups名称空间</li></ul><h4 id="docker隔离机制"><a href="#docker隔离机制" class="headerlink" title="docker隔离机制"></a>docker隔离机制</h4><p>docker的隔离主要依靠linux namespace名称空间技术，把liunx宿主机看成一个大房子，容器则是里面的小房间，将每个容器进程当成一个房间，达到容器之间相互隔离的目的</p><h4 id="docker网络通讯"><a href="#docker网络通讯" class="headerlink" title="docker网络通讯"></a>docker网络通讯</h4><p>docker主要隔离了<strong>进程名称空间，网络名称空间</strong>，达到容器相互之间隔离，也可以不隔离网络名称空间，达到容器之间可以相互访问</p><ul><li><p>bridge网络模式</p><p>1、内部通讯 ：使用虚拟网卡让容器内部通讯，新增虚拟网卡都是成对出现，一个网卡A放在容器，另外一个网卡A1放在网桥docker0上，达到容器之间内部通讯的目的</p><p><img src="https://s2.loli.net/2022/01/06/JMvON3hUBQzTa5L.png" alt="docker0网桥"></p><p><img src="https://s2.loli.net/2022/01/06/RP9Wldcwn6x1rvH.png" alt="内部通讯"></p><p>2、外部通讯：基于liunx iptables做端口映射，将容器端口映射到宿主机使容器暴露在外部网络，如果容器端口映射为-p 8080:80，此时用户访问8080端口时，宿主机将网络请求全部转发至容器80端口上</p><p><img src="https://s2.loli.net/2022/01/06/kD1fC58iunZya6l.png" alt="外部通讯"></p></li><li><p>host网络模式</p><p>完全使用宿主机的网络名称空间，宿主机的网卡，启动容器时 –net=host</p></li><li><p>container网络模式</p><p>使用其他容器的网络名称空间，–net=container:容器名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当某个容器出现网络故障，可以将宿主机的网络名称空间切换为容器的</span></span><br><span class="line">docker inspect 容器名     <span class="comment"># 查看容器源信息，找到进程名pid</span></span><br><span class="line"><span class="built_in">cd</span> /proc/进程名/ns     <span class="comment"># 查看容器名称空间</span></span><br><span class="line">nsenter -t 进程名 -n    <span class="comment"># 切换成容器的网络名称空间</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出容器网络名称空间，回到宿主机网络名称空间</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>练习题：使用不同的网络模式搭建selenium grid</p><h4 id="3、dockerfile使用"><a href="#3、dockerfile使用" class="headerlink" title="3、dockerfile使用"></a>3、dockerfile使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最简单的创建镜像方式</span></span><br><span class="line">docker commit 容器名 新镜像名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用dockerfile的方式创建python3.8环境镜像</span></span><br><span class="line">mkdir dockerfile_python3.8   <span class="comment"># 创建一个文件夹</span></span><br><span class="line"><span class="built_in">cd</span> dockerfile</span><br><span class="line">touch Dockerfile</span><br><span class="line">wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz</span><br><span class="line">vim Dockerfile  <span class="comment"># 编辑Dockerfile文件</span></span><br><span class="line">docker build -t python3.8 .  <span class="comment"># 创建镜像</span></span><br></pre></td></tr></table></figure><p>Dockerfile文件内容</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;yanxiaokang1993@163.com&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">&quot;centos7 &amp; python3.8&quot;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./Python-3.8.0.tgz ./Python-3.8.0.tgz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -ex \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 预安装所需组件</span></span></span><br><span class="line">    &amp;&amp; yum update -y \</span><br><span class="line">    &amp;&amp; yum install -y wget tar libffi-devel zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make initscripts \</span><br><span class="line">    &amp;&amp; yum clean all \</span><br><span class="line">    <span class="comment"># &amp;&amp; wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz \</span></span><br><span class="line">    &amp;&amp; tar -zxvf Python-<span class="number">3.8</span>.<span class="number">0</span>.tgz \</span><br><span class="line">    &amp;&amp; cd Python-<span class="number">3.8</span>.<span class="number">0</span> \</span><br><span class="line">    &amp;&amp; ./configure prefix=/usr/local/python3 \</span><br><span class="line">    &amp;&amp; make \</span><br><span class="line">    &amp;&amp; make install \</span><br><span class="line">    &amp;&amp; make clean \</span><br><span class="line">    &amp;&amp; rm -rf /Python-<span class="number">3.8</span>.<span class="number">0</span>* \</span><br><span class="line">    &amp;&amp; yum install -y epel-release \</span><br><span class="line">    &amp;&amp; yum install -y python-pip</span><br><span class="line"><span class="comment"># 设置默认为python3</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -ex \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 备份旧版本python</span></span></span><br><span class="line">    &amp;&amp; mv /usr/bin/python /usr/bin/python27 \</span><br><span class="line">    &amp;&amp; mv /usr/bin/pip /usr/bin/pip-python2.<span class="number">7</span> \</span><br><span class="line">    <span class="comment"># 配置默认为python3</span></span><br><span class="line">    &amp;&amp; ln -s /usr/local/python3/bin/python3.<span class="number">8</span> /usr/bin/python \</span><br><span class="line">    &amp;&amp; ln -s /usr/local/python3/bin/pip3 /usr/bin/pip</span><br><span class="line"><span class="comment"># 修复因修改python版本导致yum失效问题</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -ex \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s#/usr/bin/python#/usr/bin/python2.7#&quot;</span> /usr/bin/yum \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s#/usr/bin/python#/usr/bin/python2.7#&quot;</span> /usr/libexec/urlgrabber-ext-down \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum install -y deltarpm</span></span><br><span class="line"><span class="comment"># 基础环境配置</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -ex \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 修改系统时区为东八区</span></span></span><br><span class="line">    &amp;&amp; rm -rf /etc/localtime \</span><br><span class="line">    &amp;&amp; ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span><br><span class="line">    &amp;&amp; yum install -y vim \</span><br><span class="line">    <span class="comment"># 安装定时任务组件</span></span><br><span class="line">    &amp;&amp; yum -y install cronie</span><br><span class="line"><span class="comment"># 支持中文</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install kde-l10n-Chinese -y</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> localedef -c -f UTF-8 -i zh_CN zh_CN.utf8</span></span><br><span class="line"><span class="comment"># 更新pip版本</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade pip</span></span><br><span class="line"><span class="keyword">ENV</span> LC_ALL zh_CN.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> TZ Asia/Shanghai</span><br><span class="line"><span class="keyword">ENV</span> PATH /usr/local/python3/bin/:$PATH</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -sf /usr/share/zoneinfo/Asia/ShangHai /etc/localtime</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium grid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试平台开发</title>
      <link href="/2021/12/17/2021-12-17-%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
      <url>/2021/12/17/2021-12-17-%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h5 id="1、为什么要做测试平台？"><a href="#1、为什么要做测试平台？" class="headerlink" title="1、为什么要做测试平台？"></a>1、为什么要做测试平台？</h5><ul><li>市场需求：测试平台开发是目前行业中一个热门的技术，能为团队带来市场价值，比如wetest</li><li>公司需求：良好的测试平台能减轻公司内部的沟通成本</li></ul><h5 id="2、什么时候做测试平台？"><a href="#2、什么时候做测试平台？" class="headerlink" title="2、什么时候做测试平台？"></a>2、什么时候做测试平台？</h5><ul><li>已有开源测试平台不能满足需求，不要轻易造轮子</li><li>公司内部测试体系、测试技术健全，构建平台可以带动整个团队甚至团队之外的其他团队的提升</li><li>需要公司级别的定制，整合公司内部多套平台</li></ul><h5 id="3、怎么做测试平台？"><a href="#3、怎么做测试平台？" class="headerlink" title="3、怎么做测试平台？"></a>3、怎么做测试平台？</h5><ul><li>拆分平台功能：</li></ul><p><img src="https://s2.loli.net/2022/01/06/cnjxuGWr5PUbm6A.png" alt="image-20220105144819087"></p><h4 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h4><h5 id="常用的技术框架与组件"><a href="#常用的技术框架与组件" class="headerlink" title="常用的技术框架与组件"></a>常用的技术框架与组件</h5><ul><li>前端：bootstrap、vue、react</li><li>后端：django、flask、spring boot(java)</li><li>数据库：mysql、es</li><li>任务调度：jenkins</li><li>数据报表：echarts、vega、kibana、grafana、allure</li></ul><h5 id="选择框架：vue-flask-mysql-jenkins-allure"><a href="#选择框架：vue-flask-mysql-jenkins-allure" class="headerlink" title="选择框架：vue+flask+mysql+jenkins+allure"></a>选择框架：vue+flask+mysql+jenkins+allure</h5><p><img src="https://s2.loli.net/2022/01/06/EAxpQTNLCfSkYot.png" alt="image-20220105153815110"></p><h4 id="flask基础"><a href="#flask基础" class="headerlink" title="flask基础"></a>flask基础</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入Flask</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="comment"># 实例化flask</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 定义路由地址，以及请求方式 methods的值传入list</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/testcase&quot;</span>,methods=[<span class="string">&#x27;post&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_case</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/testcase&quot;</span>,methods=[<span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_case</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/testcase&quot;</span>,methods=[<span class="string">&#x27;put&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_case</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/testcase&quot;</span>,methods=[<span class="string">&#x27;delete&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_case</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># debug=True调试模式，热加载，方便测试</span></span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>测试驱动开发模式，没写一个功能模块，就编写一个test自测，提升平台的健壮性</li></ul><h5 id="使用flask-restful风格定义接口"><a href="#使用flask-restful风格定义接口" class="headerlink" title="使用flask_restful风格定义接口"></a>使用flask_restful风格定义接口</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> utils.log_utils <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Resource,Api</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化flask</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCaseServe</span>(<span class="params">Resource</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        测试用例的新增</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        logger.info(<span class="string">&#x27;测试新增接口&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        测试用例的删除</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        logger.info(<span class="string">&#x27;测试删除接口&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        测试用例的修改</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        logger.info(<span class="string">&#x27;测试修改接口&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        测试用例的查询</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        logger.info(<span class="string">&#x27;测试查询接口&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">api.add_resource(TestCaseServe,<span class="string">&#x27;/testcase&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># debug=True调试模式，热加载，方便测试</span></span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h5 id="使用docker搭建mysql环境"><a href="#使用docker搭建mysql环境" class="headerlink" title="使用docker搭建mysql环境"></a>使用docker搭建mysql环境</h5><ul><li>见docker相关笔记</li></ul><h5 id="使用flask-sqlalchemy操作数据库"><a href="#使用flask-sqlalchemy操作数据库" class="headerlink" title="使用flask_sqlalchemy操作数据库"></a>使用flask_sqlalchemy操作数据库</h5><h6 id="设计表"><a href="#设计表" class="headerlink" title="设计表"></a>设计表</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="comment"># 实例化flask</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 数据库配置信息</span></span><br><span class="line">username = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">password = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">ip = <span class="string">&#x27;101.35.13.59&#x27;</span></span><br><span class="line">port = <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">database = <span class="string">&#x27;test_db&#x27;</span></span><br><span class="line"><span class="comment"># 对数据库信息赋值</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">f&#x27;mysql+pymysql://<span class="subst">&#123;username&#125;</span>:<span class="subst">&#123;password&#125;</span>@<span class="subst">&#123;ip&#125;</span>:<span class="subst">&#123;port&#125;</span>/<span class="subst">&#123;database&#125;</span>?charset=utf8&#x27;</span></span><br><span class="line"><span class="comment"># 忽略报错信息</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 实例化数据库对象</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义类，必须继承db.Model</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">80</span>),unique=<span class="literal">True</span>,nullable=<span class="literal">False</span>)</span><br><span class="line">    email = db.Column(db.String(<span class="number">120</span>),unique=<span class="literal">True</span>,nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;user <span class="subst">&#123;self.username&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># #创建数据库的所有表</span></span><br><span class="line">    db.create_all()</span><br><span class="line">    <span class="comment"># 删除数据库所有的表</span></span><br><span class="line">    <span class="comment"># db.drop_all()</span></span><br></pre></td></tr></table></figure><h6 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user1 = User(<span class="built_in">id</span>=<span class="number">1</span>,username=<span class="string">&#x27;张三&#x27;</span>,email=<span class="string">&#x27;123@123.com&#x27;</span>)</span><br><span class="line">   <span class="comment"># 将数据提交至session</span></span><br><span class="line"> db.session.add(user1)</span><br><span class="line"> db.session.commit()</span><br><span class="line"> db.session.close()</span><br></pre></td></tr></table></figure><h6 id="批量添加数据"><a href="#批量添加数据" class="headerlink" title="批量添加数据"></a>批量添加数据</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方式</span></span><br><span class="line">user1 = User(<span class="built_in">id</span>=<span class="number">1</span>,username=<span class="string">&#x27;张三&#x27;</span>,email=<span class="string">&#x27;123@123.com&#x27;</span>)</span><br><span class="line">user2 = User(<span class="built_in">id</span>=<span class="number">2</span>, username=<span class="string">&#x27;张四&#x27;</span>, email=<span class="string">&#x27;124@123.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 将数据提交至session</span></span><br><span class="line">db.session.add(user1)</span><br><span class="line">db.session.add(user2)</span><br><span class="line">db.session.commit()</span><br><span class="line">db.session.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line">db.session.add_all([user1,user2])</span><br><span class="line">db.session.commit()</span><br><span class="line">db.session.close()</span><br></pre></td></tr></table></figure><h6 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询全部数据</span></span><br><span class="line">res = User.query.<span class="built_in">all</span>()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印全部数据的username，email</span></span><br><span class="line"><span class="keyword">for</span> re <span class="keyword">in</span> res:</span><br><span class="line">  <span class="built_in">print</span>(re.username,re.email)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选查询</span></span><br><span class="line"><span class="comment"># usernaem为张三的全部数据</span></span><br><span class="line">res_all = User.query.filter_by(username=<span class="string">&#x27;张三&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># usernaem为张三的第一条数据</span></span><br><span class="line">res = User.query.filter_by(username=<span class="string">&#x27;张三&#x27;</span>).first()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h6 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a>数据删除</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据删除</span></span><br><span class="line">User.query.filter_by(<span class="built_in">id</span>=<span class="number">1</span>).delete()</span><br><span class="line"><span class="comment"># 数据更改后，需要commit、close</span></span><br><span class="line">db.session.commit()</span><br><span class="line">db.session.close()</span><br></pre></td></tr></table></figure><h6 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据修改</span></span><br><span class="line"><span class="comment"># 第一种方式</span></span><br><span class="line">res = User.query.filter_by(<span class="built_in">id</span>=<span class="number">2</span>).first()</span><br><span class="line">res.username = <span class="string">&#x27;哈哈&#x27;</span></span><br><span class="line"><span class="comment"># 数据更改后，需要commit、close</span></span><br><span class="line">db.session.commit()</span><br><span class="line">db.session.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line">res = User.query.filter_by(<span class="built_in">id</span>=<span class="number">2</span>).update(&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;嘻嘻&#x27;</span>&#125;)</span><br><span class="line">db.session.commit()</span><br><span class="line">db.session.close()</span><br></pre></td></tr></table></figure><h5 id="将接口与数据库连接"><a href="#将接口与数据库连接" class="headerlink" title="将接口与数据库连接"></a>将接口与数据库连接</h5>]]></content>
      
      
      <categories>
          
          <category> 测试平台开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
            <tag> python3 </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试平台-后端基础</title>
      <link href="/2021/12/17/2021-12-17-%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0-%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/17/2021-12-17-%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0-%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="后端开发主要技术点"><a href="#后端开发主要技术点" class="headerlink" title="后端开发主要技术点"></a>后端开发主要技术点</h4><ul><li>页面渲染：客户端渲染页面(SPA)、服务端渲染页面(模板技术)</li><li>数据库连接：数据连接池、数据访问</li><li>服务管理：接口、路由、权限</li><li>异步任务调度：异步、同步、回调</li></ul><h4 id="后端开发框架"><a href="#后端开发框架" class="headerlink" title="后端开发框架"></a>后端开发框架</h4><h6 id="迷你型框架：flask"><a href="#迷你型框架：flask" class="headerlink" title="迷你型框架：flask"></a>迷你型框架：flask</h6><h6 id="大而全框架：django"><a href="#大而全框架：django" class="headerlink" title="大而全框架：django"></a>大而全框架：django</h6><h4 id="flask框架"><a href="#flask框架" class="headerlink" title="flask框架"></a>flask框架</h4><h5 id="flask中文文档：https-dormousehole-readthedocs-io-en-latest"><a href="#flask中文文档：https-dormousehole-readthedocs-io-en-latest" class="headerlink" title="flask中文文档：https://dormousehole.readthedocs.io/en/latest/"></a>flask中文文档：<a href="https://dormousehole.readthedocs.io/en/latest/">https://dormousehole.readthedocs.io/en/latest/</a></h5><ul><li>路由：get、post</li><li>请求：get、form、json、cookie、path</li><li>响应：json、cookie</li><li>session：基于cookie的session机制</li><li>模板技术：不推荐学习，直接客户端渲染页面即可（SPA）</li></ul><h4 id="数据持久化技术"><a href="#数据持久化技术" class="headerlink" title="数据持久化技术"></a>数据持久化技术</h4><ul><li>传统数据库连接方式：pymysql库</li><li>ORM模型：sqlalchemy</li></ul><h4 id="跨平台api对接"><a href="#跨平台api对接" class="headerlink" title="跨平台api对接"></a>跨平台api对接</h4><h5 id="调度平台-jenkins"><a href="#调度平台-jenkins" class="headerlink" title="调度平台-jenkins"></a>调度平台-jenkins</h5><ul><li>通过python-jenjinsapi来操作jenkins的任务</li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试平台开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基础</title>
      <link href="/2021/12/15/2021-12-15-docker%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/15/2021-12-15-docker%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="1、docker的基本概念"><a href="#1、docker的基本概念" class="headerlink" title="1、docker的基本概念"></a>1、docker的基本概念</h3><h4 id="1-1-docker原理："><a href="#1-1-docker原理：" class="headerlink" title="1.1 docker原理："></a>1.1 docker原理：</h4><blockquote><p>docker是一个开源的容器引擎，让开发者可以打包他们的应用以及依赖包（环境）到一个可移植的镜像中，然后发布到任何流行的linux或windows上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口</p></blockquote><h4 id="1-2-docker三大名词"><a href="#1-2-docker三大名词" class="headerlink" title="1.2 docker三大名词"></a>1.2 docker三大名词</h4><h5 id="镜像-images"><a href="#镜像-images" class="headerlink" title="镜像(images):"></a>镜像(images):</h5><blockquote><p>通过运行镜像启动容器，一个镜像是一个可执行的包，其中包括运行应用程序所需要的所有内容-代码，运行时，库、环境变量和配置文件。</p></blockquote><h5 id="容器-container"><a href="#容器-container" class="headerlink" title="容器(container):"></a>容器(container):</h5><blockquote><p>容器时镜像运行时示例-当被执行时(即，镜像状态，或者用户进程)在内存中，可以使用命令查看正在运行容器的列表docker ps,就像在Linux中一样。</p></blockquote><h5 id="仓库-DockerHub"><a href="#仓库-DockerHub" class="headerlink" title="仓库(DockerHub):"></a>仓库(DockerHub):</h5><blockquote><p>DockerHub就相当于Maven的Repository，在Respository中存放是一个一个的jar包，而在DockerHub存放的是一个一个的镜像。</p></blockquote><h4 id="1-3-容器与虚拟机的区别"><a href="#1-3-容器与虚拟机的区别" class="headerlink" title="1.3 容器与虚拟机的区别"></a>1.3 容器与虚拟机的区别</h4><ul><li>容器中运行原生Linux和共享主机与其它容器的内核，它运行一个独立的进程，不占用任何其它可执行文件的内存，使其轻量化。</li><li>虚拟机(VM)运行一个完整的“客户”操作系统，通过虚拟机管理程序虚拟访问主机资源。虚拟机提供的环境比大多数应用程序需要的资源多。</li></ul><h2 id="2、docker安装"><a href="#2、docker安装" class="headerlink" title="2、docker安装"></a>2、docker安装</h2><h4 id="1-准备linux内核版本超过3-0，查看内核命令"><a href="#1-准备linux内核版本超过3-0，查看内核命令" class="headerlink" title="1.准备linux内核版本超过3.0，查看内核命令"></a>1.准备linux内核版本超过3.0，查看内核命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><h4 id="2-安装gcc"><a href="#2-安装gcc" class="headerlink" title="2.安装gcc"></a>2.安装gcc</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><h4 id="3-卸载旧版本docker"><a href="#3-卸载旧版本docker" class="headerlink" title="3.卸载旧版本docker"></a>3.卸载旧版本docker</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure><h4 id="4-安装yum-utils"><a href="#4-安装yum-utils" class="headerlink" title="4.安装yum-utils"></a>4.安装yum-utils</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><h4 id="5-安装docker仓库"><a href="#5-安装docker仓库" class="headerlink" title="5.安装docker仓库"></a>5.安装docker仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用阿里云镜像地址安装：</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-更新-yum-软件包索引"><a href="#6-更新-yum-软件包索引" class="headerlink" title="6.更新 yum 软件包索引"></a>6.更新 yum 软件包索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><h4 id="7-安装-docker-ce-Docker社区版"><a href="#7-安装-docker-ce-Docker社区版" class="headerlink" title="7.安装 docker-ce Docker社区版"></a>7.安装 docker-ce Docker社区版</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h4 id="8-启动docker"><a href="#8-启动docker" class="headerlink" title="8.启动docker"></a>8.启动docker</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="9-测试docker，查看版本"><a href="#9-测试docker，查看版本" class="headerlink" title="9.测试docker，查看版本"></a>9.测试docker，查看版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><h4 id="10-测试docker运行hello-world"><a href="#10-测试docker运行hello-world" class="headerlink" title="10.测试docker运行hello-world"></a>10.测试docker运行hello-world</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h4 id="11-查看images"><a href="#11-查看images" class="headerlink" title="11.查看images"></a>11.查看images</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="3、卸载docker"><a href="#3、卸载docker" class="headerlink" title="3、卸载docker"></a>3、卸载docker</h2><h4 id="1、卸载docker引擎"><a href="#1、卸载docker引擎" class="headerlink" title="1、卸载docker引擎"></a>1、卸载docker引擎</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h4 id="2、删除docker的相关目录"><a href="#2、删除docker的相关目录" class="headerlink" title="2、删除docker的相关目录"></a>2、删除docker的相关目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/contained</span><br></pre></td></tr></table></figure><h2 id="4、docker常用的命令"><a href="#4、docker常用的命令" class="headerlink" title="4、docker常用的命令"></a>4、docker常用的命令</h2><h4 id="1、查看命令帮助"><a href="#1、查看命令帮助" class="headerlink" title="1、查看命令帮助"></a>1、查看命令帮助</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker 命令 --help</span><br><span class="line">docker images --help</span><br></pre></td></tr></table></figure><h4 id="2、镜像命令"><a href="#2、镜像命令" class="headerlink" title="2、镜像命令"></a>2、镜像命令</h4><h5 id="查看所有的镜像"><a href="#查看所有的镜像" class="headerlink" title="查看所有的镜像"></a>查看所有的镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker images -a    展示所有镜像 </span><br><span class="line">docker images -q    只展示镜像的ID</span><br><span class="line"></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">hello-world   latest    feb5d9fea6a5   4 weeks ago   13.3kB</span><br><span class="line"></span><br><span class="line">REPOSITORY:镜像的仓库源</span><br><span class="line">TAG：镜像的标签</span><br><span class="line">IMAGE ID：镜像ID</span><br><span class="line">CREATED：创建时间</span><br><span class="line">SIZE：大小</span><br></pre></td></tr></table></figure><h5 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像  </span><br><span class="line">docker search 镜像 --filter=starts=3000（搜索stars数在3000以上的image）</span><br></pre></td></tr></table></figure><h5 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像</span><br><span class="line">docker pull 镜像:版本</span><br></pre></td></tr></table></figure><h5 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f 镜像id</span><br><span class="line">docker rmi -f $(docker images -aq)  批量删除全部镜像</span><br></pre></td></tr></table></figure><h4 id="3、容器命令"><a href="#3、容器命令" class="headerlink" title="3、容器命令"></a>3、容器命令</h4><h5 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run 参数 镜像</span><br><span class="line">docker run [可选参数] 镜像</span><br><span class="line">可选参数：</span><br><span class="line">--name=&quot;名称&quot;        // 设置容器名</span><br><span class="line">-d                     // 后台方式运行</span><br><span class="line">-it                 // 使用交互方式运行，可以进入容器查看内容</span><br><span class="line">-p                    //（小p）, 指定容器端口</span><br><span class="line">    -p ip:主机端口:容器端口</span><br><span class="line">    -p 主机端口:容器端口（常用）</span><br><span class="line">    -p 容器端口</span><br><span class="line">-P                    //（大P）, 随机指定容器端口</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新建并进入容器</span><br><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用root用户进入容器</span><br><span class="line">docker exec -it -u root 容器id /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">容器内退出并停止容器</span><br><span class="line">exit</span><br><span class="line">退出并不停止容器</span><br><span class="line">（Ctrl + P + Q）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看正在运行的容器</span><br><span class="line">docker ps </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">再次进入交互模式的容器</span><br><span class="line">docker attach &#x27;container id&#x27;</span><br></pre></td></tr></table></figure><h5 id="列出运行中的容器"><a href="#列出运行中的容器" class="headerlink" title="列出运行中的容器"></a>列出运行中的容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps    查看正在运行的容器</span><br><span class="line">docker ps -a 查看运行容器的历史记录</span><br><span class="line">docker ps -a -n=2  查看最近运行的两个容器</span><br><span class="line">docker ps -aq  查看所有容器的ID</span><br></pre></td></tr></table></figure><h5 id="启动并停止容器"><a href="#启动并停止容器" class="headerlink" title="启动并停止容器"></a>启动并停止容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器ID    启动容器</span><br><span class="line">docker restart 容器ID  重启容器</span><br><span class="line">docker stop 容器ID     停止容器</span><br><span class="line">docker kill 容器ID     杀死容器</span><br></pre></td></tr></table></figure><h5 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器ID    删除指定容器</span><br><span class="line">docker rm -f 容器ID  强制删除指定容器</span><br><span class="line">docker rm -f $(docker ps -aq)   删除全部容器</span><br></pre></td></tr></table></figure><h4 id="4、其他命令"><a href="#4、其他命令" class="headerlink" title="4、其他命令"></a>4、其他命令</h4><pre><code>docker run -d centos      # 后台启动docker ps中是查看不到进程的需要加上-a参数docker logs -tf --tail 5 容器ID  # 显示日志尾部的5条数据docker top 容器ID# 查看docker容器内部的进程信息docker inspect 容器ID# 查看容器中的元数据docker exec -it 容器ID 终端路径     进入容器后开启一个新的终端docker attach 容器ID     进入当前正在执行的终端# 进入当前正在运行的容器docker cp 容器ID:文件路径  本地路径# 拷贝容器内的文件到本地docker run -d -p 8088:9000 -v /var/run/docker.sock:/var/run/docker.sock  --restart=always portainer/portainer# portainer可视化面板安装</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest框架</title>
      <link href="/2021/11/17/2021-11-17-pytest%E6%A1%86%E6%9E%B6/"/>
      <url>/2021/11/17/2021-11-17-pytest%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="安装以及装备"><a href="#安装以及装备" class="headerlink" title="安装以及装备"></a>安装以及装备</h2><ol><li>提前安装了python3.6以上</li><li>pip install pytest 安装pytest</li><li>pip install -U pytest 在原基础上更新安装 </li><li>或者在pychram上直接安装<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行第一段pytest代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inc</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_answer</span>():</span></span><br><span class="line">    <span class="keyword">assert</span> inc(<span class="number">4</span>) == <span class="number">5</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="pytest命名规则"><a href="#pytest命名规则" class="headerlink" title="pytest命名规则"></a>pytest命名规则</h2><ol><li>文件名：test_开头或者_test结尾</li><li>类：Test开头（==测试类中不要添加__init__函数==）</li><li>方法/函数：test_开头（==在类里面的叫方法，在类外面的叫函数==）</li></ol><h2 id="命令运行用例"><a href="#命令运行用例" class="headerlink" title="命令运行用例"></a>命令运行用例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接执行项目下所有符合要求的测试用例（命名规范符合要求）</span></span><br><span class="line">pytest</span><br><span class="line"><span class="comment"># 指定某个测试文件执行</span></span><br><span class="line">pytest test_dome.py</span><br><span class="line"><span class="comment"># 指定文件中的类执行</span></span><br><span class="line">pytest test_dome.py::TestDome</span><br><span class="line"><span class="comment"># 指定单条测试用例执行</span></span><br><span class="line">pytest test_dome.py::TestDome::test_case1</span><br><span class="line"><span class="comment"># 显示执行过程</span></span><br><span class="line">pytest -v test_dome.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令运行常用参数</span></span><br><span class="line">-x 用例一旦执行失败，立刻停止执行</span><br><span class="line">--maxfail=num 允许用例失败num次，一旦数量达到则中断执行</span><br><span class="line">-m 标记用例</span><br><span class="line">-k 执行包含某个关键词的测试用例</span><br><span class="line">-v 展示执行过程</span><br><span class="line">-s 显执行日志</span><br><span class="line">-collect-only（测试平台，pytest，pytest自动导入功能）</span><br><span class="line">--lf 只重新运行上次失败的用例</span><br><span class="line">--ff 先运行上次失败，在运行其余的测试</span><br></pre></td></tr></table></figure><p><strong>运行结果分析</strong></p><ol><li>fail  –用例失败</li><li>error  –代码错误，不正确的断言也会</li><li>pass   –用例通过</li><li>warning  –警告，不影响运行</li><li>deselect  –没有被选中</li></ol><h2 id="pytest测试框架结构"><a href="#pytest测试框架结构" class="headerlink" title="pytest测试框架结构"></a>pytest测试框架结构</h2><table><thead><tr><th>类型</th><th>规则</th></tr></thead><tbody><tr><td>setup_module/teardown_module</td><td>全局模块级,每个测试文件前后执行一次</td></tr><tr><td>setup_class/teardown_class</td><td><strong>类级，只在类中前后运行一次（重点）</strong></td></tr><tr><td>setup_function/teardown_function</td><td>函数级，在类外的每个函数前后执行</td></tr><tr><td>setup_method/teardown_method</td><td>方法级，类中的每个方法前后执行</td></tr><tr><td>setup/teardown</td><td><strong>在类中，在每个方法的前后执行（重点）</strong></td></tr></tbody></table><p><strong>setup_method == setup，作用相同</strong></p><h2 id="标记测试用例"><a href="#标记测试用例" class="headerlink" title="标记测试用例"></a>标记测试用例</h2><p><strong>使用方法：@pytest.mark.标签名</strong></p><p><strong>pytest test_dome.py -m 标签名；只执行该标签名的用例</strong></p><ol><li>当筛选标签名执行时，pytest会报警告，需要将标签名配置在pytest.ini文件中</li><li>配置多个标签名时需要换行<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pytest.ini</span><br><span class="line">[pytest]</span><br><span class="line">markers = 标签名<span class="number">1</span></span><br><span class="line">          标签名<span class="number">2</span></span><br><span class="line">          ...</span><br></pre></td></tr></table></figure></li></ol><h2 id="设置跳过，预期失败用例"><a href="#设置跳过，预期失败用例" class="headerlink" title="设置跳过，预期失败用例"></a>设置跳过，预期失败用例</h2><p><strong>@pytest.mark.skip(reason=跳过原因)</strong> </p><ul><li>始终跳过测试用例</li><li>pytest.skip(reason= ) 代码中跳过代码</li></ul><p><strong>@pytest.mark.skipif()</strong> </p><ul><li>条件为True时跳过，False正常执行用例</li><li>条件达到则跳过用例</li></ul><p><strong>@pytest.mark.xfail</strong></p><ul><li>用例还是会执行</li><li>当用例成功时则xpass</li><li>当用例失败时则返回xfail</li></ul><h2 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h2><p><strong>单参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.参数化的名字要与方法中的参数名一一对应</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;appium&#x27;</span>,<span class="string">&#x27;selenium&#x27;</span>,<span class="string">&#x27;pytest&#x27;</span>]</span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;name&quot;</span>,<span class="built_in">list</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_para</span>(<span class="params">naem</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> name <span class="keyword">in</span> <span class="built_in">list</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>多参数、用例重命名ids</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.如果传递多个参数的话，要放在列表中，类表中嵌套列表/元组</span></span><br><span class="line"><span class="comment"># 2.ids传递的个数需要与传递数据的个数一致</span></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;test_input,expected&quot;</span>,[(<span class="params"><span class="string">&quot;3+3&quot;</span>,<span class="number">6</span></span>),(<span class="params"><span class="string">&quot;2+1&quot;</span>,<span class="number">3</span></span>),(<span class="params"><span class="string">&quot;4-3&quot;</span>,<span class="number">1</span></span>)],ids=[...]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_paras</span>(<span class="params">test_input,expected</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">eval</span>(test_input) == expected</span><br></pre></td></tr></table></figure><p><strong>笛卡尔积</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.全量测试，把数据全部的排列组合进行测试</span></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;wd&quot;</span>,[<span class="string">&quot;appium&quot;</span>,<span class="string">&quot;selenium&quot;</span>,<span class="string">&quot;pytest&quot;</span>]</span>)</span></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;code&quot;</span>,[<span class="string">&quot;utf-8&quot;</span>,<span class="string">&quot;gbk&quot;</span>,<span class="string">&quot;gb2312&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_dkej</span>(<span class="params">wb,code</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;wd:<span class="subst">&#123;wd&#125;</span>,code:<span class="subst">&#123;code&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="pytest异常处理"><a href="#pytest异常处理" class="headerlink" title="pytest异常处理"></a>pytest异常处理</h2><p><strong>方法1：try…except</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 捕获异常</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">obj,index</span>):</span></span><br><span class="line">    <span class="keyword">return</span> obj[index]</span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;spam&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    name(x,<span class="number">9</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不存在指定的索引位置&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用raise主动触发异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> IndexError</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主动触发异常&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义异常</span></span><br><span class="line"><span class="comment"># 定义一个Bad类，继承Exception</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bad</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，主动触发异常Bad</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doomed</span>():</span></span><br><span class="line">    <span class="keyword">raise</span> Bad()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    doomed()</span><br><span class="line"><span class="keyword">except</span> Bad:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是一个自定义异常&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># finally，无论try代码块中是否发生异常都会执行</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> IndexError</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in finally&quot;</span>)</span><br><span class="line"><span class="comment"># 外面的代码块不会执行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out finally&quot;</span>)</span><br></pre></td></tr></table></figure><hr><p><strong>方法2：pytest.raise()</strong></p><p>pytest封装了try…except方法，在pytest中使用raises捕获异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exe</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 定义一个预期的异常ValueError</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;除数不能为o&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>/x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_raises</span>():</span></span><br><span class="line">    <span class="comment"># 将定义的异常指向变量info</span></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(ValueError) <span class="keyword">as</span> info:</span><br><span class="line">        exe(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(info.<span class="built_in">type</span>)</span><br><span class="line">    <span class="built_in">print</span>(info.value.args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">assert</span> info.<span class="built_in">type</span> == ValueError</span><br><span class="line">    <span class="keyword">assert</span> info.value.args[<span class="number">0</span>] == <span class="string">&quot;除数不能为o&quot;</span></span><br></pre></td></tr></table></figure><h2 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h2><p><strong>简介</strong></p><blockquote><p>数据的改变从而驱动自动化测试的执行，最终引起测试结果的改变，简单来说，就是参数化的应用</p></blockquote><p><strong>应用场景</strong></p><blockquote><p>app，web，接口自动化测试</p></blockquote><ul><li>测试步骤数据驱动</li><li>测试数据的驱动</li><li>配置文件数据驱动</li></ul><p>参数化与数据驱动的区别</p><ul><li>数据驱动：将数据进行组织，之后对数据进行整合和提炼，形成以数据为中心进行的一切行动</li><li>参数化：将用例所需要的参数变量化，然后将变量指向一系列数据，从而实现同一个测试场景使用不用测试数据进行测试</li></ul><p><strong>1、yaml</strong></p><ol><li>yaml读取数据时默认为列表格式，如果yaml文件格式为字典，则只读取key值</li><li>yaml文件格式类似时，读取时可以把key作为变量，方法传参来指定读取测试数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key：value    <span class="comment">#读取时为字典格式</span></span><br><span class="line"></span><br><span class="line">- </span><br><span class="line"> key：value    <span class="comment">#读取时则为列表格式</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>2、excel</strong></p><blockquote><p>读取excle的常用第三方库，xlrd、xlwings、pandas、==openpyxl==</p></blockquote><ul><li>openpyxl的安装    pip install openpyxl<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#工作簿1.xlsx的内容</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#123</span></span><br><span class="line"><span class="comment">#369</span></span><br><span class="line"><span class="comment">#100200    300</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_excel</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    解析excel的数据</span></span><br><span class="line"><span class="string">    :return: [[1,2,3],[3,6,9],[100,200,300]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取工作簿</span></span><br><span class="line">    book = openpyxl.load_workbook(<span class="string">&quot;./工作簿1.xlsx&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取工作表</span></span><br><span class="line">    sheet = book.active</span><br><span class="line">    <span class="comment"># 获取单元格</span></span><br><span class="line">    cells= sheet[<span class="string">&quot;A1&quot;</span>:<span class="string">&quot;C3&quot;</span>]</span><br><span class="line">    <span class="comment"># 嵌套遍历,获取excel中的测试数据</span></span><br><span class="line">    datas = []</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> cells:</span><br><span class="line">        cell = []</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> value:</span><br><span class="line">            cell.append(data.value)</span><br><span class="line">        datas.append(cell)</span><br><span class="line">    <span class="keyword">return</span> datas</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;x,y,result&quot;</span>,get_excel(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">x,y,result</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> x + y == result</span><br></pre></td></tr></table></figure></li></ul><p><strong>3、csv</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test.csv文件内容</span></span><br><span class="line"><span class="comment"># 1,2,3</span></span><br><span class="line"><span class="comment"># 3,6,9</span></span><br><span class="line"><span class="comment"># 100,200,300</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_csv</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取csv文件数据</span></span><br><span class="line"><span class="string">    :return: [[1,2,3],[3,6,9],[100,200,300]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 使用with方法open文件后会自动关闭文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../test_data/test.csv&quot;</span>) <span class="keyword">as</span> files:</span><br><span class="line">        rows = csv.reader(files)</span><br><span class="line">        datas = []</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> rows:</span><br><span class="line">            datas.append(line)</span><br><span class="line">        <span class="keyword">return</span> datas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;x,y,result&quot;</span>,get_csv(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">x,y,result</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">int</span>(x) + <span class="built_in">int</span>(y) == <span class="built_in">int</span>(result)</span><br></pre></td></tr></table></figure><p><strong>4、json</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_json</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../test_data/data.json&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> files:</span><br><span class="line">        <span class="comment"># 读取json并保存在data</span></span><br><span class="line">        data = json.loads(files.read())</span><br><span class="line">        <span class="comment"># 取出data中的value并装换成list</span></span><br><span class="line">        data_list = <span class="built_in">list</span>(data.values())</span><br><span class="line">        <span class="comment"># 返回list测试数据</span></span><br><span class="line">        <span class="keyword">return</span> data_list</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;x,y,result&quot;</span>,get_json(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">x,y,result</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">int</span>(x) + <span class="built_in">int</span>(y) == <span class="built_in">int</span>(result)</span><br></pre></td></tr></table></figure><h2 id="allure"><a href="#allure" class="headerlink" title="allure"></a>allure</h2><p><strong>安装</strong></p><ol><li>本机环境安装allure：brew install allure</li><li>pytest调用allure需要第三方库：pip install allure-pytest</li></ol><p><strong>添加用例描述</strong></p><ul><li>@allure.title()      测试标题</li><li>@allure.feature()    主模块描述</li><li>@allure.stroy()      子功能描述</li><li>@allure.step()       测试步骤描述<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接在用例中使用 </span></span><br><span class="line"><span class="keyword">with</span> allure.step():</span><br><span class="line">    <span class="keyword">assert</span> ...</span><br></pre></td></tr></table></figure></li></ul><p><strong>添加链接</strong></p><ul><li><p>@allure.link()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用：</span></span><br><span class="line"><span class="meta">@allure.link(<span class="params"><span class="string">&quot;链接&quot;</span>,name=<span class="string">&quot;链接命名&quot;</span></span>)</span></span><br></pre></td></tr></table></figure></li><li><p>@allure.issue()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用：</span></span><br><span class="line"><span class="meta">@allure.issue(<span class="params"><span class="string">&#x27;bug编号&#x27;</span>,name=<span class="string">&quot;链接命名&quot;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行用例时指向bug管理工具地址：</span></span><br><span class="line"> pytest 用例文件 --alluredir 原始报告保存路径  --clean-alluredir --allure-link-pattern=issue:bug管理工具地址&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>@allure.testcase()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用</span></span><br><span class="line">TESTCASELINK = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="meta">@allure.testcase(<span class="params">TESTCASELINK,name=<span class="string">&quot;用例管理平台&quot;</span></span>)</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>设置优先级 @allure.severity()</strong></p><ul><li> BLOCKER = ‘blocker’</li><li> CRITICAL = ‘critical’</li><li> NORMAL = ‘normal’</li><li> MINOR = ‘minor’</li><li> TRIVIAL = ‘trivial’<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用方法</span></span><br><span class="line"><span class="meta">@allure.severity(<span class="params">allure.severity_level.TRIVIAL</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定级别运行测试用例：</span></span><br><span class="line">pytest -vs 文件名 --allure-severities 级别,级别 --alluredir=路径</span><br></pre></td></tr></table></figure></li></ul><p>添加附件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用</span></span><br><span class="line">allure.attach.file(<span class="string">&quot;/Users/yanxiaokang/Downloads/chart-download.png&quot;</span>,name=<span class="string">&quot;截图&quot;</span>)</span><br><span class="line">allure.attach(body=<span class="string">&#x27;&lt;h3 class=&quot;aside-title&quot;&gt;目录&lt;/h3&gt;&#x27;</span>,attachment_type=allure.attachment_type.HTML,name=<span class="string">&quot;一段html源码&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>allure生成报告</strong></p><ul><li>1、执行用例并删除报告文件生成新的报告文件：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -vs 用例文件 --alluredir=目录 --clean-alluredir</span><br></pre></td></tr></table></figure></li><li>2、在线打开报告：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure serve 报告目录</span><br></pre></td></tr></table></figure></li><li>3、保存报告在本地：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure generate 原始报告文件 -o 报告存放路径</span><br></pre></td></tr></table></figure></li><li>4、本地启动web服务并打开报告：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure open -h 127.0.0.1 -p 8883 ./报告文件</span><br></pre></td></tr></table></figure></li></ul><h2 id="fixture"><a href="#fixture" class="headerlink" title="fixture"></a>fixture</h2><p><strong>fixture特点以及作用</strong></p><ul><li>命令灵活：对于setup，teardown，可以不起这两个名字</li><li>数据共享，在conftest.py配置里写方法可以实现数据共享，不需要import导入</li><li>scope的层次以及yield组合相当于各种setup和teardown</li><li>实现参数化</li></ul><p><strong>fixture与setup的区别</strong>？</p><ul><li>fixture命名更灵活，不要以test_开头，与用例区分开</li><li>fixture是以参数的形式传递到测试用例中，想用就用，可以在需要fixture的测试用例中参数添加fixture，不需要就不传递</li><li>一条用例可以使用多个fixture作为前置条件</li><li>autouse 可以使fixture自动执行，自动引入不需要导入</li><li>conftest.py为fixture而生的，可以方便管理、修改和查看fixture函数</li></ul><p><strong>fixture基本用法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 场景:一个测试类中用一些测试用例需登录才能执行，有一些不需要登录也可以执行</span></span><br><span class="line"><span class="comment"># 首先定义一个登录方法，在方法前加一个fixture装饰器，把该方法名当成参数传入需要使用这个方法的用例中，则在执行用例时就会先去执行fixture定义的方法然后再执行用例</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;完成登录操作&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_order</span>(<span class="params">login</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;去下单&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>fixture的作用域</strong></p><table><thead><tr><th>范围</th><th>作用说明</th></tr></thead><tbody><tr><td>function</td><td>每个函数或方法都会调用</td></tr><tr><td>class</td><td>每个测试类只运行一次</td></tr><tr><td>module</td><td>每个.py文件调用一次</td></tr><tr><td>package</td><td>每个python包调用一次（暂不支持）</td></tr><tr><td>session</td><td>每个回话只运行一次，单次运行为一个会话</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@pytest.fixture(scope=&quot;class&quot;)</span><br></pre></td></tr></table></figure><p><strong>fixture–yield</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前面为setup操作</span></span><br><span class="line"><span class="comment"># yield</span></span><br><span class="line"><span class="comment"># 后面为teardown操作</span></span><br></pre></td></tr></table></figure><p><strong>conftest.py文件数据共享</strong></p><ul><li>conftest名字是固定的，不能改变</li><li>将项目共享的方法可以放置在conftest文件中，方便直接调用</li></ul><p><strong>fixtrue自动应用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># autouse=True打开自动应用</span></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;function&quot;</span>,autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>fixtrue实现参数化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">params=[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],[-<span class="number">0.01</span>,<span class="number">0.02</span>,<span class="number">0.01</span>]],ids=[<span class="string">&quot;2个整数相加&quot;</span>,<span class="string">&quot;2个浮点数相加&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_fixture_data</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> request.param</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCalculator</span>:</span></span><br><span class="line">    <span class="comment"># 使用fixture实现参数化</span></span><br><span class="line"><span class="meta">    @allure.story(<span class="params"><span class="string">&quot;加法p0用例&quot;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_p0_add</span>(<span class="params">self,get_fixture_data</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> get_fixture_data[<span class="number">2</span>] == cl.add(get_fixture_data[<span class="number">0</span>],get_fixture_data[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><strong>pytest.ini配置文件</strong></p><ul><li>可以修改用例的命名规则<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行check_和test_开头的所有文件</span></span><br><span class="line">python_files = check_* test_*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行所有以Check和Tset开头的类</span></span><br><span class="line">python_classes = Check* Test*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行所有check_和test_开头的函数和方法</span></span><br><span class="line">python_functions = check_* test_*</span><br></pre></td></tr></table></figure></li><li>配置日志格式，比代码配置更方便<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志开关 true false</span></span><br><span class="line">log_cli = true</span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line">log_cli_level = info</span><br><span class="line"><span class="comment"># 打印详细日志，相当于命令行加 -vs</span></span><br><span class="line">addopts = --capture=no</span><br><span class="line"><span class="comment"># 日志格式</span></span><br><span class="line">log_cli_format = %(asctime)s [%(levelname)s] %(message)s (%(filename)s:%(lineno)s)</span><br><span class="line"><span class="comment"># 日志时间格式</span></span><br><span class="line">log_cli_date_format = %Y-%m-%d %H:%M:%S</span><br><span class="line"><span class="comment"># 日志文件位置</span></span><br><span class="line"><span class="comment"># log_file = ./log/test.log</span></span><br><span class="line"><span class="comment"># 日志文件等级</span></span><br><span class="line">log_file_level = info</span><br><span class="line"><span class="comment"># 日志文件格式</span></span><br><span class="line">log_file_format = %(asctime)s [%(levelname)s] %(message)s (%(filename)s:%(lineno)s)</span><br><span class="line"><span class="comment"># 日志文件日期格式</span></span><br><span class="line">log_file_date_format = %Y-%m-%d %H:%M:%S</span><br></pre></td></tr></table></figure></li><li>添加自定义标签，防止运行过程中报警告错误<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">marks = </span><br></pre></td></tr></table></figure></li><li>指定/排除执行目录<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置执行的目录</span></span><br><span class="line">testpaths = 路径</span><br><span class="line"><span class="comment"># 忽略一些目录</span></span><br><span class="line">norecursedirs = result logs datas test_dome*</span><br></pre></td></tr></table></figure></li></ul><h2 id="pytest插件开发，hook函数"><a href="#pytest插件开发，hook函数" class="headerlink" title="pytest插件开发，hook函数"></a>pytest插件开发，hook函数</h2><h4 id="1、hook函数介绍"><a href="#1、hook函数介绍" class="headerlink" title="1、hook函数介绍"></a>1、hook函数介绍</h4><ul><li>hook函数也称钩子函数</li><li>hook函数会被系统自动调用，使用时直接在hookspec.py文件中找到对应hook函数，复制函数体进行编写</li><li>pytest执行时是会有固定的顺序，对顺序中的hook函数进行二次开发达到自己所需要的目的</li></ul><h4 id="2、pytest-hook的执行顺序"><a href="#2、pytest-hook的执行顺序" class="headerlink" title="2、pytest hook的执行顺序"></a>2、pytest hook的执行顺序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">文字版顺序</span><br><span class="line">root</span><br><span class="line">└── pytest_cmdline_main</span><br><span class="line">├── pytest_plugin_registered</span><br><span class="line">├── pytest_configure</span><br><span class="line">│ └── pytest_plugin_registered</span><br><span class="line">├── pytest_sessionstart</span><br><span class="line">│ ├── pytest_plugin_registered</span><br><span class="line">│ └── pytest_report_header</span><br><span class="line">├── pytest_collection        <span class="comment"># 测试用例收集开始</span></span><br><span class="line">│ ├── pytest_collectstart</span><br><span class="line">│ ├── pytest_make_collect_report</span><br><span class="line">│ │ ├── pytest_collect_file</span><br><span class="line">│ │ │ └── pytest_pycollect_makemodule</span><br><span class="line">│ │ └── pytest_pycollect_makeitem</span><br><span class="line">│ │ └── pytest_generate_tests</span><br><span class="line">│ │ └── pytest_make_parametrize_id</span><br><span class="line">│ ├── pytest_collectreport</span><br><span class="line">│ ├── pytest_itemcollected</span><br><span class="line">│ ├── pytest_collection_modifyitems   <span class="comment"># 用例收集结束</span></span><br><span class="line">│ └── pytest_collection_finish</span><br><span class="line">│ └── pytest_report_collectionfinish</span><br><span class="line">├── pytest_runtestloop         <span class="comment"># 测试用例执行阶段</span></span><br><span class="line">│ └── pytest_runtest_protocol</span><br><span class="line">│ ├── pytest_runtest_logstart</span><br><span class="line">│ ├── pytest_runtest_setup    <span class="comment"># setup执行阶段</span></span><br><span class="line">│ │ └── pytest_fixture_setup</span><br><span class="line">│ ├── pytest_runtest_makereport</span><br><span class="line">│ ├── pytest_runtest_logreport</span><br><span class="line">│ │ └── pytest_report_teststatus</span><br><span class="line">│ ├── pytest_runtest_call</span><br><span class="line">│ │ └── pytest_pyfunc_call</span><br><span class="line">│ ├── pytest_runtest_teardown   <span class="comment"># teardown执行阶段</span></span><br><span class="line">│ │ └── pytest_fixture_post_finalizer</span><br><span class="line">│ └── pytest_runtest_logfinish</span><br><span class="line">├── pytest_sessionfinish</span><br><span class="line">│ └── pytest_terminal_summary</span><br><span class="line">└── pytest_unconfigure</span><br></pre></td></tr></table></figure><h4 id="3、hookspec-py文件路径"><a href="#3、hookspec-py文件路径" class="headerlink" title="3、hookspec.py文件路径"></a>3、hookspec.py文件路径</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site_packages/_pytest/hookspec.py</span><br></pre></td></tr></table></figure><h4 id="4、编写插件"><a href="#4、编写插件" class="headerlink" title="4、编写插件"></a>4、编写插件</h4><p><strong>1、修改默认编码格式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hook函数，在用例收集完毕之后会被调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pytest_collection_modifyitems</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    session: <span class="string">&quot;Session&quot;</span>, config: <span class="string">&quot;Config&quot;</span>, items: <span class="type">List</span>[<span class="string">&quot;Item&quot;</span>]</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1、用例收集完毕后，遍历用例对象，修改name、nodeid编码格式</span></span><br><span class="line"><span class="string">    2、将python的默认编码格式unicode装换为utf-8，再装换为unicode_escape</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        item.name = item.name.encode(<span class="string">&quot;utf-8&quot;</span>).decode(<span class="string">&quot;unicode_escape&quot;</span>)</span><br><span class="line">        item._nodeid = item._nodeid.encode(<span class="string">&quot;utf-8&quot;</span>).decode(<span class="string">&quot;unicode_escape&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>2、添加命令行参数</strong></p><p>conftest.py文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过添加命令行自定义参数可以达到，在执行用例时添加命令参数来指定测试数据</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># hook函数头[pytest_addoption(parser):]为固定写法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pytest_addoption</span>(<span class="params">parser</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    新建一个命令行组kane，命令为--env，参数默认为test</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    my_group = parser.getgroup(<span class="string">&#x27;kane&#x27;</span>)</span><br><span class="line">    my_group.addoption(<span class="string">&#x27;--env&#x27;</span>,default=<span class="string">&#x27;test&#x27;</span>,dest=<span class="string">&#x27;test env&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;set you run env&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;session&quot;</span>,autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_option</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取命令行参数的值，并return</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> request.config.getoption(<span class="string">&quot;--env&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;session&quot;</span>,autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test_env</span>(<span class="params">get_option</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">     获取到命令行的值并对值判断</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> get_option == <span class="string">&quot;test&quot;</span>:</span><br><span class="line">        data_path = <span class="string">&#x27;./test.yaml&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> get_option == <span class="string">&quot;dev&quot;</span>:</span><br><span class="line">        data_path = <span class="string">&quot;./dev.yaml&quot;</span></span><br><span class="line">    <span class="comment"># 经过判断后得到yaml文件的路径，并解析文件返回数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(data_path) <span class="keyword">as</span> f:</span><br><span class="line">        get_data = yaml.safe_load(f)</span><br><span class="line">    <span class="keyword">return</span> get_data</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>test_case.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_dome1</span>(<span class="params">get_test_env</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(get_test_env)</span><br></pre></td></tr></table></figure><p>命令行：pytest -vs –env 环境 test_case.py,即可指定测试数据来执行</p><p>3、插件打包发布</p><p><strong>插件打包发布前提</strong>：</p><ul><li>源码包</li><li>setup.py文件配置</li><li>test测试包</li></ul><p><strong>打包</strong></p><ol><li>依赖包安装：pip install setuptools /  pip install wheel</li><li>配置好setup后，输入打包命令：python setup.py sdist bdist_wheel</li></ol><p><strong>插件上传至pypi</strong></p><ol><li>安装twine：python3 -m pip install –upgrade twine </li><li>执行：twine upload dist/*</li></ol>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
