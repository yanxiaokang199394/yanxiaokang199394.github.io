<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python语法</title>
      <link href="/2022/01/10/python%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/01/10/python%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>变量是一种存储数据的载体，是存储器中存储数据的一块内存空间变量的值是可以读取和修改的</li></ul><h4 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h4><ul><li><p>int</p></li><li><p>整数</p></li><li><p>float浮点数</p></li><li><p>运算符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 赋值</span></span><br><span class="line">=</span><br><span class="line"><span class="comment"># 加减乘除</span></span><br><span class="line">+-*/</span><br><span class="line"><span class="comment"># 取余</span></span><br><span class="line">%</span><br><span class="line"><span class="comment"># 乘方</span></span><br><span class="line">**</span><br><span class="line"><span class="comment"># 修改运算优先级</span></span><br><span class="line">（）</span><br><span class="line"><span class="comment">## 等于</span></span><br><span class="line">==</span><br><span class="line"><span class="comment"># 不等于</span></span><br><span class="line">！=</span><br></pre></td></tr></table></figure></li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转义符</span></span><br><span class="line">\</span><br><span class="line"><span class="comment"># 换行</span></span><br><span class="line">\n</span><br><span class="line"><span class="comment"># 忽略转义符作用</span></span><br><span class="line">r</span><br><span class="line"><span class="comment"># 多个字符串连接</span></span><br><span class="line">+</span><br><span class="line"><span class="comment"># 索引</span></span><br><span class="line">从<span class="number">0</span>开始</span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line">前闭后开原则，例如：[<span class="number">1</span>;<span class="number">3</span>]则是<span class="number">1</span>≤x&lt;<span class="number">3</span></span><br><span class="line">举例：[<span class="number">1</span>:<span class="number">6</span>:<span class="number">2</span>]，从<span class="number">1</span>开始到<span class="number">5</span>结束，取值步数step为<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="列表List"><a href="#列表List" class="headerlink" title="列表List"></a>列表List</h4><ul><li>通过组合一些值得到多种复合数据类型</li><li>列表通过[]方括号、逗号分隔的一组值得到</li><li>一个列表可以包含不同类型的元素，但通常使用时各个元素类型相同</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list常用方法：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在列表末尾增加元素</span></span><br><span class="line"><span class="built_in">list</span>.append(x)</span><br><span class="line"><span class="comment"># 在指定索引i处增加元素x</span></span><br><span class="line"><span class="built_in">list</span>.insert(i,x)</span><br><span class="line"><span class="comment"># 移除列表中的第一个x值，如果没有该值则抛出ValueError</span></span><br><span class="line"><span class="built_in">list</span>,remove(x)</span><br><span class="line"><span class="comment"># 删除列表中指定位置的元素并返回它，如果没有指定位置将会删除并返回列的最后一个元素 </span></span><br><span class="line"><span class="built_in">list</span>.pop([i])</span><br><span class="line"><span class="comment"># 对列表中的元素进行排序</span></span><br><span class="line"><span class="built_in">list</span>.sort()</span><br><span class="line"><span class="comment"># 反转列表中的元素并返回</span></span><br><span class="line"><span class="built_in">list</span>.reverse()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表推导式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供一个更简单的创建列表的方法，常见的用法是把某种操作应用于序列或可迭代对象的每个元素上，然后使用其结果来创建列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 举例：生成一个(1,4)的平方列表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [i*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>)]</span><br></pre></td></tr></table></figure><h4 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h4><ul><li>使用()进行定义</li><li>tuple、list、range都是序列数据类型</li><li>元组是不可变的，可以通过解包、索引来访问</li><li>元组可以嵌套列表，从而可以改变列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回元素x在元组中出现的次数</span></span><br><span class="line"><span class="built_in">tuple</span>.count(x)</span><br><span class="line"><span class="comment"># 返回元素的索引</span></span><br><span class="line"><span class="built_in">tuple</span>.index(x)</span><br></pre></td></tr></table></figure><h4 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h4><ul><li>集合是有不重复元素组成的无序的集</li><li>可以使用{}，或者set()函数来创建集合</li><li>创建空集合只能使用set()，不能直接用{}</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求并集</span></span><br><span class="line">set1.union(set2)</span><br><span class="line"><span class="comment"># 求交集</span></span><br><span class="line">set1.intersection(set2)</span><br><span class="line"><span class="comment"># 求差集</span></span><br><span class="line">set1.difference(set2)</span><br><span class="line"><span class="comment"># 增加元素</span></span><br><span class="line"><span class="built_in">set</span>.add(x)</span><br></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><ul><li>字典是以关键词为索引</li><li>关键词可以是任意不可变类型，通常是字符串或数字，如果一个元组只包含字符串、数字、元组，那这个元组也可以用作关键词</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回字典所有key值</span></span><br><span class="line"><span class="built_in">dict</span>.keys()</span><br><span class="line"><span class="comment"># 返回字典所有的values</span></span><br><span class="line"><span class="built_in">dict</span>.values()</span><br><span class="line"><span class="comment"># 删除关键词未key的键值组</span></span><br><span class="line"><span class="built_in">dict</span>.pop(key)</span><br><span class="line"><span class="comment"># 随机删除键值组</span></span><br><span class="line"><span class="built_in">dict</span>.popitem(key)</span><br><span class="line"><span class="comment"># 将keys作用键值,i为values，新建一个字典</span></span><br><span class="line"><span class="built_in">dict</span>.fromkeys(keys,i) </span><br></pre></td></tr></table></figure><h4 id="列表、元组、字典、集合的区别"><a href="#列表、元组、字典、集合的区别" class="headerlink" title="列表、元组、字典、集合的区别"></a>列表、元组、字典、集合的区别</h4><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="分支结构if-else"><a href="#分支结构if-else" class="headerlink" title="分支结构if-else"></a>分支结构if-else</h4><ul><li>一条一条语句顺序执行叫顺序结构</li><li>分支结构就是在某个判断条件后，选择一条分支去执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if-else示例</span></span><br><span class="line"><span class="keyword">if</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># 多重分支与嵌套分支</span></span><br><span class="line"><span class="comment"># 能使用偏平化的结构时就不要使用嵌套</span></span><br><span class="line"><span class="comment"># 嵌套结构影响代码可读性</span></span><br></pre></td></tr></table></figure><h4 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h4><ul><li>循环语句允许我们执行一个语句或语句组多次</li><li>python提供了for与while循环</li></ul><h5 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h5><p>如果明确知道循环执行的次数或者要对一个容器进行迭代，那推荐使用for-in循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># range函数</span></span><br><span class="line"><span class="comment"># 可以用来产生一个不变的数值序列，而且这个序列通常都是用在循环中的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">range</span>(<span class="number">101</span>) <span class="comment"># 产生一个0-100的整数序列</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>) <span class="comment"># 产生一个1-99的整数序列</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>,<span class="number">2</span>) <span class="comment"># 产生一个1-99的奇数序列，其中2位step步长</span></span><br></pre></td></tr></table></figure><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><ul><li>如果构造不知道具体循环次数的结构，推荐使用while循环，通过一个能够产生或转换出布尔值的表达式来控制语句，True循环继续，False循环结束</li></ul><h5 id="break与continue语句"><a href="#break与continue语句" class="headerlink" title="break与continue语句"></a>break与continue语句</h5><ul><li>break语句可以跳出for和while循环体，如果从for和while循环中终止，任何对应的else将不执行</li><li>continue语句用来告诉python跳过当前循环块中的剩余语句，然后继续下一轮循环</li></ul><h3 id="函数def"><a href="#函数def" class="headerlink" title="函数def"></a>函数def</h3><ul><li>封装并组织好，可重复使用，用来实现单一或相关连功能的代码段</li><li>提高应用的模块性，和代码的重复利用率</li></ul><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testdef</span>():</span></span><br><span class="line">  <span class="keyword">return</span> xxx</span><br><span class="line"><span class="comment"># def开头，后接函数名和圆括号</span></span><br><span class="line"><span class="comment"># 不带表达式的 return或不写return，相当于返回None</span></span><br></pre></td></tr></table></figure><h4 id="函数的传参"><a href="#函数的传参" class="headerlink" title="函数的传参"></a>函数的传参</h4><h5 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h5><ul><li>传参与参数按位置对应</li></ul><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><ul><li>直接在定义函数时使用k=v定义</li><li>没有传参，直接使用默认参数</li><li>有传参则使用参数</li></ul><h5 id="关键词传参"><a href="#关键词传参" class="headerlink" title="关键词传参"></a>关键词传参</h5><ul><li>函数调用时，使用k=v形式传参</li><li>在函数调用时，关键词参数必须跟随在位置参数的后面</li></ul><h5 id="特殊参数"><a href="#特殊参数" class="headerlink" title="特殊参数"></a>特殊参数</h5><ul><li>仅限关键词参数，在形参前放置一个*</li></ul><h5 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h5><ul><li>可以用lambda关键词来创建一个小的匿名函数</li><li>主体是一个表达式，而不是一个代码块，仅仅能在lambda表达式中封装有限的逻辑进去</li></ul><h3 id="模块class"><a href="#模块class" class="headerlink" title="模块class"></a>模块class</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul><li>包含python定义和语句的文件</li><li>.py文件</li><li>可单独作为脚本运行</li></ul><h4 id="模块的导入"><a href="#模块的导入" class="headerlink" title="模块的导入"></a>模块的导入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> 模块名</span><br><span class="line"><span class="comment"># 指定导入该模块的具体方法</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 函数|类|变量</span><br><span class="line"><span class="comment"># 导入该模块全部方法</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> * </span><br><span class="line"><span class="comment"># 导入指定方法并给方法取个别名</span></span><br><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 函数 <span class="keyword">as</span> 别名</span><br></pre></td></tr></table></figure><h4 id="模块的分类"><a href="#模块的分类" class="headerlink" title="模块的分类"></a>模块的分类</h4><h5 id="系统内置模块"><a href="#系统内置模块" class="headerlink" title="系统内置模块"></a>系统内置模块</h5><ul><li>sys</li><li>os</li><li>time</li><li>re</li><li>json</li><li>…</li></ul><h5 id="第三方开源模块"><a href="#第三方开源模块" class="headerlink" title="第三方开源模块"></a>第三方开源模块</h5><h5 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块的常用方法</span></span><br><span class="line"><span class="comment"># 打印出当前可调用的方法以及变量名</span></span><br><span class="line"><span class="built_in">dir</span>()</span><br><span class="line"><span class="built_in">dir</span>(sys)</span><br></pre></td></tr></table></figure><h5 id="python解释权对模块路径搜索的顺序"><a href="#python解释权对模块路径搜索的顺序" class="headerlink" title="python解释权对模块路径搜索的顺序"></a>python解释权对模块路径搜索的顺序</h5><ul><li>1、包含输入脚本的目录（如未指定文件，则为当前目录）</li><li>2、PYTHONPATH</li><li>3、安装的默认路径</li></ul><h5 id="模块class总结"><a href="#模块class总结" class="headerlink" title="模块class总结"></a>模块class总结</h5><ul><li>提升代码的可维护性</li><li>提示编码效率</li><li>函数名重复，起名避免与系统重复</li></ul><h4 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">python3 -m venv 文件名</span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line">source 文件名/<span class="built_in">bin</span>/activate</span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure><h4 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h4><ul><li>pytest</li><li>requests</li></ul><h3 id="常用标准库"><a href="#常用标准库" class="headerlink" title="常用标准库"></a>常用标准库</h3><h4 id="os库"><a href="#os库" class="headerlink" title="os库"></a>os库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">os.mkdir()</span><br><span class="line"><span class="comment"># 查看当前所以目录</span></span><br><span class="line">os.listdir()</span><br><span class="line"><span class="comment"># 删除目录</span></span><br><span class="line">os.removedirs()</span><br><span class="line"><span class="comment"># 获取当前路径</span></span><br><span class="line">os.getcwd()</span><br><span class="line"><span class="comment"># 判断文件是否存在</span></span><br><span class="line">os.path.exists()</span><br></pre></td></tr></table></figure><h4 id="time库"><a href="#time库" class="headerlink" title="time库"></a>time库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前秒数</span></span><br><span class="line">time.time()</span><br><span class="line"><span class="comment"># 国际时间格式</span></span><br><span class="line">time.asctime</span><br><span class="line"><span class="comment"># 强制等待时间</span></span><br><span class="line">time.sleep()</span><br><span class="line"><span class="comment"># 获取元组时间类型</span></span><br><span class="line">time,localtime()</span><br><span class="line"><span class="comment"># 格式化时间</span></span><br><span class="line">time.strftime(<span class="string">&quot;%Y年%m月%d日 %H:%M:%S&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="urllib库"><a href="#urllib库" class="headerlink" title="urllib库"></a>urllib库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求链接</span></span><br><span class="line">urllib.request.urlopen(<span class="string">&#x27;url&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="math库"><a href="#math库" class="headerlink" title="math库"></a>math库</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回大于等于参数x的最小整数</span></span><br><span class="line">math.ceil(x)</span><br><span class="line"><span class="comment"># 返回小于等于参数x的最小整数</span></span><br><span class="line">math.floor(x)</span><br><span class="line"><span class="comment"># 返回平方根</span></span><br><span class="line">math.sqrt(x)</span><br></pre></td></tr></table></figure><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>类</p><p>具有相同属性和方法的对象集合</p><p>类变量</p><p>在整个实例化的对象中是公用的，类变量定义在类中且在函数体之外，类变量通常不作为实例变量来使用</p><p>局部变量</p><p>定义在方法中的变量，只作用于当前实例的类</p><p>实例变量</p><p>继承</p><p>实例化</p><p>创建一个类的实例，类的具体对象</p><p>方法</p><p>类中定义的函数</p><p>对象</p><p>类方法与实例方法</p><p>类方法不能直接访问</p><p>类方法直接访问，需要添加一个装饰器：@classmethod</p><h4 id="三大特征"><a href="#三大特征" class="headerlink" title="三大特征"></a>三大特征</h4><p>封装</p><p>继承</p><p>子类可以继承父类的属性和方法</p><p>同时又能新增自己的属性和方法</p><p>子类中有与父类相同的方法时，会覆盖掉父类方法</p><p>父类可以有多个子类</p><p>多态</p><p>在继承关系的基础上建立</p><p>在子类中有与父类相同的方法，并实现的功能不同时，就形成了代码的多态性</p><p>错误与异常</p><p>错误</p><p>语法错误</p><p>逻辑错误</p><p>系统错误</p><p>异常</p><p>try</p><p>except：发生异常时执行</p><p>else：不发生异常时执行</p><p>finally：无论有无异常最终都会执行</p><p>常见异常类型</p><p>除零异常</p><p>名称异常</p><p>索引异常</p><p>键异常</p><p>值异常</p><p>属性异常</p><p>主动抛出异常</p><p>raise 异常名</p><p>自定义异常</p><p>继承Exception类，编写自己的异常</p><p>调试与分析</p><p>打印日志</p><p>print</p><p>logging</p><p>断点</p><p>输入与输出</p><p>字面量打印与格式化</p><p>字面量定义</p><p>是将变量或常量通过各种方法组合起来，返回我们想要的字符串</p><p>字面量类型</p><p>数值型</p><p>字符型</p><p>布尔型</p><p>字面量集合</p><p>​    list</p><p>​    tuple</p><p>​    dict</p><p>​    set</p><p>特殊字面量</p><p>​    None</p><p>字面量插值</p><p>格式化输出%</p><p>​    具体用法</p><p>​    必须指定一个类型，才能使用</p><p>​    举例：print(“my name is %s\nmy age is %d\nmy num is %.3g”%(‘kane’,11,3.1415))</p><p>str.format()</p><p>​    可字符串，列表，字典</p><p>​    列表，字典使用时需要解包，*list，**dict</p><p>推荐使用F-strings</p><p>​    使用方法，在字符串前面加f，则认定字符串需要格式化</p><p>​    print(f”my name is {name},my age is {age}”)</p><p>​    大括号里面可以是表达式或函数</p><p>​    大括号内不能转义，不能使用“\”</p><p>文件读取</p><p>打开文件</p><p>open()</p><p>操作文件</p><p>查看文件是否可读：f.readlines()</p><p>读取文件中一行：f.readline()</p><p>读取文件全部行：f.readlines()</p><p>关闭文件</p><p>f.close()</p><p>使用with语句，可以将文件打开之后，操作完毕，自动关闭这个文件</p><p>json格式转换</p><p>定义</p><p>轻量级的数据交换格式</p><p>json由字典和列表组成</p><p>使用场景</p><p>生成：将对象生成为字符串，存入文件，数据库，在网络传输等</p><p>解析：解析来自文件，数据库，网络传输的字符串成python对象</p><p>跨语言的数据交换</p><p>常用方法</p><p>将json对象转换为str</p><p>​    json.dumps(data)</p><p>将str对象转换为json</p><p>​    json.loads(data)</p>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2022/01/07/git/"/>
      <url>/2022/01/07/git/</url>
      
        <content type="html"><![CDATA[<h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mac安装：</span></span><br><span class="line">brew intasll git</span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">git --version</span><br><span class="line"><span class="comment"># git配置用户名、邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;yanxiaokang&quot;</span></span><br><span class="line">git config --global user.mail <span class="string">&quot;yanxiaokang1993@163.com&quot;</span></span><br><span class="line"><span class="comment"># 验证配置</span></span><br><span class="line">git config --global --list</span><br><span class="line"><span class="comment"># ssh秘钥生成</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;yanxiaokang1993@163.com&quot;</span></span><br><span class="line"><span class="comment"># 生成秘钥路径</span></span><br><span class="line"><span class="built_in">cd</span> /Users/yanxiaokang/.ssh</span><br><span class="line">id_rsa.pub  <span class="comment">#公钥配置到git</span></span><br><span class="line">id_rsa  <span class="comment">#私钥</span></span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前目录创建仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 提交文件至临时仓库</span></span><br><span class="line">git add 文件名</span><br><span class="line"><span class="comment">#当前目录全部文件添加至临时仓库</span></span><br><span class="line">git add . </span><br><span class="line"><span class="comment"># 提交备注并提交到仓库</span></span><br><span class="line">git commit -m ’xxx‘</span><br><span class="line"><span class="comment"># 查看当前git状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 查看修改前后对比</span></span><br><span class="line">git diff</span><br><span class="line"><span class="comment"># 未add之前还原到上一次修改</span></span><br><span class="line">git checkout 文件名</span><br><span class="line"><span class="comment"># 已add之后，把文件从临时仓库删除，再使用checkout还原工作区</span></span><br><span class="line">git reset HEAD 文件名</span><br><span class="line"><span class="comment"># 返回到上一次commit的版本</span></span><br><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立远程连接</span></span><br><span class="line">git remote add origin xxx</span><br><span class="line"><span class="comment"># 首次推送至远程仓库，之后只需要 git push</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="comment"># 首次强制推送</span></span><br><span class="line">git push -f -u origin master</span><br><span class="line"><span class="comment"># 合并commit提交记录</span></span><br><span class="line">git rebase -i commit名</span><br><span class="line"><span class="comment"># 修改远程仓库</span></span><br><span class="line">git remote rm origin <span class="comment"># 删除原有远程仓库</span></span><br><span class="line">git remote add origin url <span class="comment"># 添加新的远程仓库</span></span><br></pre></td></tr></table></figure><h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">git branch 分支名</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout 分支名</span><br><span class="line"><span class="comment"># 创建并切换</span></span><br><span class="line">git checkout -b 分支名</span><br><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 将远程仓库更新至本地仓库</span></span><br><span class="line">git pull</span><br><span class="line"><span class="comment"># 合并分支</span></span><br><span class="line">git merge 分支名</span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -D 分支名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试平台开发</title>
      <link href="/2021/12/17/%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/"/>
      <url>/2021/12/17/%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h5 id="1、为什么要做测试平台？"><a href="#1、为什么要做测试平台？" class="headerlink" title="1、为什么要做测试平台？"></a>1、为什么要做测试平台？</h5><ul><li>市场需求：测试平台开发是目前行业中一个热门的技术，能为团队带来市场价值，比如wetest</li><li>公司需求：良好的测试平台能减轻公司内部的沟通成本</li></ul><h5 id="2、什么时候做测试平台？"><a href="#2、什么时候做测试平台？" class="headerlink" title="2、什么时候做测试平台？"></a>2、什么时候做测试平台？</h5><ul><li>已有开源测试平台不能满足需求，不要轻易造轮子</li><li>公司内部测试体系、测试技术健全，构建平台可以带动整个团队甚至团队之外的其他团队的提升</li><li>需要公司级别的定制，整合公司内部多套平台</li></ul><h5 id="3、怎么做测试平台？"><a href="#3、怎么做测试平台？" class="headerlink" title="3、怎么做测试平台？"></a>3、怎么做测试平台？</h5><ul><li>拆分平台功能：</li></ul><p><img src="https://s2.loli.net/2022/01/06/cnjxuGWr5PUbm6A.png" alt="image-20220105144819087"></p><h4 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h4><h5 id="常用的技术框架与组件"><a href="#常用的技术框架与组件" class="headerlink" title="常用的技术框架与组件"></a>常用的技术框架与组件</h5><ul><li>前端：bootstrap、vue、react</li><li>后端：django、flask、spring boot(java)</li><li>数据库：mysql、es</li><li>任务调度：jenkins</li><li>数据报表：echarts、vega、kibana、grafana、allure</li></ul><h5 id="选择框架：vue-flask-mysql-jenkins-allure"><a href="#选择框架：vue-flask-mysql-jenkins-allure" class="headerlink" title="选择框架：vue+flask+mysql+jenkins+allure"></a>选择框架：vue+flask+mysql+jenkins+allure</h5><p><img src="https://s2.loli.net/2022/01/06/EAxpQTNLCfSkYot.png" alt="image-20220105153815110"></p><h4 id="flask基础"><a href="#flask基础" class="headerlink" title="flask基础"></a>flask基础</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入Flask</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="comment"># 实例化flask</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 定义路由地址，以及请求方式 methods的值传入list</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/testcase&quot;</span>,methods=[<span class="string">&#x27;post&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_case</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/testcase&quot;</span>,methods=[<span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_case</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/testcase&quot;</span>,methods=[<span class="string">&#x27;put&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify_case</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/testcase&quot;</span>,methods=[<span class="string">&#x27;delete&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_case</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;status&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># debug=True调试模式，热加载，方便测试</span></span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>测试驱动开发模式，没写一个功能模块，就编写一个test自测，提升平台的健壮性</li></ul><h5 id="使用flask-restful定义接口"><a href="#使用flask-restful定义接口" class="headerlink" title="使用flask_restful定义接口"></a>使用flask_restful定义接口</h5>]]></content>
      
      
      <categories>
          
          <category> 测试平台开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> vue </tag>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium grid实战</title>
      <link href="/2021/12/17/docker%E5%AE%9E%E6%88%98/"/>
      <url>/2021/12/17/docker%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1、selenium-grid分布式UI自动化"><a href="#1、selenium-grid分布式UI自动化" class="headerlink" title="1、selenium grid分布式UI自动化"></a>1、selenium grid分布式UI自动化</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>selenium团队开发出的一款工具，本身是为浏览器兼容而生，但是又能很好的支持用例的分布式执行</p><h4 id="分布式概念"><a href="#分布式概念" class="headerlink" title="分布式概念"></a><strong>分布式概念</strong></h4><p>1、由一个主hub节点接受需要执行用例的命令，然后主hub节点根据内置的规则分配给若干个node代理节点去调用浏览器来执行</p><p>2、用例执行采用先进先出的原则，如果浏览器不足时，未分配到的用例等待先分配的用例执行完成后，再去执行</p><p><img src="https://s2.loli.net/2022/01/06/JKFlLUsgHmIzqc1.png" alt="grid概念"></p><h4 id="grid3搭建"><a href="#grid3搭建" class="headerlink" title="grid3搭建"></a>grid3搭建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull selenium/hub:3.7.1-beryllium</span><br><span class="line">docker pull selenium/node-chrome-debug:3.7.1-beryllium</span><br><span class="line"><span class="comment"># 启动主节点容器 --name指定容器名称；-p端口映射；-e指定环境变量； -d后台运行</span></span><br><span class="line">docker run --name=hub3.0 -p 5001:4444 -e GRID_TIMEOUT=0 -e GRID_THROW_ON_CAPABILITY_NOT_PRESENT=<span class="literal">true</span> -e GRID_NEW_SESSION_WAIT_TIMEOUT=-1 -e GRID_BROWSER_TIMEOUT=15000 -e GRID_TIMEOUT=30000 -e GRID_CLEAN_UP_CYCLE=30000 -d selenium/hub:3.7.1-beryllium</span><br><span class="line"><span class="comment"># 启动从节点容器 NODE_MAX_INSTANCES/NODE_MAX_SESSION 指定的数量需保持一致，开启浏览器的上限；-v执行一个虚拟内存位置 --link与主节点链接到起来</span></span><br><span class="line">docker run --name=chrome3.0 -p 5902:5900 -e NODE_MAX_INSTANCES=6 -e NODE_MAX_SESSION=6 -e NODE_REGISTER_CYCLE=5000 -e DBUS_SESSION_BUS_ADDRESS=/dev/null -v /dev/shm:/dev/shm --link hub -d selenium/node-chrome-debug:3.7.1-beryllium</span><br></pre></td></tr></table></figure><h4 id="grid4搭建"><a href="#grid4搭建" class="headerlink" title="grid4搭建"></a>grid4搭建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker pull selenium/hub:4.0.0</span><br><span class="line">docker pull selenium/node-chrome:4.0.0</span><br><span class="line"><span class="comment"># 启动主节点</span></span><br><span class="line">docker run --name=hub -p 5442-5444:4442-4444 -d selenium/hub:4.0.0</span><br><span class="line"><span class="comment"># SE_EVENT_BUS_HOST指定主节点ip，SE_NODE_MAX_SESSIONS最大浏览器限制</span></span><br><span class="line">docker run --name=chrome -p 5902:5900 -e SE_EVENT_BUS_HOST=101.35.13.59 -e SE_NODE_MAX_SESSIONS=20 -e SE_NODE_OVERRIDE_MAX_SESSIONS=<span class="literal">true</span> -e SE_EVENT_BUS_PUBLISH_PORT=5442 -e SE_EVENT_BUS_SUBSCRIBE_PORT=5443 -v /dev/shm:/dev/shm -d selenium/node-chrome:4.0.0</span><br></pre></td></tr></table></figure><h4 id="dome演示"><a href="#dome演示" class="headerlink" title="dome演示"></a>dome演示</h4><ul><li><p>编写python演示代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</span><br><span class="line"></span><br><span class="line">driver = webdriver.Remote(</span><br><span class="line">  <span class="comment"># grid3配置</span></span><br><span class="line">  command_executor=<span class="string">&#x27;http://101.35.13.59:5001/wd/hub&#x27;</span>,</span><br><span class="line">  <span class="comment"># grid4配置</span></span><br><span class="line">  <span class="comment"># command_executor=&#x27;http://101.35.13.59:5001,</span></span><br><span class="line">  desired_capabilities=DesiredCapabilities.CHROME)</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(driver.title)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li><li><p>安装vnc viewer客户端，输入node节点地址+端口，密码默认为secret，可查看节点运行情况</p></li><li><p>执行python代码</p></li></ul><h2 id="2、docker容器相关概念"><a href="#2、docker容器相关概念" class="headerlink" title="2、docker容器相关概念"></a>2、docker容器相关概念</h2><h4 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h4><p>docker 是一个开源的应用容器引擎，基于go语言开发，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口。</p><h4 id="linux名称空间（namespace）"><a href="#linux名称空间（namespace）" class="headerlink" title="linux名称空间（namespace）"></a>linux名称空间（namespace）</h4><ul><li>进程名称空间</li><li>网络名称空间</li><li>用户名称空间</li><li>mount名称空间</li><li>time名称空间</li><li>ipc名称空间</li><li>cgroups名称空间</li></ul><h4 id="docker隔离机制"><a href="#docker隔离机制" class="headerlink" title="docker隔离机制"></a>docker隔离机制</h4><p>docker的隔离主要依靠linux namespace名称空间技术，把liunx宿主机看成一个大房子，容器则是里面的小房间，将每个容器进程当成一个房间，达到容器之间相互隔离的目的</p><h4 id="docker网络通讯"><a href="#docker网络通讯" class="headerlink" title="docker网络通讯"></a>docker网络通讯</h4><p>docker主要隔离了<strong>进程名称空间，网络名称空间</strong>，达到容器相互之间隔离，也可以不隔离网络名称空间，达到容器之间可以相互访问</p><ul><li><p>bridge网络模式</p><p>1、内部通讯 ：使用虚拟网卡让容器内部通讯，新增虚拟网卡都是成对出现，一个网卡A放在容器，另外一个网卡A1放在网桥docker0上，达到容器之间内部通讯的目的</p><p><img src="https://s2.loli.net/2022/01/06/JMvON3hUBQzTa5L.png" alt="docker0网桥"></p><p><img src="https://s2.loli.net/2022/01/06/RP9Wldcwn6x1rvH.png" alt="内部通讯"></p><p>2、外部通讯：基于liunx iptables做端口映射，将容器端口映射到宿主机使容器暴露在外部网络，如果容器端口映射为-p 8080:80，此时用户访问8080端口时，宿主机将网络请求全部转发至容器80端口上</p><p><img src="https://s2.loli.net/2022/01/06/kD1fC58iunZya6l.png" alt="外部通讯"></p></li><li><p>host网络模式</p><p>完全使用宿主机的网络名称空间，宿主机的网卡，启动容器时 –net=host</p></li><li><p>container网络模式</p><p>使用其他容器的网络名称空间，–net=container:容器名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当某个容器出现网络故障，可以将宿主机的网络名称空间切换为容器的</span></span><br><span class="line">docker inspect 容器名     <span class="comment"># 查看容器源信息，找到进程名pid</span></span><br><span class="line"><span class="built_in">cd</span> /proc/进程名/ns     <span class="comment"># 查看容器名称空间</span></span><br><span class="line">nsenter -t 进程名 -n    <span class="comment"># 切换成容器的网络名称空间</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出容器网络名称空间，回到宿主机网络名称空间</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>练习题：使用不同的网络模式搭建selenium grid</p><h4 id="3、dockerfile使用"><a href="#3、dockerfile使用" class="headerlink" title="3、dockerfile使用"></a>3、dockerfile使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最简单的创建镜像方式</span></span><br><span class="line">docker commit 容器名 新镜像名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用dockerfile的方式创建python3.8环境镜像</span></span><br><span class="line">mkdir dockerfile_python3.8   <span class="comment"># 创建一个文件夹</span></span><br><span class="line"><span class="built_in">cd</span> dockerfile</span><br><span class="line">touch Dockerfile</span><br><span class="line">wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz</span><br><span class="line">vim Dockerfile  <span class="comment"># 编辑Dockerfile文件</span></span><br><span class="line">docker build -t python3.8 .  <span class="comment"># 创建镜像</span></span><br></pre></td></tr></table></figure><p>Dockerfile文件内容</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;yanxiaokang1993@163.com&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">&quot;centos7 &amp; python3.8&quot;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./Python-3.8.0.tgz ./Python-3.8.0.tgz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -ex \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 预安装所需组件</span></span></span><br><span class="line">    &amp;&amp; yum update -y \</span><br><span class="line">    &amp;&amp; yum install -y wget tar libffi-devel zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make initscripts \</span><br><span class="line">    &amp;&amp; yum clean all \</span><br><span class="line">    <span class="comment"># &amp;&amp; wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz \</span></span><br><span class="line">    &amp;&amp; tar -zxvf Python-<span class="number">3.8</span>.<span class="number">0</span>.tgz \</span><br><span class="line">    &amp;&amp; cd Python-<span class="number">3.8</span>.<span class="number">0</span> \</span><br><span class="line">    &amp;&amp; ./configure prefix=/usr/local/python3 \</span><br><span class="line">    &amp;&amp; make \</span><br><span class="line">    &amp;&amp; make install \</span><br><span class="line">    &amp;&amp; make clean \</span><br><span class="line">    &amp;&amp; rm -rf /Python-<span class="number">3.8</span>.<span class="number">0</span>* \</span><br><span class="line">    &amp;&amp; yum install -y epel-release \</span><br><span class="line">    &amp;&amp; yum install -y python-pip</span><br><span class="line"><span class="comment"># 设置默认为python3</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -ex \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 备份旧版本python</span></span></span><br><span class="line">    &amp;&amp; mv /usr/bin/python /usr/bin/python27 \</span><br><span class="line">    &amp;&amp; mv /usr/bin/pip /usr/bin/pip-python2.<span class="number">7</span> \</span><br><span class="line">    <span class="comment"># 配置默认为python3</span></span><br><span class="line">    &amp;&amp; ln -s /usr/local/python3/bin/python3.<span class="number">8</span> /usr/bin/python \</span><br><span class="line">    &amp;&amp; ln -s /usr/local/python3/bin/pip3 /usr/bin/pip</span><br><span class="line"><span class="comment"># 修复因修改python版本导致yum失效问题</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -ex \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s#/usr/bin/python#/usr/bin/python2.7#&quot;</span> /usr/bin/yum \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&quot;s#/usr/bin/python#/usr/bin/python2.7#&quot;</span> /usr/libexec/urlgrabber-ext-down \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum install -y deltarpm</span></span><br><span class="line"><span class="comment"># 基础环境配置</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -ex \</span></span><br><span class="line"><span class="bash">    <span class="comment"># 修改系统时区为东八区</span></span></span><br><span class="line">    &amp;&amp; rm -rf /etc/localtime \</span><br><span class="line">    &amp;&amp; ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span><br><span class="line">    &amp;&amp; yum install -y vim \</span><br><span class="line">    <span class="comment"># 安装定时任务组件</span></span><br><span class="line">    &amp;&amp; yum -y install cronie</span><br><span class="line"><span class="comment"># 支持中文</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install kde-l10n-Chinese -y</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> localedef -c -f UTF-8 -i zh_CN zh_CN.utf8</span></span><br><span class="line"><span class="comment"># 更新pip版本</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade pip</span></span><br><span class="line"><span class="keyword">ENV</span> LC_ALL zh_CN.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> TZ Asia/Shanghai</span><br><span class="line"><span class="keyword">ENV</span> PATH /usr/local/python3/bin/:$PATH</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -sf /usr/share/zoneinfo/Asia/ShangHai /etc/localtime</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium grid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基础</title>
      <link href="/2021/12/15/docker%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/12/15/docker%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="1、docker的基本概念"><a href="#1、docker的基本概念" class="headerlink" title="1、docker的基本概念"></a>1、docker的基本概念</h3><h4 id="1-1-docker原理："><a href="#1-1-docker原理：" class="headerlink" title="1.1 docker原理："></a>1.1 docker原理：</h4><blockquote><p>docker是一个开源的容器引擎，让开发者可以打包他们的应用以及依赖包（环境）到一个可移植的镜像中，然后发布到任何流行的linux或windows上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口</p></blockquote><h4 id="1-2-docker三大名词"><a href="#1-2-docker三大名词" class="headerlink" title="1.2 docker三大名词"></a>1.2 docker三大名词</h4><h5 id="镜像-images"><a href="#镜像-images" class="headerlink" title="镜像(images):"></a>镜像(images):</h5><blockquote><p>通过运行镜像启动容器，一个镜像是一个可执行的包，其中包括运行应用程序所需要的所有内容-代码，运行时，库、环境变量和配置文件。</p></blockquote><h5 id="容器-container"><a href="#容器-container" class="headerlink" title="容器(container):"></a>容器(container):</h5><blockquote><p>容器时镜像运行时示例-当被执行时(即，镜像状态，或者用户进程)在内存中，可以使用命令查看正在运行容器的列表docker ps,就像在Linux中一样。</p></blockquote><h5 id="仓库-DockerHub"><a href="#仓库-DockerHub" class="headerlink" title="仓库(DockerHub):"></a>仓库(DockerHub):</h5><blockquote><p>DockerHub就相当于Maven的Repository，在Respository中存放是一个一个的jar包，而在DockerHub存放的是一个一个的镜像。</p></blockquote><h4 id="1-3-容器与虚拟机的区别"><a href="#1-3-容器与虚拟机的区别" class="headerlink" title="1.3 容器与虚拟机的区别"></a>1.3 容器与虚拟机的区别</h4><ul><li>容器中运行原生Linux和共享主机与其它容器的内核，它运行一个独立的进程，不占用任何其它可执行文件的内存，使其轻量化。</li><li>虚拟机(VM)运行一个完整的“客户”操作系统，通过虚拟机管理程序虚拟访问主机资源。虚拟机提供的环境比大多数应用程序需要的资源多。</li></ul><h2 id="2、docker安装"><a href="#2、docker安装" class="headerlink" title="2、docker安装"></a>2、docker安装</h2><h4 id="1-准备linux内核版本超过3-0，查看内核命令"><a href="#1-准备linux内核版本超过3-0，查看内核命令" class="headerlink" title="1.准备linux内核版本超过3.0，查看内核命令"></a>1.准备linux内核版本超过3.0，查看内核命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><h4 id="2-安装gcc"><a href="#2-安装gcc" class="headerlink" title="2.安装gcc"></a>2.安装gcc</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><h4 id="3-卸载旧版本docker"><a href="#3-卸载旧版本docker" class="headerlink" title="3.卸载旧版本docker"></a>3.卸载旧版本docker</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure><h4 id="4-安装yum-utils"><a href="#4-安装yum-utils" class="headerlink" title="4.安装yum-utils"></a>4.安装yum-utils</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><h4 id="5-安装docker仓库"><a href="#5-安装docker仓库" class="headerlink" title="5.安装docker仓库"></a>5.安装docker仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用阿里云镜像地址安装：</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-更新-yum-软件包索引"><a href="#6-更新-yum-软件包索引" class="headerlink" title="6.更新 yum 软件包索引"></a>6.更新 yum 软件包索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><h4 id="7-安装-docker-ce-Docker社区版"><a href="#7-安装-docker-ce-Docker社区版" class="headerlink" title="7.安装 docker-ce Docker社区版"></a>7.安装 docker-ce Docker社区版</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h4 id="8-启动docker"><a href="#8-启动docker" class="headerlink" title="8.启动docker"></a>8.启动docker</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="9-测试docker，查看版本"><a href="#9-测试docker，查看版本" class="headerlink" title="9.测试docker，查看版本"></a>9.测试docker，查看版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><h4 id="10-测试docker运行hello-world"><a href="#10-测试docker运行hello-world" class="headerlink" title="10.测试docker运行hello-world"></a>10.测试docker运行hello-world</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h4 id="11-查看images"><a href="#11-查看images" class="headerlink" title="11.查看images"></a>11.查看images</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h2 id="3、卸载docker"><a href="#3、卸载docker" class="headerlink" title="3、卸载docker"></a>3、卸载docker</h2><h4 id="1、卸载docker引擎"><a href="#1、卸载docker引擎" class="headerlink" title="1、卸载docker引擎"></a>1、卸载docker引擎</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h4 id="2、删除docker的相关目录"><a href="#2、删除docker的相关目录" class="headerlink" title="2、删除docker的相关目录"></a>2、删除docker的相关目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/contained</span><br></pre></td></tr></table></figure><h2 id="4、docker常用的命令"><a href="#4、docker常用的命令" class="headerlink" title="4、docker常用的命令"></a>4、docker常用的命令</h2><h4 id="1、查看命令帮助"><a href="#1、查看命令帮助" class="headerlink" title="1、查看命令帮助"></a>1、查看命令帮助</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker 命令 --help</span><br><span class="line">docker images --help</span><br></pre></td></tr></table></figure><h4 id="2、镜像命令"><a href="#2、镜像命令" class="headerlink" title="2、镜像命令"></a>2、镜像命令</h4><h5 id="查看所有的镜像"><a href="#查看所有的镜像" class="headerlink" title="查看所有的镜像"></a>查看所有的镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker images -a    展示所有镜像 </span><br><span class="line">docker images -q    只展示镜像的ID</span><br><span class="line"></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED       SIZE</span><br><span class="line">hello-world   latest    feb5d9fea6a5   4 weeks ago   13.3kB</span><br><span class="line"></span><br><span class="line">REPOSITORY:镜像的仓库源</span><br><span class="line">TAG：镜像的标签</span><br><span class="line">IMAGE ID：镜像ID</span><br><span class="line">CREATED：创建时间</span><br><span class="line">SIZE：大小</span><br></pre></td></tr></table></figure><h5 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像  </span><br><span class="line">docker search 镜像 --filter=starts=3000（搜索stars数在3000以上的image）</span><br></pre></td></tr></table></figure><h5 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像</span><br><span class="line">docker pull 镜像:版本</span><br></pre></td></tr></table></figure><h5 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f 镜像id</span><br><span class="line">docker rmi -f $(docker images -aq)  批量删除全部镜像</span><br></pre></td></tr></table></figure><h4 id="3、容器命令"><a href="#3、容器命令" class="headerlink" title="3、容器命令"></a>3、容器命令</h4><h5 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run 参数 镜像</span><br><span class="line">docker run [可选参数] 镜像</span><br><span class="line">可选参数：</span><br><span class="line">--name=&quot;名称&quot;        // 设置容器名</span><br><span class="line">-d                     // 后台方式运行</span><br><span class="line">-it                 // 使用交互方式运行，可以进入容器查看内容</span><br><span class="line">-p                    //（小p）, 指定容器端口</span><br><span class="line">    -p ip:主机端口:容器端口</span><br><span class="line">    -p 主机端口:容器端口（常用）</span><br><span class="line">    -p 容器端口</span><br><span class="line">-P                    //（大P）, 随机指定容器端口</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">新建并进入容器</span><br><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用root用户进入容器</span><br><span class="line">docker exec -it -u root 容器id /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">容器内退出并停止容器</span><br><span class="line">exit</span><br><span class="line">退出并不停止容器</span><br><span class="line">（Ctrl + P + Q）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看正在运行的容器</span><br><span class="line">docker ps </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">再次进入交互模式的容器</span><br><span class="line">docker attach &#x27;container id&#x27;</span><br></pre></td></tr></table></figure><h5 id="列出运行中的容器"><a href="#列出运行中的容器" class="headerlink" title="列出运行中的容器"></a>列出运行中的容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps    查看正在运行的容器</span><br><span class="line">docker ps -a 查看运行容器的历史记录</span><br><span class="line">docker ps -a -n=2  查看最近运行的两个容器</span><br><span class="line">docker ps -aq  查看所有容器的ID</span><br></pre></td></tr></table></figure><h5 id="启动并停止容器"><a href="#启动并停止容器" class="headerlink" title="启动并停止容器"></a>启动并停止容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器ID    启动容器</span><br><span class="line">docker restart 容器ID  重启容器</span><br><span class="line">docker stop 容器ID     停止容器</span><br><span class="line">docker kill 容器ID     杀死容器</span><br></pre></td></tr></table></figure><h5 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器ID    删除指定容器</span><br><span class="line">docker rm -f 容器ID  强制删除指定容器</span><br><span class="line">docker rm -f $(docker ps -aq)   删除全部容器</span><br></pre></td></tr></table></figure><h4 id="4、其他命令"><a href="#4、其他命令" class="headerlink" title="4、其他命令"></a>4、其他命令</h4><h5 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d centos      </span><br><span class="line">后台启动docker ps中是查看不到进程的需要加上-a参数</span><br><span class="line">````</span><br><span class="line">##### 查询日志</span><br></pre></td></tr></table></figure><p>docker logs -tf –tail 5 容器ID  显示日志尾部的5条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##### 查看docker容器内部的进程信息</span><br></pre></td></tr></table></figure><p>docker top 容器ID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##### 查看容器中的元数据</span><br></pre></td></tr></table></figure><p>docker inspect 容器ID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##### 进入当前正在运行的容器</span><br></pre></td></tr></table></figure><p>docker exec -it 容器ID 终端路径     进入容器后开启一个新的终端<br>docker attach 容器ID     进入当前正在执行的终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">##### 拷贝容器内的文件到本地</span><br></pre></td></tr></table></figure><p>docker cp 容器ID:文件路径  本地路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## 5、portainer可视化面板安装</span><br></pre></td></tr></table></figure><p>docker run -d -p 8088:9000 -v /var/run/docker.sock:/var/run/docker.sock  –restart=always portainer/portainer</p><p>```<br>可视化推荐使用rancher</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest框架</title>
      <link href="/2021/11/17/pytest%E6%A1%86%E6%9E%B6/"/>
      <url>/2021/11/17/pytest%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="安装以及装备"><a href="#安装以及装备" class="headerlink" title="安装以及装备"></a>安装以及装备</h2><ol><li>提前安装了python3.6以上</li><li>pip install pytest 安装pytest</li><li>pip install -U pytest 在原基础上更新安装 </li><li>或者在pychram上直接安装<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行第一段pytest代码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inc</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_answer</span>():</span></span><br><span class="line">    <span class="keyword">assert</span> inc(<span class="number">4</span>) == <span class="number">5</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="pytest命名规则"><a href="#pytest命名规则" class="headerlink" title="pytest命名规则"></a>pytest命名规则</h2><ol><li>文件名：test_开头或者_test结尾</li><li>类：Test开头（==测试类中不要添加__init__函数==）</li><li>方法/函数：test_开头（==在类里面的叫方法，在类外面的叫函数==）</li></ol><h2 id="命令运行用例"><a href="#命令运行用例" class="headerlink" title="命令运行用例"></a>命令运行用例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接执行项目下所有符合要求的测试用例（命名规范符合要求）</span></span><br><span class="line">pytest</span><br><span class="line"><span class="comment"># 指定某个测试文件执行</span></span><br><span class="line">pytest test_dome.py</span><br><span class="line"><span class="comment"># 指定文件中的类执行</span></span><br><span class="line">pytest test_dome.py::TestDome</span><br><span class="line"><span class="comment"># 指定单条测试用例执行</span></span><br><span class="line">pytest test_dome.py::TestDome::test_case1</span><br><span class="line"><span class="comment"># 显示执行过程</span></span><br><span class="line">pytest -v test_dome.py</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令运行常用参数</span></span><br><span class="line">-x 用例一旦执行失败，立刻停止执行</span><br><span class="line">--maxfail=num 允许用例失败num次，一旦数量达到则中断执行</span><br><span class="line">-m 标记用例</span><br><span class="line">-k 执行包含某个关键词的测试用例</span><br><span class="line">-v 展示执行过程</span><br><span class="line">-s 显执行日志</span><br><span class="line">-collect-only（测试平台，pytest，pytest自动导入功能）</span><br><span class="line">--lf 只重新运行上次失败的用例</span><br><span class="line">--ff 先运行上次失败，在运行其余的测试</span><br></pre></td></tr></table></figure><p><strong>运行结果分析</strong></p><ol><li>fail  –用例失败</li><li>error  –代码错误，不正确的断言也会</li><li>pass   –用例通过</li><li>warning  –警告，不影响运行</li><li>deselect  –没有被选中</li></ol><h2 id="pytest测试框架结构"><a href="#pytest测试框架结构" class="headerlink" title="pytest测试框架结构"></a>pytest测试框架结构</h2><table><thead><tr><th>类型</th><th>规则</th></tr></thead><tbody><tr><td>setup_module/teardown_module</td><td>全局模块级,每个测试文件前后执行一次</td></tr><tr><td>setup_class/teardown_class</td><td><strong>类级，只在类中前后运行一次（重点）</strong></td></tr><tr><td>setup_function/teardown_function</td><td>函数级，在类外的每个函数前后执行</td></tr><tr><td>setup_method/teardown_method</td><td>方法级，类中的每个方法前后执行</td></tr><tr><td>setup/teardown</td><td><strong>在类中，在每个方法的前后执行（重点）</strong></td></tr></tbody></table><p><strong>setup_method == setup，作用相同</strong></p><h2 id="标记测试用例"><a href="#标记测试用例" class="headerlink" title="标记测试用例"></a>标记测试用例</h2><p><strong>使用方法：@pytest.mark.标签名</strong></p><p><strong>pytest test_dome.py -m 标签名；只执行该标签名的用例</strong></p><ol><li>当筛选标签名执行时，pytest会报警告，需要将标签名配置在pytest.ini文件中</li><li>配置多个标签名时需要换行<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pytest.ini</span><br><span class="line">[pytest]</span><br><span class="line">markers = 标签名<span class="number">1</span></span><br><span class="line">          标签名<span class="number">2</span></span><br><span class="line">          ...</span><br></pre></td></tr></table></figure></li></ol><h2 id="设置跳过，预期失败用例"><a href="#设置跳过，预期失败用例" class="headerlink" title="设置跳过，预期失败用例"></a>设置跳过，预期失败用例</h2><p><strong>@pytest.mark.skip(reason=跳过原因)</strong> </p><ul><li>始终跳过测试用例</li><li>pytest.skip(reason= ) 代码中跳过代码</li></ul><p><strong>@pytest.mark.skipif()</strong> </p><ul><li>条件为True时跳过，False正常执行用例</li><li>条件达到则跳过用例</li></ul><p><strong>@pytest.mark.xfail</strong></p><ul><li>用例还是会执行</li><li>当用例成功时则xpass</li><li>当用例失败时则返回xfail</li></ul><h2 id="参数化"><a href="#参数化" class="headerlink" title="参数化"></a>参数化</h2><p><strong>单参数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.参数化的名字要与方法中的参数名一一对应</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;appium&#x27;</span>,<span class="string">&#x27;selenium&#x27;</span>,<span class="string">&#x27;pytest&#x27;</span>]</span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;name&quot;</span>,<span class="built_in">list</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_para</span>(<span class="params">naem</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> name <span class="keyword">in</span> <span class="built_in">list</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>多参数、用例重命名ids</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.如果传递多个参数的话，要放在列表中，类表中嵌套列表/元组</span></span><br><span class="line"><span class="comment"># 2.ids传递的个数需要与传递数据的个数一致</span></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;test_input,expected&quot;</span>,[(<span class="params"><span class="string">&quot;3+3&quot;</span>,<span class="number">6</span></span>),(<span class="params"><span class="string">&quot;2+1&quot;</span>,<span class="number">3</span></span>),(<span class="params"><span class="string">&quot;4-3&quot;</span>,<span class="number">1</span></span>)],ids=[...]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_paras</span>(<span class="params">test_input,expected</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">eval</span>(test_input) == expected</span><br></pre></td></tr></table></figure><p><strong>笛卡尔积</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.全量测试，把数据全部的排列组合进行测试</span></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;wd&quot;</span>,[<span class="string">&quot;appium&quot;</span>,<span class="string">&quot;selenium&quot;</span>,<span class="string">&quot;pytest&quot;</span>]</span>)</span></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;code&quot;</span>,[<span class="string">&quot;utf-8&quot;</span>,<span class="string">&quot;gbk&quot;</span>,<span class="string">&quot;gb2312&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_dkej</span>(<span class="params">wb,code</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;wd:<span class="subst">&#123;wd&#125;</span>,code:<span class="subst">&#123;code&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="pytest异常处理"><a href="#pytest异常处理" class="headerlink" title="pytest异常处理"></a>pytest异常处理</h2><p><strong>方法1：try…except</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 捕获异常</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">obj,index</span>):</span></span><br><span class="line">    <span class="keyword">return</span> obj[index]</span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;spam&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    name(x,<span class="number">9</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不存在指定的索引位置&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用raise主动触发异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> IndexError</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主动触发异常&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义异常</span></span><br><span class="line"><span class="comment"># 定义一个Bad类，继承Exception</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bad</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，主动触发异常Bad</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doomed</span>():</span></span><br><span class="line">    <span class="keyword">raise</span> Bad()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    doomed()</span><br><span class="line"><span class="keyword">except</span> Bad:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是一个自定义异常&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># finally，无论try代码块中是否发生异常都会执行</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> IndexError</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in finally&quot;</span>)</span><br><span class="line"><span class="comment"># 外面的代码块不会执行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;out finally&quot;</span>)</span><br></pre></td></tr></table></figure><hr><p><strong>方法2：pytest.raise()</strong></p><p>pytest封装了try…except方法，在pytest中使用raises捕获异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exe</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 定义一个预期的异常ValueError</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;除数不能为o&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>/x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_raises</span>():</span></span><br><span class="line">    <span class="comment"># 将定义的异常指向变量info</span></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(ValueError) <span class="keyword">as</span> info:</span><br><span class="line">        exe(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(info.<span class="built_in">type</span>)</span><br><span class="line">    <span class="built_in">print</span>(info.value.args[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">assert</span> info.<span class="built_in">type</span> == ValueError</span><br><span class="line">    <span class="keyword">assert</span> info.value.args[<span class="number">0</span>] == <span class="string">&quot;除数不能为o&quot;</span></span><br></pre></td></tr></table></figure><h2 id="数据驱动"><a href="#数据驱动" class="headerlink" title="数据驱动"></a>数据驱动</h2><p><strong>简介</strong></p><blockquote><p>数据的改变从而驱动自动化测试的执行，最终引起测试结果的改变，简单来说，就是参数化的应用</p></blockquote><p><strong>应用场景</strong></p><blockquote><p>app，web，接口自动化测试</p></blockquote><ul><li>测试步骤数据驱动</li><li>测试数据的驱动</li><li>配置文件数据驱动</li></ul><p>参数化与数据驱动的区别</p><ul><li>数据驱动：将数据进行组织，之后对数据进行整合和提炼，形成以数据为中心进行的一切行动</li><li>参数化：将用例所需要的参数变量化，然后将变量指向一系列数据，从而实现同一个测试场景使用不用测试数据进行测试</li></ul><p><strong>1、yaml</strong></p><ol><li>yaml读取数据时默认为列表格式，如果yaml文件格式为字典，则只读取key值</li><li>yaml文件格式类似时，读取时可以把key作为变量，方法传参来指定读取测试数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">key：value    <span class="comment">#读取时为字典格式</span></span><br><span class="line"></span><br><span class="line">- </span><br><span class="line"> key：value    <span class="comment">#读取时则为列表格式</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>2、excel</strong></p><blockquote><p>读取excle的常用第三方库，xlrd、xlwings、pandas、==openpyxl==</p></blockquote><ul><li>openpyxl的安装    pip install openpyxl<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#工作簿1.xlsx的内容</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#123</span></span><br><span class="line"><span class="comment">#369</span></span><br><span class="line"><span class="comment">#100200    300</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_excel</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    解析excel的数据</span></span><br><span class="line"><span class="string">    :return: [[1,2,3],[3,6,9],[100,200,300]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取工作簿</span></span><br><span class="line">    book = openpyxl.load_workbook(<span class="string">&quot;./工作簿1.xlsx&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取工作表</span></span><br><span class="line">    sheet = book.active</span><br><span class="line">    <span class="comment"># 获取单元格</span></span><br><span class="line">    cells= sheet[<span class="string">&quot;A1&quot;</span>:<span class="string">&quot;C3&quot;</span>]</span><br><span class="line">    <span class="comment"># 嵌套遍历,获取excel中的测试数据</span></span><br><span class="line">    datas = []</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> cells:</span><br><span class="line">        cell = []</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> value:</span><br><span class="line">            cell.append(data.value)</span><br><span class="line">        datas.append(cell)</span><br><span class="line">    <span class="keyword">return</span> datas</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;x,y,result&quot;</span>,get_excel(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">x,y,result</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> x + y == result</span><br></pre></td></tr></table></figure></li></ul><p><strong>3、csv</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test.csv文件内容</span></span><br><span class="line"><span class="comment"># 1,2,3</span></span><br><span class="line"><span class="comment"># 3,6,9</span></span><br><span class="line"><span class="comment"># 100,200,300</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_csv</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取csv文件数据</span></span><br><span class="line"><span class="string">    :return: [[1,2,3],[3,6,9],[100,200,300]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 使用with方法open文件后会自动关闭文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../test_data/test.csv&quot;</span>) <span class="keyword">as</span> files:</span><br><span class="line">        rows = csv.reader(files)</span><br><span class="line">        datas = []</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> rows:</span><br><span class="line">            datas.append(line)</span><br><span class="line">        <span class="keyword">return</span> datas</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;x,y,result&quot;</span>,get_csv(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">x,y,result</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">int</span>(x) + <span class="built_in">int</span>(y) == <span class="built_in">int</span>(result)</span><br></pre></td></tr></table></figure><p><strong>4、json</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_json</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../test_data/data.json&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> files:</span><br><span class="line">        <span class="comment"># 读取json并保存在data</span></span><br><span class="line">        data = json.loads(files.read())</span><br><span class="line">        <span class="comment"># 取出data中的value并装换成list</span></span><br><span class="line">        data_list = <span class="built_in">list</span>(data.values())</span><br><span class="line">        <span class="comment"># 返回list测试数据</span></span><br><span class="line">        <span class="keyword">return</span> data_list</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"><span class="string">&quot;x,y,result&quot;</span>,get_json(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case1</span>(<span class="params">x,y,result</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">int</span>(x) + <span class="built_in">int</span>(y) == <span class="built_in">int</span>(result)</span><br></pre></td></tr></table></figure><h2 id="10-allure"><a href="#10-allure" class="headerlink" title="10.allure"></a>10.allure</h2><p><strong>安装</strong></p><ol><li>本机环境安装allure：brew install allure</li><li>pytest调用allure需要第三方库：pip install allure-pytest</li></ol><p><strong>添加用例描述</strong></p><ul><li>@allure.title()      测试标题</li><li>@allure.feature()    主模块描述</li><li>@allure.stroy()      子功能描述</li><li>@allure.step()       测试步骤描述<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#直接在用例中使用 </span></span><br><span class="line"><span class="keyword">with</span> allure.step():</span><br><span class="line">    <span class="keyword">assert</span> ...</span><br></pre></td></tr></table></figure></li></ul><p><strong>添加链接</strong></p><ul><li><p>@allure.link()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用：</span></span><br><span class="line"><span class="meta">@allure.link(<span class="params"><span class="string">&quot;链接&quot;</span>,name=<span class="string">&quot;链接命名&quot;</span></span>)</span></span><br></pre></td></tr></table></figure></li><li><p>@allure.issue()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用：</span></span><br><span class="line"><span class="meta">@allure.issue(<span class="params"><span class="string">&#x27;bug编号&#x27;</span>,name=<span class="string">&quot;链接命名&quot;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行用例时指向bug管理工具地址：</span></span><br><span class="line"> pytest 用例文件 --alluredir 原始报告保存路径  --clean-alluredir --allure-link-pattern=issue:bug管理工具地址&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>@allure.testcase()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用</span></span><br><span class="line">TESTCASELINK = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="meta">@allure.testcase(<span class="params">TESTCASELINK,name=<span class="string">&quot;用例管理平台&quot;</span></span>)</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>设置优先级 @allure.severity()</strong></p><ul><li> BLOCKER = ‘blocker’</li><li> CRITICAL = ‘critical’</li><li> NORMAL = ‘normal’</li><li> MINOR = ‘minor’</li><li> TRIVIAL = ‘trivial’<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用方法</span></span><br><span class="line"><span class="meta">@allure.severity(<span class="params">allure.severity_level.TRIVIAL</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定级别运行测试用例：</span></span><br><span class="line">pytest -vs 文件名 --allure-severities 级别,级别 --alluredir=路径</span><br></pre></td></tr></table></figure></li></ul><p>添加附件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用</span></span><br><span class="line">allure.attach.file(<span class="string">&quot;/Users/yanxiaokang/Downloads/chart-download.png&quot;</span>,name=<span class="string">&quot;截图&quot;</span>)</span><br><span class="line">allure.attach(body=<span class="string">&#x27;&lt;h3 class=&quot;aside-title&quot;&gt;目录&lt;/h3&gt;&#x27;</span>,attachment_type=allure.attachment_type.HTML,name=<span class="string">&quot;一段html源码&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>allure生成报告</strong></p><ul><li>1、执行用例并删除报告文件生成新的报告文件：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -vs 用例文件 --alluredir=目录 --clean-alluredir</span><br></pre></td></tr></table></figure></li><li>2、在线打开报告：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure serve 报告目录</span><br></pre></td></tr></table></figure></li><li>3、保存报告在本地：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure generate 原始报告文件 -o 报告存放路径</span><br></pre></td></tr></table></figure></li><li>4、本地启动web服务并打开报告：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allure open -h 127.0.0.1 -p 8883 ./报告文件</span><br></pre></td></tr></table></figure></li></ul><h2 id="fixture"><a href="#fixture" class="headerlink" title="fixture"></a>fixture</h2><p><strong>fixture特点以及作用</strong></p><ul><li>命令灵活：对于setup，teardown，可以不起这两个名字</li><li>数据共享，在conftest.py配置里写方法可以实现数据共享，不需要import导入</li><li>scope的层次以及yield组合相当于各种setup和teardown</li><li>实现参数化</li></ul><p><strong>fixture与setup的区别</strong>？</p><ul><li>fixture命名更灵活，不要以test_开头，与用例区分开</li><li>fixture是以参数的形式传递到测试用例中，想用就用，可以在需要fixture的测试用例中参数添加fixture，不需要就不传递</li><li>一条用例可以使用多个fixture作为前置条件</li><li>autouse 可以使fixture自动执行，自动引入不需要导入</li><li>conftest.py为fixture而生的，可以方便管理、修改和查看fixture函数</li></ul><p><strong>fixture基本用法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 场景:一个测试类中用一些测试用例需登录才能执行，有一些不需要登录也可以执行</span></span><br><span class="line"><span class="comment"># 首先定义一个登录方法，在方法前加一个fixture装饰器，把该方法名当成参数传入需要使用这个方法的用例中，则在执行用例时就会先去执行fixture定义的方法然后再执行用例</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;完成登录操作&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_order</span>(<span class="params">login</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;去下单&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>fixture的作用域</strong></p><table><thead><tr><th>范围</th><th>作用说明</th></tr></thead><tbody><tr><td>function</td><td>每个函数或方法都会调用</td></tr><tr><td>class</td><td>每个测试类只运行一次</td></tr><tr><td>module</td><td>每个.py文件调用一次</td></tr><tr><td>package</td><td>每个python包调用一次（暂不支持）</td></tr><tr><td>session</td><td>每个回话只运行一次，单次运行为一个会话</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@pytest.fixture(scope=&quot;class&quot;)</span><br></pre></td></tr></table></figure><p><strong>fixture–yield</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前面为setup操作</span></span><br><span class="line"><span class="comment"># yield</span></span><br><span class="line"><span class="comment"># 后面为teardown操作</span></span><br></pre></td></tr></table></figure><p><strong>conftest.py文件数据共享</strong></p><ul><li>conftest名字是固定的，不能改变</li><li>将项目共享的方法可以放置在conftest文件中，方便直接调用</li></ul><p><strong>fixtrue自动应用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># autouse=True打开自动应用</span></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;function&quot;</span>,autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>fixtrue实现参数化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">params=[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],[-<span class="number">0.01</span>,<span class="number">0.02</span>,<span class="number">0.01</span>]],ids=[<span class="string">&quot;2个整数相加&quot;</span>,<span class="string">&quot;2个浮点数相加&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_fixture_data</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> request.param</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCalculator</span>:</span></span><br><span class="line">    <span class="comment"># 使用fixture实现参数化</span></span><br><span class="line"><span class="meta">    @allure.story(<span class="params"><span class="string">&quot;加法p0用例&quot;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_p0_add</span>(<span class="params">self,get_fixture_data</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> get_fixture_data[<span class="number">2</span>] == cl.add(get_fixture_data[<span class="number">0</span>],get_fixture_data[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><strong>pytest.ini配置文件</strong></p><ul><li>可以修改用例的命名规则<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行check_和test_开头的所有文件</span></span><br><span class="line">python_files = check_* test_*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行所有以Check和Tset开头的类</span></span><br><span class="line">python_classes = Check* Test*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行所有check_和test_开头的函数和方法</span></span><br><span class="line">python_functions = check_* test_*</span><br></pre></td></tr></table></figure></li><li>配置日志格式，比代码配置更方便<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志开关 true false</span></span><br><span class="line">log_cli = true</span><br><span class="line"><span class="comment"># 日志级别</span></span><br><span class="line">log_cli_level = info</span><br><span class="line"><span class="comment"># 打印详细日志，相当于命令行加 -vs</span></span><br><span class="line">addopts = --capture=no</span><br><span class="line"><span class="comment"># 日志格式</span></span><br><span class="line">log_cli_format = %(asctime)s [%(levelname)s] %(message)s (%(filename)s:%(lineno)s)</span><br><span class="line"><span class="comment"># 日志时间格式</span></span><br><span class="line">log_cli_date_format = %Y-%m-%d %H:%M:%S</span><br><span class="line"><span class="comment"># 日志文件位置</span></span><br><span class="line"><span class="comment"># log_file = ./log/test.log</span></span><br><span class="line"><span class="comment"># 日志文件等级</span></span><br><span class="line">log_file_level = info</span><br><span class="line"><span class="comment"># 日志文件格式</span></span><br><span class="line">log_file_format = %(asctime)s [%(levelname)s] %(message)s (%(filename)s:%(lineno)s)</span><br><span class="line"><span class="comment"># 日志文件日期格式</span></span><br><span class="line">log_file_date_format = %Y-%m-%d %H:%M:%S</span><br></pre></td></tr></table></figure></li><li>添加自定义标签，防止运行过程中报警告错误<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">marks = </span><br></pre></td></tr></table></figure></li><li>指定/排除执行目录<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置执行的目录</span></span><br><span class="line">testpaths = 路径</span><br><span class="line"><span class="comment"># 忽略一些目录</span></span><br><span class="line">norecursedirs = result logs datas test_dome*</span><br></pre></td></tr></table></figure></li></ul><h2 id="pytest插件开发，hook函数"><a href="#pytest插件开发，hook函数" class="headerlink" title="pytest插件开发，hook函数"></a>pytest插件开发，hook函数</h2><h4 id="1、hook函数介绍"><a href="#1、hook函数介绍" class="headerlink" title="1、hook函数介绍"></a>1、hook函数介绍</h4><ul><li>hook函数也称钩子函数</li><li>hook函数会被系统自动调用，使用时直接在hookspec.py文件中找到对应hook函数，复制函数体进行编写</li><li>pytest执行时是会有固定的顺序，对顺序中的hook函数进行二次开发达到自己所需要的目的</li></ul><h4 id="2、pytest-hook的执行顺序"><a href="#2、pytest-hook的执行顺序" class="headerlink" title="2、pytest hook的执行顺序"></a>2、pytest hook的执行顺序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">文字版顺序</span><br><span class="line">root</span><br><span class="line">└── pytest_cmdline_main</span><br><span class="line">├── pytest_plugin_registered</span><br><span class="line">├── pytest_configure</span><br><span class="line">│ └── pytest_plugin_registered</span><br><span class="line">├── pytest_sessionstart</span><br><span class="line">│ ├── pytest_plugin_registered</span><br><span class="line">│ └── pytest_report_header</span><br><span class="line">├── pytest_collection        <span class="comment"># 测试用例收集开始</span></span><br><span class="line">│ ├── pytest_collectstart</span><br><span class="line">│ ├── pytest_make_collect_report</span><br><span class="line">│ │ ├── pytest_collect_file</span><br><span class="line">│ │ │ └── pytest_pycollect_makemodule</span><br><span class="line">│ │ └── pytest_pycollect_makeitem</span><br><span class="line">│ │ └── pytest_generate_tests</span><br><span class="line">│ │ └── pytest_make_parametrize_id</span><br><span class="line">│ ├── pytest_collectreport</span><br><span class="line">│ ├── pytest_itemcollected</span><br><span class="line">│ ├── pytest_collection_modifyitems   <span class="comment"># 用例收集结束</span></span><br><span class="line">│ └── pytest_collection_finish</span><br><span class="line">│ └── pytest_report_collectionfinish</span><br><span class="line">├── pytest_runtestloop         <span class="comment"># 测试用例执行阶段</span></span><br><span class="line">│ └── pytest_runtest_protocol</span><br><span class="line">│ ├── pytest_runtest_logstart</span><br><span class="line">│ ├── pytest_runtest_setup    <span class="comment"># setup执行阶段</span></span><br><span class="line">│ │ └── pytest_fixture_setup</span><br><span class="line">│ ├── pytest_runtest_makereport</span><br><span class="line">│ ├── pytest_runtest_logreport</span><br><span class="line">│ │ └── pytest_report_teststatus</span><br><span class="line">│ ├── pytest_runtest_call</span><br><span class="line">│ │ └── pytest_pyfunc_call</span><br><span class="line">│ ├── pytest_runtest_teardown   <span class="comment"># teardown执行阶段</span></span><br><span class="line">│ │ └── pytest_fixture_post_finalizer</span><br><span class="line">│ └── pytest_runtest_logfinish</span><br><span class="line">├── pytest_sessionfinish</span><br><span class="line">│ └── pytest_terminal_summary</span><br><span class="line">└── pytest_unconfigure</span><br></pre></td></tr></table></figure><h4 id="3、hookspec-py文件路径"><a href="#3、hookspec-py文件路径" class="headerlink" title="3、hookspec.py文件路径"></a>3、hookspec.py文件路径</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site_packages/_pytest/hookspec.py</span><br></pre></td></tr></table></figure><h4 id="4、编写插件"><a href="#4、编写插件" class="headerlink" title="4、编写插件"></a>4、编写插件</h4><p><strong>1、修改默认编码格式</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hook函数，在用例收集完毕之后会被调用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pytest_collection_modifyitems</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    session: <span class="string">&quot;Session&quot;</span>, config: <span class="string">&quot;Config&quot;</span>, items: <span class="type">List</span>[<span class="string">&quot;Item&quot;</span>]</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1、用例收集完毕后，遍历用例对象，修改name、nodeid编码格式</span></span><br><span class="line"><span class="string">    2、将python的默认编码格式unicode装换为utf-8，再装换为unicode_escape</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        item.name = item.name.encode(<span class="string">&quot;utf-8&quot;</span>).decode(<span class="string">&quot;unicode_escape&quot;</span>)</span><br><span class="line">        item._nodeid = item._nodeid.encode(<span class="string">&quot;utf-8&quot;</span>).decode(<span class="string">&quot;unicode_escape&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>2、添加命令行参数</strong></p><p>conftest.py文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过添加命令行自定义参数可以达到，在执行用例时添加命令参数来指定测试数据</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># hook函数头[pytest_addoption(parser):]为固定写法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pytest_addoption</span>(<span class="params">parser</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    新建一个命令行组kane，命令为--env，参数默认为test</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    my_group = parser.getgroup(<span class="string">&#x27;kane&#x27;</span>)</span><br><span class="line">    my_group.addoption(<span class="string">&#x27;--env&#x27;</span>,default=<span class="string">&#x27;test&#x27;</span>,dest=<span class="string">&#x27;test env&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;set you run env&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;session&quot;</span>,autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_option</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取命令行参数的值，并return</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> request.config.getoption(<span class="string">&quot;--env&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;session&quot;</span>,autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_test_env</span>(<span class="params">get_option</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">     获取到命令行的值并对值判断</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> get_option == <span class="string">&quot;test&quot;</span>:</span><br><span class="line">        data_path = <span class="string">&#x27;./test.yaml&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> get_option == <span class="string">&quot;dev&quot;</span>:</span><br><span class="line">        data_path = <span class="string">&quot;./dev.yaml&quot;</span></span><br><span class="line">    <span class="comment"># 经过判断后得到yaml文件的路径，并解析文件返回数据</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(data_path) <span class="keyword">as</span> f:</span><br><span class="line">        get_data = yaml.safe_load(f)</span><br><span class="line">    <span class="keyword">return</span> get_data</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>test_case.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_dome1</span>(<span class="params">get_test_env</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(get_test_env)</span><br></pre></td></tr></table></figure><p>命令行：pytest -vs –env 环境 test_case.py,即可指定测试数据来执行</p><p>3、插件打包发布</p><p><strong>插件打包发布前提</strong>：</p><ul><li>源码包</li><li>setup.py文件配置</li><li>test测试包</li></ul><p><strong>打包</strong></p><ol><li>依赖包安装：pip install setuptools /  pip install wheel</li><li>配置好setup后，输入打包命令：python setup.py sdist bdist_wheel</li></ol><p><strong>插件上传至pypi</strong></p><ol><li>安装twine：python3 -m pip install –upgrade twine </li><li>执行：twine upload dist/*</li></ol>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
